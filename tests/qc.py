#!/usr/bin/env python3
"""
üéØ SOULFRIEND QC - Quality Control System
=========================================
Ki·ªÉm so√°t ch·∫•t l∆∞·ª£ng cu·ªëi c√πng tr∆∞·ªõc khi deploy

Created: August 27, 2025
Purpose: Final quality control for SOULFRIEND.py
"""

import os
import sys
import json
import subprocess
import importlib.util
import logging
from datetime import datetime
from pathlib import Path

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class SOULFRIENDQualityControl:
    """üéØ Quality Control System"""
    
    def __init__(self):
        self.base_path = "/workspaces/Mentalhealth"
        self.app_file = f"{self.base_path}/SOULFRIEND.py"
        self.qc_results = []
        self.critical_issues = []
        
    def verify_deployment_readiness(self):
        """Ki·ªÉm tra s·∫µn s√†ng deployment"""
        logger.info("üéØ Verifying deployment readiness...")
        
        # Critical files check
        critical_files = [
            ("SOULFRIEND.py", self.app_file),
            ("requirements.txt", f"{self.base_path}/requirements.txt"),
            ("launch script", f"{self.base_path}/launch_soulfriend.sh"),
            ("components/ui.py", f"{self.base_path}/components/ui.py"),
            ("components/ui_advanced.py", f"{self.base_path}/components/ui_advanced.py"),
            ("data/dass21_vi.json", f"{self.base_path}/data/dass21_vi.json")
        ]
        
        for name, path in critical_files:
            if os.path.exists(path):
                self.qc_results.append(f"‚úÖ QC DEPLOY: {name} - C√≥")
            else:
                self.qc_results.append(f"‚ùå QC DEPLOY: {name} - THI·∫æU")
                self.critical_issues.append(f"Missing critical file: {name}")
                
    def verify_app_functionality(self):
        """Ki·ªÉm tra ch·ª©c nƒÉng ·ª©ng d·ª•ng"""
        logger.info("üéØ Verifying app functionality...")
        
        try:
            # Ki·ªÉm tra import ƒë∆∞·ª£c kh√¥ng
            spec = importlib.util.spec_from_file_location("soulfriend", self.app_file)
            if spec is None:
                self.qc_results.append("‚ùå QC FUNC: Kh√¥ng th·ªÉ import app")
                self.critical_issues.append("Cannot import main app")
                return
                
            self.qc_results.append("‚úÖ QC FUNC: App c√≥ th·ªÉ import")
            
            # Ki·ªÉm tra syntax
            with open(self.app_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            try:
                compile(content, self.app_file, 'exec')
                self.qc_results.append("‚úÖ QC FUNC: Python syntax OK")
            except SyntaxError as e:
                self.qc_results.append(f"‚ùå QC FUNC: Syntax error - {e}")
                self.critical_issues.append(f"Syntax error: {e}")
                
            # Ki·ªÉm tra c√°c function ch√≠nh
            main_functions = [
                "main()",
                "st.set_page_config",
                "SmartUIExperience",
                "load_dass21_vi",
                "score_dass21"
            ]
            
            for func in main_functions:
                if func in content:
                    self.qc_results.append(f"‚úÖ QC FUNC: {func} - C√≥")
                else:
                    self.qc_results.append(f"‚ùå QC FUNC: {func} - THI·∫æU")
                    
        except Exception as e:
            self.qc_results.append(f"‚ùå QC FUNC: Error - {e}")
            self.critical_issues.append(f"Function verification error: {e}")
            
    def verify_data_integrity(self):
        """Ki·ªÉm tra t√≠nh to√†n v·∫πn d·ªØ li·ªáu"""
        logger.info("üéØ Verifying data integrity...")
        
        # Ki·ªÉm tra JSON files
        json_files = [
            f"{self.base_path}/data/dass21_vi.json",
            f"{self.base_path}/data/phq9_vi.json"
        ]
        
        for json_file in json_files:
            if os.path.exists(json_file):
                try:
                    with open(json_file, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        
                    # Ki·ªÉm tra structure cho DASS-21
                    if "dass21" in json_file:
                        required_keys = ['questions', 'scoring']
                        for key in required_keys:
                            if key in data:
                                self.qc_results.append(f"‚úÖ QC DATA: DASS-21 {key} - OK")
                            else:
                                self.qc_results.append(f"‚ùå QC DATA: DASS-21 {key} - THI·∫æU")
                                
                        # Ki·ªÉm tra s·ªë c√¢u h·ªèi
                        if 'questions' in data:
                            question_count = len(data['questions'])
                            if question_count == 21:
                                self.qc_results.append(f"‚úÖ QC DATA: DASS-21 c√≥ ƒë·ªß 21 c√¢u")
                            else:
                                self.qc_results.append(f"‚ùå QC DATA: DASS-21 c√≥ {question_count} c√¢u (kh√¥ng ƒë√∫ng)")
                                
                    self.qc_results.append(f"‚úÖ QC DATA: {os.path.basename(json_file)} - Valid JSON")
                    
                except json.JSONDecodeError as e:
                    self.qc_results.append(f"‚ùå QC DATA: {os.path.basename(json_file)} - Invalid JSON")
                    self.critical_issues.append(f"Invalid JSON: {json_file}")
                    
            else:
                self.qc_results.append(f"‚ùå QC DATA: {os.path.basename(json_file)} - THI·∫æU")
                
    def verify_security_compliance(self):
        """Ki·ªÉm tra tu√¢n th·ªß b·∫£o m·∫≠t"""
        logger.info("üéØ Verifying security compliance...")
        
        try:
            with open(self.app_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # Critical security checks
            security_violations = [
                ("hardcoded password", ["password =", "pwd =", "passwd ="]),
                ("hardcoded API key", ["api_key =", "apikey =", "key ="]),
                ("SQL injection risk", ["sql =", "SELECT ", "UPDATE ", "DELETE "]),
                ("unsafe eval", ["eval(", "exec("]),
                ("unsafe file ops", ["open(", "file("])
            ]
            
            for violation_name, patterns in security_violations:
                found_violation = False
                for pattern in patterns:
                    if pattern.lower() in content.lower():
                        if violation_name == "unsafe file ops" and "with open" in content:
                            continue  # "with open" is safe
                        found_violation = True
                        break
                        
                if found_violation:
                    self.qc_results.append(f"‚ùå QC SEC: {violation_name} - PH√ÅT HI·ªÜN")
                    self.critical_issues.append(f"Security violation: {violation_name}")
                else:
                    self.qc_results.append(f"‚úÖ QC SEC: {violation_name} - OK")
                    
            # Check for security best practices
            security_practices = [
                ("input validation", "validate"),
                ("error handling", "try:" and "except"),
                ("logging", "logger"),
                ("secure file handling", "with open")
            ]
            
            for practice_name, keyword in security_practices:
                if keyword in content:
                    self.qc_results.append(f"‚úÖ QC SEC: {practice_name} - C√≥")
                else:
                    self.qc_results.append(f"‚ö†Ô∏è QC SEC: {practice_name} - N√™n c√≥")
                    
        except Exception as e:
            self.qc_results.append(f"‚ùå QC SEC: Error checking security - {e}")
            
    def verify_performance_standards(self):
        """Ki·ªÉm tra ti√™u chu·∫©n hi·ªáu su·∫•t"""
        logger.info("üéØ Verifying performance standards...")
        
        try:
            # File size check
            file_size = os.path.getsize(self.app_file)
            size_mb = file_size / (1024 * 1024)
            
            if size_mb < 1:  # < 1MB
                self.qc_results.append(f"‚úÖ QC PERF: File size OK ({size_mb:.2f}MB)")
            elif size_mb < 5:  # < 5MB
                self.qc_results.append(f"‚ö†Ô∏è QC PERF: File size l·ªõn ({size_mb:.2f}MB)")
            else:
                self.qc_results.append(f"‚ùå QC PERF: File size qu√° l·ªõn ({size_mb:.2f}MB)")
                self.critical_issues.append(f"File too large: {size_mb:.2f}MB")
                
            # Code complexity check
            with open(self.app_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                
            total_lines = len(lines)
            code_lines = len([line for line in lines if line.strip() and not line.strip().startswith('#')])
            
            if total_lines < 500:
                self.qc_results.append(f"‚úÖ QC PERF: Line count OK ({total_lines})")
            elif total_lines < 1000:
                self.qc_results.append(f"‚ö†Ô∏è QC PERF: Line count cao ({total_lines})")
            else:
                self.qc_results.append(f"‚ùå QC PERF: Line count qu√° cao ({total_lines})")
                
            # Import efficiency
            import_lines = [line for line in lines if line.strip().startswith(('import ', 'from '))]
            if len(import_lines) < 20:
                self.qc_results.append(f"‚úÖ QC PERF: Import count OK ({len(import_lines)})")
            else:
                self.qc_results.append(f"‚ö†Ô∏è QC PERF: Qu√° nhi·ªÅu imports ({len(import_lines)})")
                
        except Exception as e:
            self.qc_results.append(f"‚ùå QC PERF: Error checking performance - {e}")
            
    def verify_user_experience_standards(self):
        """Ki·ªÉm tra ti√™u chu·∫©n user experience"""
        logger.info("üéØ Verifying UX standards...")
        
        try:
            with open(self.app_file, 'r', encoding='utf-8') as f:
                content = f.read()
                
            # UX requirements
            ux_requirements = [
                ("Page title", "page_title"),
                ("Page icon", "page_icon"),
                ("Layout config", "layout="),
                ("Loading indicators", "spinner" in content.lower() or "progress" in content.lower()),
                ("Error messages", "error" in content.lower() or "warning" in content.lower()),
                ("Success feedback", "success" in content.lower()),
                ("Help text", "help=" in content or "help_" in content)
            ]
            
            for req_name, condition in ux_requirements:
                if isinstance(condition, str) and condition in content:
                    self.qc_results.append(f"‚úÖ QC UX: {req_name} - C√≥")
                elif isinstance(condition, bool) and condition:
                    self.qc_results.append(f"‚úÖ QC UX: {req_name} - C√≥")
                else:
                    self.qc_results.append(f"‚ùå QC UX: {req_name} - THI·∫æU")
                    
            # Accessibility check
            accessibility_features = [
                ("Alt text", "alt="),
                ("Labels", "label="),
                ("Keyboard navigation", "key=" in content or "shortcut" in content)
            ]
            
            for feature_name, keyword in accessibility_features:
                if keyword in content:
                    self.qc_results.append(f"‚úÖ QC A11Y: {feature_name} - C√≥")
                else:
                    self.qc_results.append(f"‚ö†Ô∏è QC A11Y: {feature_name} - N√™n c√≥")
                    
        except Exception as e:
            self.qc_results.append(f"‚ùå QC UX: Error checking UX - {e}")
            
    def generate_final_report(self):
        """T·∫°o b√°o c√°o cu·ªëi c√πng"""
        logger.info("üéØ Generating final QC report...")
        
        # Th·ªëng k√™
        total = len(self.qc_results)
        passed = len([r for r in self.qc_results if r.startswith("‚úÖ")])
        warnings = len([r for r in self.qc_results if r.startswith("‚ö†Ô∏è")])
        failed = len([r for r in self.qc_results if r.startswith("‚ùå")])
        critical_count = len(self.critical_issues)
        
        # ƒê√°nh gi√° t·ªïng th·ªÉ
        if critical_count == 0 and failed == 0:
            status = "üü¢ READY FOR DEPLOYMENT"
            recommendation = "·ª®ng d·ª•ng s·∫µn s√†ng ƒë·ªÉ deploy!"
        elif critical_count == 0 and failed <= 3:
            status = "üü° DEPLOY WITH CAUTION"
            recommendation = "C√≥ th·ªÉ deploy nh∆∞ng n√™n s·ª≠a c√°c v·∫•n ƒë·ªÅ nh·ªè"
        elif critical_count <= 2:
            status = "üü† NEEDS FIXES"
            recommendation = "C·∫ßn s·ª≠a c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng tr∆∞·ªõc khi deploy"
        else:
            status = "üî¥ DO NOT DEPLOY"
            recommendation = "KH√îNG deploy - c√≥ v·∫•n ƒë·ªÅ nghi√™m tr·ªçng"
            
        return {
            'status': status,
            'recommendation': recommendation,
            'total_checks': total,
            'passed': passed,
            'warnings': warnings,
            'failed': failed,
            'critical_issues': critical_count,
            'success_rate': (passed / total) * 100 if total > 0 else 0
        }
        
    def run_quality_control(self):
        """Ch·∫°y to√†n b·ªô quality control"""
        logger.info("üéØ Running complete quality control...")
        
        print("\nüéØ SOULFRIEND QUALITY CONTROL")
        print("=" * 40)
        
        # Ch·∫°y t·∫•t c·∫£ ki·ªÉm tra
        self.verify_deployment_readiness()
        self.verify_app_functionality()
        self.verify_data_integrity()
        self.verify_security_compliance()
        self.verify_performance_standards()
        self.verify_user_experience_standards()
        
        # In k·∫øt qu·∫£
        print("\nüéØ QC RESULTS:")
        print("-" * 15)
        for result in self.qc_results:
            print(result)
            
        # Critical issues
        if self.critical_issues:
            print(f"\nüö® CRITICAL ISSUES ({len(self.critical_issues)}):")
            print("-" * 25)
            for issue in self.critical_issues:
                print(f"‚ùå {issue}")
                
        # B√°o c√°o cu·ªëi
        report = self.generate_final_report()
        
        print(f"\nüìä FINAL QC REPORT:")
        print("=" * 20)
        print(f"Status: {report['status']}")
        print(f"Total checks: {report['total_checks']}")
        print(f"‚úÖ Passed: {report['passed']}")
        print(f"‚ö†Ô∏è Warnings: {report['warnings']}")
        print(f"‚ùå Failed: {report['failed']}")
        print(f"üö® Critical: {report['critical_issues']}")
        print(f"üìà Success rate: {report['success_rate']:.1f}%")
        print(f"\nüí° Recommendation: {report['recommendation']}")
        
        return report

def main():
    """Main function"""
    qc = SOULFRIENDQualityControl()
    report = qc.run_quality_control()
    
    # Save report
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    report_file = f"/workspaces/Mentalhealth/tests/QC_REPORT_{timestamp}.json"
    
    with open(report_file, 'w', encoding='utf-8') as f:
        json.dump(report, f, ensure_ascii=False, indent=2)
        
    print(f"\nüíæ QC Report saved: {report_file}")
    
    return report

if __name__ == "__main__":
    main()
