#!/usr/bin/env python3
"""
CONTROLLED ROADMAP EXECUTION - SOULFRIEND V2.0
Th·ª±c hi·ªán roadmap v·ªõi ki·ªÉm so√°t ch·∫∑t ch·∫Ω v√† ƒë·∫£m b·∫£o t√≠nh logic h·ªá th·ªëng
"""

import os
import sys
import json
import time
from datetime import datetime
from typing import Dict, List, Any, Tuple

class ControlledExecutionSystem:
    """H·ªá th·ªëng th·ª±c hi·ªán roadmap c√≥ ki·ªÉm so√°t ch·∫∑t ch·∫Ω"""
    
    def __init__(self):
        self.workspace = os.getcwd()
        self.execution_log = []
        self.status = {
            "phase": "ANALYSIS_AND_PLANNING",
            "start_time": datetime.now().isoformat(),
            "tasks_completed": 0,
            "critical_issues": [],
            "system_integrity": "CHECKING"
        }
    
    def log_action(self, action: str, status: str, details: str = ""):
        """Ghi log t·∫•t c·∫£ h√†nh ƒë·ªông"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "action": action,
            "status": status,
            "details": details
        }
        self.execution_log.append(log_entry)
        print(f"üìù {action}: {status}")
        if details:
            print(f"   {details}")
    
    def check_system_integrity(self) -> Dict[str, Any]:
        """Ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa h·ªá th·ªëng"""
        print("üîç CHECKING SYSTEM INTEGRITY")
        print("=" * 35)
        
        integrity_report = {
            "core_files": {},
            "data_files": {},
            "dependencies": {},
            "critical_issues": [],
            "overall_status": "UNKNOWN"
        }
        
        # 1. Ki·ªÉm tra core application files
        core_files = [
            "SOULFRIEND.py",
            "components/ui.py",
            "components/scoring.py",
            "components/questionnaires.py",
            "components/logger.py"
        ]
        
        print("üìÅ Core Application Files:")
        for file_path in core_files:
            exists = os.path.exists(file_path)
            integrity_report["core_files"][file_path] = exists
            status_icon = "‚úÖ" if exists else "‚ùå"
            print(f"   {status_icon} {file_path}")
            
            if not exists:
                integrity_report["critical_issues"].append(f"Missing core file: {file_path}")
        
        # 2. Ki·ªÉm tra data files
        data_files = [
            "data/phq9_vi.json",
            "data/dass21_vi.json", 
            "data/gad7_vi.json",
            "data/epds_enhanced_vi.json",
            "data/pss10_enhanced_vi.json"
        ]
        
        print("\nüìä Data Files:")
        for file_path in data_files:
            exists = os.path.exists(file_path)
            integrity_report["data_files"][file_path] = exists
            status_icon = "‚úÖ" if exists else "‚ùå"
            print(f"   {status_icon} {file_path}")
            
            if not exists:
                integrity_report["critical_issues"].append(f"Missing data file: {file_path}")
        
        # 3. Ki·ªÉm tra admin system
        admin_files = [
            "components/admin_auth.py",
            "pages/admin_panel.py"
        ]
        
        print("\nüîê Admin System:")
        for file_path in admin_files:
            exists = os.path.exists(file_path)
            status_icon = "‚úÖ" if exists else "‚ùå"
            print(f"   {status_icon} {file_path}")
        
        # 4. ƒê√°nh gi√° t·ªïng th·ªÉ
        critical_count = len(integrity_report["critical_issues"])
        if critical_count == 0:
            integrity_report["overall_status"] = "HEALTHY"
        elif critical_count <= 3:
            integrity_report["overall_status"] = "NEEDS_FIXES"
        else:
            integrity_report["overall_status"] = "CRITICAL_ISSUES"
        
        print(f"\nüéØ Overall Status: {integrity_report['overall_status']}")
        print(f"üö® Critical Issues: {critical_count}")
        
        self.log_action("SYSTEM_INTEGRITY_CHECK", integrity_report["overall_status"], f"{critical_count} critical issues found")
        
        return integrity_report
    
    def analyze_current_roadmap_status(self) -> Dict[str, Any]:
        """Ph√¢n t√≠ch tr·∫°ng th√°i roadmap hi·ªán t·∫°i"""
        print("\nüìã ANALYZING ROADMAP STATUS")
        print("=" * 32)
        
        roadmap_analysis = {
            "current_completion": {},
            "missing_components": [],
            "next_priorities": [],
            "estimated_effort": {}
        }
        
        # Ph√¢n t√≠ch completion status
        completion_categories = {
            "Core Questionnaires": {"phq9": True, "gad7": True, "dass21": True, "epds": True, "pss10": True},
            "Scoring System": {"enhanced_scoring": True, "result_display": True},
            "UI Framework": {"streamlit_base": True, "navigation": False, "responsive": False},
            "Admin System": {"authentication": True, "panel": True, "management": False},
            "Data Management": {"storage": False, "export": False, "backup": False},
            "Testing": {"unit_tests": False, "integration": False, "user_acceptance": False}
        }
        
        for category, components in completion_categories.items():
            completed = sum(1 for status in components.values() if status)
            total = len(components)
            percentage = (completed / total) * 100
            roadmap_analysis["current_completion"][category] = {
                "completed": completed,
                "total": total,
                "percentage": percentage
            }
            print(f"üìä {category}: {completed}/{total} ({percentage:.0f}%)")
            
            # Identify missing components
            for component, status in components.items():
                if not status:
                    roadmap_analysis["missing_components"].append(f"{category}: {component}")
        
        # Determine next priorities
        roadmap_analysis["next_priorities"] = [
            {"task": "Complete UI Navigation", "priority": "HIGH", "effort": "2-4 hours"},
            {"task": "Implement Data Export", "priority": "HIGH", "effort": "4-6 hours"},
            {"task": "Add Unit Testing", "priority": "MEDIUM", "effort": "6-8 hours"},
            {"task": "Mobile Optimization", "priority": "MEDIUM", "effort": "8-12 hours"},
            {"task": "Performance Tuning", "priority": "LOW", "effort": "4-6 hours"}
        ]
        
        print(f"\nüéØ Next Priorities ({len(roadmap_analysis['next_priorities'])} tasks):")
        for i, task in enumerate(roadmap_analysis["next_priorities"], 1):
            print(f"   {i}. [{task['priority']}] {task['task']} - {task['effort']}")
        
        self.log_action("ROADMAP_ANALYSIS", "COMPLETED", f"{len(roadmap_analysis['missing_components'])} missing components identified")
        
        return roadmap_analysis
    
    def create_execution_plan(self, integrity_report: Dict, roadmap_analysis: Dict) -> Dict[str, Any]:
        """T·∫°o k·∫ø ho·∫°ch th·ª±c hi·ªán c√≥ ki·ªÉm so√°t"""
        print("\nüéØ CREATING CONTROLLED EXECUTION PLAN")
        print("=" * 42)
        
        execution_plan = {
            "phases": [],
            "risk_mitigation": [],
            "quality_gates": [],
            "rollback_procedures": []
        }
        
        # Phase 1: Critical Fixes (if needed)
        if integrity_report["overall_status"] != "HEALTHY":
            execution_plan["phases"].append({
                "phase": "CRITICAL_FIXES",
                "description": "Fix critical system issues",
                "tasks": integrity_report["critical_issues"],
                "estimated_time": "2-4 hours",
                "blocking": True
            })
        
        # Phase 2: High Priority Improvements
        high_priority_tasks = [task for task in roadmap_analysis["next_priorities"] if task["priority"] == "HIGH"]
        if high_priority_tasks:
            execution_plan["phases"].append({
                "phase": "HIGH_PRIORITY_IMPROVEMENTS",
                "description": "Implement high priority features",
                "tasks": [task["task"] for task in high_priority_tasks],
                "estimated_time": "8-12 hours",
                "blocking": False
            })
        
        # Phase 3: System Enhancement
        medium_priority_tasks = [task for task in roadmap_analysis["next_priorities"] if task["priority"] == "MEDIUM"]
        if medium_priority_tasks:
            execution_plan["phases"].append({
                "phase": "SYSTEM_ENHANCEMENT", 
                "description": "Enhance system capabilities",
                "tasks": [task["task"] for task in medium_priority_tasks],
                "estimated_time": "12-20 hours",
                "blocking": False
            })
        
        # Risk mitigation strategies
        execution_plan["risk_mitigation"] = [
            "Create backup before each phase",
            "Implement incremental changes",
            "Test after each task completion",
            "Maintain rollback capability",
            "Monitor system performance"
        ]
        
        # Quality gates
        execution_plan["quality_gates"] = [
            "All existing functionality must work",
            "No new critical errors introduced", 
            "Performance must not degrade",
            "User experience must improve or maintain",
            "Code quality standards maintained"
        ]
        
        print(f"üìä Execution Plan Created:")
        print(f"   üìà Phases: {len(execution_plan['phases'])}")
        print(f"   üõ°Ô∏è Risk Mitigations: {len(execution_plan['risk_mitigation'])}")
        print(f"   üö™ Quality Gates: {len(execution_plan['quality_gates'])}")
        
        for i, phase in enumerate(execution_plan["phases"], 1):
            print(f"\n   Phase {i}: {phase['phase']}")
            print(f"   ‚è±Ô∏è Time: {phase['estimated_time']}")
            print(f"   üìã Tasks: {len(phase['tasks'])}")
            if phase["blocking"]:
                print(f"   üö´ BLOCKING PHASE - Must complete before continuing")
        
        self.log_action("EXECUTION_PLAN", "CREATED", f"{len(execution_plan['phases'])} phases planned")
        
        return execution_plan
    
    def execute_controlled_development(self):
        """Th·ª±c hi·ªán development c√≥ ki·ªÉm so√°t ch·∫∑t ch·∫Ω"""
        print("üöÄ STARTING CONTROLLED DEVELOPMENT EXECUTION")
        print("=" * 50)
        print(f"‚è∞ Start Time: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        try:
            # Step 1: System integrity check
            integrity_report = self.check_system_integrity()
            
            # Step 2: Roadmap analysis
            roadmap_analysis = self.analyze_current_roadmap_status()
            
            # Step 3: Create execution plan
            execution_plan = self.create_execution_plan(integrity_report, roadmap_analysis)
            
            # Step 4: Execute first phase if safe
            if integrity_report["overall_status"] == "HEALTHY":
                print("\n‚úÖ SYSTEM HEALTHY - READY FOR DEVELOPMENT")
                print("üîß Next recommended action: Implement high priority improvements")
                self.status["system_integrity"] = "HEALTHY"
                self.status["phase"] = "READY_FOR_DEVELOPMENT"
            elif integrity_report["overall_status"] == "NEEDS_FIXES":
                print("\n‚ö†Ô∏è SYSTEM NEEDS FIXES - ADDRESSING CRITICAL ISSUES")
                print("üîß Next recommended action: Fix critical issues first")
                self.status["system_integrity"] = "NEEDS_FIXES"
                self.status["phase"] = "FIXING_CRITICAL_ISSUES"
            else:
                print("\nüö® CRITICAL SYSTEM ISSUES - DEVELOPMENT BLOCKED")
                print("üîß Next recommended action: Fix all critical issues before proceeding")
                self.status["system_integrity"] = "CRITICAL_ISSUES"
                self.status["phase"] = "BLOCKED"
            
            # Generate summary report
            self.generate_summary_report(integrity_report, roadmap_analysis, execution_plan)
            
        except Exception as e:
            self.log_action("EXECUTION_ERROR", "FAILED", str(e))
            print(f"‚ùå Execution Error: {e}")
            self.status["system_integrity"] = "ERROR"
            self.status["phase"] = "ERROR_STATE"
    
    def generate_summary_report(self, integrity_report: Dict, roadmap_analysis: Dict, execution_plan: Dict):
        """T·∫°o b√°o c√°o t·ªïng k·∫øt"""
        print("\nüìä EXECUTION SUMMARY REPORT")
        print("=" * 32)
        
        # System Status
        print("üîç SYSTEM STATUS:")
        print(f"   Integrity: {integrity_report['overall_status']}")
        print(f"   Critical Issues: {len(integrity_report['critical_issues'])}")
        print(f"   Core Files: {sum(1 for exists in integrity_report['core_files'].values() if exists)}/{len(integrity_report['core_files'])}")
        print(f"   Data Files: {sum(1 for exists in integrity_report['data_files'].values() if exists)}/{len(integrity_report['data_files'])}")
        
        # Roadmap Progress
        print("\nüìà ROADMAP PROGRESS:")
        for category, status in roadmap_analysis["current_completion"].items():
            print(f"   {category}: {status['percentage']:.0f}%")
        
        # Next Actions
        print("\nüéØ NEXT ACTIONS:")
        if execution_plan["phases"]:
            next_phase = execution_plan["phases"][0]
            print(f"   Phase: {next_phase['phase']}")
            print(f"   Time: {next_phase['estimated_time']}")
            print(f"   Tasks: {len(next_phase['tasks'])}")
        
        # Recommendations
        print("\nüí° RECOMMENDATIONS:")
        if self.status["system_integrity"] == "HEALTHY":
            print("   ‚úÖ System ready for development")
            print("   üöÄ Proceed with high priority improvements")
            print("   üìä Monitor performance during development")
        elif self.status["system_integrity"] == "NEEDS_FIXES":
            print("   üîß Fix critical issues first")
            print("   ‚ö†Ô∏è Test thoroughly after fixes")
            print("   üìã Re-run integrity check")
        else:
            print("   üö® Address all critical issues immediately")
            print("   üîí Do not proceed with new development")
            print("   üõ†Ô∏è Focus on system stability")
        
        # Save report
        report_data = {
            "timestamp": datetime.now().isoformat(),
            "status": self.status,
            "integrity_report": integrity_report,
            "roadmap_analysis": roadmap_analysis,
            "execution_plan": execution_plan,
            "execution_log": self.execution_log
        }
        
        with open("controlled_execution_report.json", "w", encoding="utf-8") as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Report saved: controlled_execution_report.json")
        print(f"üìù Total actions logged: {len(self.execution_log)}")
        print(f"‚è±Ô∏è Execution time: {datetime.now().isoformat()}")

def main():
    """Main execution function"""
    print("üéØ CONTROLLED ROADMAP EXECUTION - SOULFRIEND V2.0")
    print("=" * 55)
    print("üõ°Ô∏è Ensuring system logic integrity with strict process control")
    print()
    
    execution_system = ControlledExecutionSystem()
    execution_system.execute_controlled_development()
    
    print("\nüéâ CONTROLLED EXECUTION COMPLETED")
    print(f"üìä System Status: {execution_system.status['system_integrity']}")
    print(f"üö¶ Phase: {execution_system.status['phase']}")
    print("‚úÖ Process controlled and documented")

if __name__ == "__main__":
    main()
