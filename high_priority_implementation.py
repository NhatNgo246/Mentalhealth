#!/usr/bin/env python3
"""
HIGH PRIORITY IMPROVEMENTS IMPLEMENTATION
Th·ª±c hi·ªán c√°c c·∫£i ti·∫øn ∆∞u ti√™n cao v·ªõi ki·ªÉm so√°t ch·∫∑t ch·∫Ω
"""

import os
import json
import time
from datetime import datetime
from typing import Dict, List, Any

class HighPriorityImplementation:
    """Tri·ªÉn khai c·∫£i ti·∫øn ∆∞u ti√™n cao"""
    
    def __init__(self):
        self.workspace = os.getcwd()
        self.implementation_log = []
        
    def log_implementation(self, task: str, status: str, details: str = ""):
        """Ghi log qu√° tr√¨nh tri·ªÉn khai"""
        log_entry = {
            "timestamp": datetime.now().isoformat(),
            "task": task,
            "status": status,
            "details": details
        }
        self.implementation_log.append(log_entry)
        print(f"üîß {task}: {status}")
        if details:
            print(f"   üìù {details}")
    
    def implement_ui_navigation_improvements(self) -> bool:
        """C·∫£i thi·ªán UI Navigation"""
        print("üé® IMPLEMENTING UI NAVIGATION IMPROVEMENTS")
        print("=" * 45)
        
        try:
            # 1. Check current navigation status
            main_app_path = "SOULFRIEND.py"
            if not os.path.exists(main_app_path):
                self.log_implementation("UI_NAVIGATION", "FAILED", f"Main app file not found: {main_app_path}")
                return False
            
            # 2. Create enhanced navigation component
            enhanced_nav_code = '''def create_enhanced_navigation():
    """Create enhanced navigation with better UX"""
    import streamlit as st
    
    st.markdown("""
    <style>
    .nav-container {
        background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%);
        padding: 1rem;
        margin-bottom: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .nav-title {
        color: white;
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }
    .nav-subtitle {
        color: #e0e6ed;
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }
    .nav-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
    }
    .nav-button {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 20px;
        text-decoration: none;
        transition: all 0.3s ease;
    }
    .nav-button:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: translateY(-2px);
    }
    .status-indicator {
        display: inline-block;
        width: 8px;
        height: 8px;
        border-radius: 50%;
        margin-right: 0.5rem;
    }
    .status-ready { background-color: #4CAF50; }
    .status-progress { background-color: #FF9800; }
    .status-disabled { background-color: #757575; }
    </style>
    """, unsafe_allow_html=True)
    
    # Navigation container
    st.markdown("""
    <div class="nav-container">
        <div class="nav-title">üß† SOULFRIEND V2.0</div>
        <div class="nav-subtitle">H·ªá th·ªëng ƒë√°nh gi√° s·ª©c kh·ªèe t√¢m th·∫ßn to√†n di·ªán</div>
    </div>
    """, unsafe_allow_html=True)
    
    # Status display
    if 'enhanced_scores' in st.session_state and st.session_state.enhanced_scores:
        st.success("‚úÖ ƒê√°nh gi√° ƒë√£ ho√†n th√†nh - Xem k·∫øt qu·∫£ chi ti·∫øt")
    
    # Enhanced navigation buttons
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        if st.button("üìã ƒê·ªìng √Ω tham gia", use_container_width=True):
            st.switch_page("pages/0_Consent.py")
    
    with col2:
        disabled = 'consent_given' not in st.session_state or not st.session_state.consent_given
        if st.button("üîç B·∫Øt ƒë·∫ßu ƒë√°nh gi√°", disabled=disabled, use_container_width=True):
            st.switch_page("pages/1_Assessment.py")
    
    with col3:
        disabled = 'enhanced_scores' not in st.session_state or not st.session_state.enhanced_scores
        if st.button("üìä Xem k·∫øt qu·∫£", disabled=disabled, use_container_width=True):
            st.switch_page("pages/2_Results.py")
    
    with col4:
        if st.button("üìö T√†i nguy√™n", use_container_width=True):
            st.switch_page("pages/3_Resources.py")
    
    with col5:
        if st.button("üí¨ H·ªó tr·ª£ AI", use_container_width=True):
            st.switch_page("pages/5_Chatbot.py")
    
    # Progress indicator
    if 'assessment_progress' in st.session_state:
        progress = st.session_state.assessment_progress
        st.progress(progress, text=f"Ti·∫øn ƒë·ªô ƒë√°nh gi√°: {int(progress * 100)}%")
'''
            
            # 3. Add enhanced navigation to components
            nav_component_path = "components/enhanced_navigation.py"
            with open(nav_component_path, 'w', encoding='utf-8') as f:
                f.write(enhanced_nav_code)
            
            self.log_implementation("UI_NAVIGATION", "COMPLETED", "Enhanced navigation component created")
            
            # 4. Create responsive design improvements
            responsive_css = '''def apply_responsive_design():
    """Apply responsive design for better mobile experience"""
    import streamlit as st
    
    st.markdown("""
    <style>
    /* Mobile responsive design */
    @media (max-width: 768px) {
        .stColumns > div {
            margin-bottom: 1rem;
        }
        .nav-buttons {
            flex-direction: column;
        }
        .nav-button {
            width: 100%;
            text-align: center;
            margin-bottom: 0.5rem;
        }
        .stButton > button {
            width: 100%;
            padding: 0.75rem;
            font-size: 1rem;
        }
    }
    
    /* Improved button styling */
    .stButton > button {
        border-radius: 20px;
        border: none;
        background: linear-gradient(45deg, #2196F3, #21CBF3);
        color: white;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.2);
    }
    
    .stButton > button:disabled {
        background: #cccccc;
        color: #666666;
        transform: none;
        box-shadow: none;
    }
    
    /* Progress indicator styling */
    .stProgress > div > div > div {
        background: linear-gradient(90deg, #4CAF50, #8BC34A);
        border-radius: 10px;
    }
    
    /* Success/Error message styling */
    .stSuccess {
        border-radius: 10px;
        border-left: 5px solid #4CAF50;
    }
    
    .stError {
        border-radius: 10px;
        border-left: 5px solid #f44336;
    }
    
    .stWarning {
        border-radius: 10px;
        border-left: 5px solid #ff9800;
    }
    
    /* Card-like containers */
    .assessment-card {
        background: white;
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
    }
    
    .result-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        border-radius: 15px;
        padding: 1.5rem;
        margin: 1rem 0;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    </style>
    """, unsafe_allow_html=True)
'''
            
            # Save responsive design component
            responsive_path = "components/responsive_design.py"
            with open(responsive_path, 'w', encoding='utf-8') as f:
                f.write(responsive_css)
            
            self.log_implementation("RESPONSIVE_DESIGN", "COMPLETED", "Responsive design component created")
            
            return True
            
        except Exception as e:
            self.log_implementation("UI_NAVIGATION", "FAILED", str(e))
            return False
    
    def implement_data_export_system(self) -> bool:
        """Tri·ªÉn khai h·ªá th·ªëng xu·∫•t d·ªØ li·ªáu"""
        print("\nüíæ IMPLEMENTING DATA EXPORT SYSTEM")
        print("=" * 40)
        
        try:
            # 1. Create PDF export functionality
            pdf_export_code = '''import io
import json
from datetime import datetime
from typing import Dict, Any
import streamlit as st

try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib import colors
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

class DataExportSystem:
    """H·ªá th·ªëng xu·∫•t d·ªØ li·ªáu ƒë√°nh gi√°"""
    
    def __init__(self):
        self.styles = getSampleStyleSheet() if REPORTLAB_AVAILABLE else None
    
    def create_assessment_pdf(self, assessment_data: Dict[str, Any]) -> bytes:
        """T·∫°o PDF b√°o c√°o ƒë√°nh gi√°"""
        if not REPORTLAB_AVAILABLE:
            raise ImportError("ReportLab not available. Install with: pip install reportlab")
        
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72,
                               topMargin=72, bottomMargin=18)
        
        # Prepare content
        story = []
        
        # Title
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            alignment=1,  # Center
            textColor=colors.darkblue
        )
        story.append(Paragraph("B√ÅO C√ÅO ƒê√ÅNH GI√Å S·ª®C KH·ªéE T√ÇM TH·∫¶N", title_style))
        story.append(Spacer(1, 12))
        
        # Header info
        header_data = [
            ['Ng√†y ƒë√°nh gi√°:', assessment_data.get('date', datetime.now().strftime('%d/%m/%Y'))],
            ['Th·ªùi gian:', assessment_data.get('time', datetime.now().strftime('%H:%M'))],
            ['H·ªá th·ªëng:', 'SOULFRIEND V2.0'],
            ['Phi√™n b·∫£n:', '2.0.0']
        ]
        
        header_table = Table(header_data, colWidths=[2*inch, 4*inch])
        header_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(header_table)
        story.append(Spacer(1, 20))
        
        # Assessment results
        if 'results' in assessment_data:
            story.append(Paragraph("K·∫æT QU·∫¢ ƒê√ÅNH GI√Å", self.styles['Heading2']))
            story.append(Spacer(1, 12))
            
            for assessment_name, result in assessment_data['results'].items():
                # Assessment title
                story.append(Paragraph(f"{assessment_name}", self.styles['Heading3']))
                
                # Score and severity
                result_data = [
                    ['ƒêi·ªÉm s·ªë:', f"{result.get('score', 'N/A')}/{result.get('max_score', 'N/A')}"],
                    ['M·ª©c ƒë·ªô:', result.get('severity', 'N/A')],
                    ['ƒê√°nh gi√°:', result.get('interpretation', 'N/A')]
                ]
                
                result_table = Table(result_data, colWidths=[1.5*inch, 4.5*inch])
                result_table.setStyle(TableStyle([
                    ('BACKGROUND', (0, 0), (0, -1), colors.lightblue),
                    ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
                    ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                    ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                    ('FONTSIZE', (0, 0), (-1, -1), 9),
                    ('GRID', (0, 0), (-1, -1), 1, colors.black)
                ]))
                story.append(result_table)
                story.append(Spacer(1, 15))
        
        # Recommendations
        if 'recommendations' in assessment_data:
            story.append(Paragraph("KHUY·∫æN NGH·ªä", self.styles['Heading2']))
            story.append(Spacer(1, 12))
            
            for rec in assessment_data['recommendations']:
                story.append(Paragraph(f"‚Ä¢ {rec}", self.styles['Normal']))
                story.append(Spacer(1, 6))
        
        # Footer
        story.append(Spacer(1, 30))
        footer_text = """
        <para align="center">
        <b>L∆∞u √Ω quan tr·ªçng:</b><br/>
        K·∫øt qu·∫£ n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o v√† kh√¥ng thay th·∫ø cho vi·ªác kh√°m v√† t∆∞ v·∫•n c·ªßa chuy√™n gia y t·∫ø.
        N·∫øu b·∫°n c√≥ c√°c tri·ªáu ch·ª©ng nghi√™m tr·ªçng, h√£y li√™n h·ªá v·ªõi b√°c sƒ© ho·∫∑c chuy√™n gia t√¢m l√Ω.
        </para>
        """
        story.append(Paragraph(footer_text, self.styles['Normal']))
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer.getvalue()
    
    def create_json_export(self, assessment_data: Dict[str, Any]) -> str:
        """T·∫°o JSON export"""
        export_data = {
            "export_info": {
                "timestamp": datetime.now().isoformat(),
                "system": "SOULFRIEND V2.0",
                "version": "2.0.0"
            },
            "assessment_data": assessment_data
        }
        return json.dumps(export_data, indent=2, ensure_ascii=False)
    
    def create_csv_export(self, assessment_data: Dict[str, Any]) -> str:
        """T·∫°o CSV export"""
        import csv
        import io
        
        output = io.StringIO()
        writer = csv.writer(output)
        
        # Header
        writer.writerow(['Assessment', 'Score', 'Max_Score', 'Severity', 'Date', 'Time'])
        
        # Data
        if 'results' in assessment_data:
            for assessment_name, result in assessment_data['results'].items():
                writer.writerow([
                    assessment_name,
                    result.get('score', ''),
                    result.get('max_score', ''),
                    result.get('severity', ''),
                    assessment_data.get('date', ''),
                    assessment_data.get('time', '')
                ])
        
        return output.getvalue()

# Streamlit interface functions
def display_export_options():
    """Hi·ªÉn th·ªã c√°c t√πy ch·ªçn xu·∫•t d·ªØ li·ªáu"""
    if 'enhanced_scores' not in st.session_state or not st.session_state.enhanced_scores:
        st.warning("Vui l√≤ng ho√†n th√†nh ƒë√°nh gi√° tr∆∞·ªõc khi xu·∫•t k·∫øt qu·∫£.")
        return
    
    st.subheader("üì• Xu·∫•t k·∫øt qu·∫£ ƒë√°nh gi√°")
    
    export_system = DataExportSystem()
    
    # Prepare assessment data
    assessment_data = prepare_assessment_data()
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìÑ Xu·∫•t PDF", use_container_width=True):
            try:
                if REPORTLAB_AVAILABLE:
                    pdf_data = export_system.create_assessment_pdf(assessment_data)
                    st.download_button(
                        label="üíæ T·∫£i PDF",
                        data=pdf_data,
                        file_name=f"assessment_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                        mime="application/pdf"
                    )
                else:
                    st.error("PDF export not available. Please install reportlab: pip install reportlab")
            except Exception as e:
                st.error(f"Error creating PDF: {e}")
    
    with col2:
        if st.button("üìä Xu·∫•t JSON", use_container_width=True):
            try:
                json_data = export_system.create_json_export(assessment_data)
                st.download_button(
                    label="üíæ T·∫£i JSON",
                    data=json_data,
                    file_name=f"assessment_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                    mime="application/json"
                )
            except Exception as e:
                st.error(f"Error creating JSON: {e}")
    
    with col3:
        if st.button("üìà Xu·∫•t CSV", use_container_width=True):
            try:
                csv_data = export_system.create_csv_export(assessment_data)
                st.download_button(
                    label="üíæ T·∫£i CSV",
                    data=csv_data,
                    file_name=f"assessment_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                    mime="text/csv"
                )
            except Exception as e:
                st.error(f"Error creating CSV: {e}")

def prepare_assessment_data() -> Dict[str, Any]:
    """Chu·∫©n b·ªã d·ªØ li·ªáu ƒë√°nh gi√° cho xu·∫•t"""
    data = {
        "date": datetime.now().strftime('%d/%m/%Y'),
        "time": datetime.now().strftime('%H:%M:%S'),
        "results": {},
        "recommendations": []
    }
    
    # Get assessment results from session state
    if 'assessment_results' in st.session_state:
        for assessment_type, result in st.session_state.assessment_results.items():
            if hasattr(result, '__dict__'):
                data["results"][assessment_type] = {
                    "score": getattr(result, 'total_score', 0),
                    "max_score": getattr(result, 'max_score', 0),
                    "severity": getattr(result, 'severity', 'Unknown'),
                    "interpretation": getattr(result, 'interpretation', ''),
                    "recommendations": getattr(result, 'recommendations', [])
                }
                # Add to global recommendations
                if hasattr(result, 'recommendations'):
                    data["recommendations"].extend(result.recommendations)
    
    return data
'''
            
            # Save export system
            export_path = "components/data_export.py"
            with open(export_path, 'w', encoding='utf-8') as f:
                f.write(pdf_export_code)
            
            self.log_implementation("DATA_EXPORT", "COMPLETED", "Data export system created with PDF, JSON, CSV support")
            
            # 2. Add data backup functionality
            backup_code = '''import os
import json
import shutil
from datetime import datetime
from typing import Dict, Any

class DataBackupSystem:
    """H·ªá th·ªëng sao l∆∞u d·ªØ li·ªáu"""
    
    def __init__(self, backup_dir: str = "backups"):
        self.backup_dir = backup_dir
        os.makedirs(backup_dir, exist_ok=True)
    
    def create_session_backup(self, session_data: Dict[str, Any]) -> str:
        """T·∫°o backup cho session hi·ªán t·∫°i"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_file = f"{self.backup_dir}/session_backup_{timestamp}.json"
        
        backup_data = {
            "timestamp": datetime.now().isoformat(),
            "session_data": session_data,
            "system_info": {
                "version": "2.0.0",
                "backup_type": "session"
            }
        }
        
        with open(backup_file, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, indent=2, ensure_ascii=False)
        
        return backup_file
    
    def restore_session_backup(self, backup_file: str) -> Dict[str, Any]:
        """Kh√¥i ph·ª•c session t·ª´ backup"""
        with open(backup_file, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        return backup_data.get('session_data', {})
    
    def list_backups(self) -> list:
        """Li·ªát k√™ c√°c file backup"""
        backup_files = []
        for file in os.listdir(self.backup_dir):
            if file.endswith('.json'):
                backup_files.append(os.path.join(self.backup_dir, file))
        
        return sorted(backup_files, reverse=True)  # Newest first

def auto_backup_session():
    """T·ª± ƒë·ªông backup session state"""
    import streamlit as st
    
    if hasattr(st.session_state, 'enhanced_scores') and st.session_state.enhanced_scores:
        backup_system = DataBackupSystem()
        session_data = dict(st.session_state)
        
        # Clean sensitive data
        cleaned_data = {k: v for k, v in session_data.items() 
                       if not k.startswith('_') and k != 'user_credentials'}
        
        backup_file = backup_system.create_session_backup(cleaned_data)
        return backup_file
    
    return None
'''
            
            # Save backup system
            backup_path = "components/data_backup.py"
            with open(backup_path, 'w', encoding='utf-8') as f:
                f.write(backup_code)
            
            self.log_implementation("DATA_BACKUP", "COMPLETED", "Data backup system created")
            
            return True
            
        except Exception as e:
            self.log_implementation("DATA_EXPORT", "FAILED", str(e))
            return False
    
    def test_implementations(self) -> Dict[str, bool]:
        """Ki·ªÉm tra c√°c tri·ªÉn khai"""
        print("\nüß™ TESTING IMPLEMENTATIONS")
        print("=" * 28)
        
        test_results = {}
        
        # Test 1: Check UI navigation component
        nav_path = "components/enhanced_navigation.py"
        nav_exists = os.path.exists(nav_path)
        test_results["enhanced_navigation"] = nav_exists
        print(f"{'‚úÖ' if nav_exists else '‚ùå'} Enhanced Navigation Component")
        
        # Test 2: Check responsive design
        responsive_path = "components/responsive_design.py"
        responsive_exists = os.path.exists(responsive_path)
        test_results["responsive_design"] = responsive_exists
        print(f"{'‚úÖ' if responsive_exists else '‚ùå'} Responsive Design Component")
        
        # Test 3: Check data export system
        export_path = "components/data_export.py"
        export_exists = os.path.exists(export_path)
        test_results["data_export"] = export_exists
        print(f"{'‚úÖ' if export_exists else '‚ùå'} Data Export System")
        
        # Test 4: Check backup system
        backup_path = "components/data_backup.py"
        backup_exists = os.path.exists(backup_path)
        test_results["data_backup"] = backup_exists
        print(f"{'‚úÖ' if backup_exists else '‚ùå'} Data Backup System")
        
        # Overall test result
        all_passed = all(test_results.values())
        print(f"\nüéØ Overall Test Result: {'‚úÖ PASSED' if all_passed else '‚ùå FAILED'}")
        
        return test_results
    
    def execute_high_priority_improvements(self):
        """Th·ª±c hi·ªán t·∫•t c·∫£ c·∫£i ti·∫øn ∆∞u ti√™n cao"""
        print("üöÄ EXECUTING HIGH PRIORITY IMPROVEMENTS")
        print("=" * 45)
        
        success_count = 0
        total_tasks = 2
        
        # Task 1: UI Navigation Improvements
        if self.implement_ui_navigation_improvements():
            success_count += 1
        
        # Task 2: Data Export System
        if self.implement_data_export_system():
            success_count += 1
        
        # Test all implementations
        test_results = self.test_implementations()
        
        # Generate completion report
        print(f"\nüìä HIGH PRIORITY IMPROVEMENTS COMPLETION REPORT")
        print("=" * 55)
        print(f"‚úÖ Tasks Completed: {success_count}/{total_tasks}")
        print(f"üß™ Tests Passed: {sum(1 for passed in test_results.values() if passed)}/{len(test_results)}")
        print(f"‚è±Ô∏è Implementation Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        if success_count == total_tasks and all(test_results.values()):
            print("üéâ ALL HIGH PRIORITY IMPROVEMENTS COMPLETED SUCCESSFULLY!")
            print("‚úÖ System logic maintained")
            print("‚úÖ Process controlled")
            print("üöÄ Ready for next phase")
            return True
        else:
            print("‚ö†Ô∏è Some implementations failed or need attention")
            print("üîß Review logs and fix issues before proceeding")
            return False

def main():
    """Main function"""
    print("üéØ HIGH PRIORITY IMPROVEMENTS - SOULFRIEND V2.0")
    print("=" * 50)
    print(f"‚è∞ Start Time: {time.strftime('%Y-%m-%d %H:%M:%S')}")
    print("üõ°Ô∏è Implementing with strict process control")
    print()
    
    implementation = HighPriorityImplementation()
    success = implementation.execute_high_priority_improvements()
    
    # Save implementation log
    log_data = {
        "timestamp": datetime.now().isoformat(),
        "implementation_log": implementation.implementation_log,
        "success": success
    }
    
    with open("high_priority_implementation_log.json", "w", encoding="utf-8") as f:
        json.dump(log_data, f, indent=2, ensure_ascii=False)
    
    print(f"\nüíæ Implementation log saved: high_priority_implementation_log.json")

if __name__ == "__main__":
    main()
