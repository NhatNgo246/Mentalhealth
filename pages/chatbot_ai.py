"""
SOULFRIEND Chatbot AI
Intelligent conversational support for mental health
"""

import streamlit as st
import sys
import os
from datetime import datetime
import random

# Add project root to path
sys.path.append('/workspaces/Mentalhealth')

from components.ui import load_css, app_header

# Page configuration
st.set_page_config(
    page_title="SOULFRIEND Chatbot",
    page_icon="üí¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load custom CSS
load_css()

# App header
app_header()

# Chatbot responses database
RESPONSES = {
    "greeting": [
        "Xin ch√†o! T√¥i l√† SOUL AI, tr·ª£ l√Ω t√¢m l√Ω c·ªßa b·∫°n. H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?",
        "Ch√†o b·∫°n! T√¥i ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n. C√≥ g√¨ b·∫°n mu·ªën chia s·∫ª kh√¥ng?",
        "Hello! T√¥i l√† SOUL AI. T√¥i s·∫µn s√†ng tr√≤ chuy·ªán v√† h·ªó tr·ª£ b·∫°n v·ªÅ s·ª©c kh·ªèe t√¢m l√Ω."
    ],
    "anxiety": [
        "T√¥i hi·ªÉu b·∫°n ƒëang c·∫£m th·∫•y lo l·∫Øng. H√£y th·ª≠ th·ªü s√¢u: h√≠t v√†o 4 gi√¢y, gi·ªØ 4 gi√¢y, th·ªü ra 6 gi√¢y.",
        "Lo l·∫Øng l√† c·∫£m x√∫c b√¨nh th∆∞·ªùng. H√£y t·∫≠p trung v√†o hi·ªán t·∫°i - nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ nh√¨n, nghe, c·∫£m nh·∫≠n ngay b√¢y gi·ªù.",
        "Khi lo l·∫Øng, h√£y t·ª± h·ªèi: 'ƒêi·ªÅu n√†y c√≥ th·∫≠t s·ª± quan tr·ªçng trong 5 nƒÉm n·ªØa kh√¥ng?' Nhi·ªÅu khi c√¢u tr·∫£ l·ªùi s·∫Ω gi√∫p b·∫°n th·∫•y nh·∫π nh√µm h∆°n."
    ],
    "depression": [
        "T√¥i hi·ªÉu b·∫°n ƒëang tr·∫£i qua th·ªùi gian kh√≥ khƒÉn. B·∫°n ƒë√£ r·∫•t d≈©ng c·∫£m khi chia s·∫ª ƒëi·ªÅu n√†y.",
        "Tr·∫ßm c·∫£m kh√¥ng ph·∫£i l√† l·ªói c·ªßa b·∫°n. ƒê√≥ l√† t√¨nh tr·∫°ng c√≥ th·ªÉ ƒëi·ªÅu tr·ªã ƒë∆∞·ª£c. B·∫°n kh√¥ng ƒë∆°n ƒë·ªôc trong cu·ªôc chi·∫øn n√†y.",
        "M·ªói ng√†y b·∫°n v∆∞·ª£t qua ƒë·ªÅu l√† m·ªôt chi·∫øn th·∫Øng. H√£y t·ª± th∆∞·ªüng cho b·∫£n th√¢n nh·ªØng ƒëi·ªÅu nh·ªè nh∆∞ng c√≥ √Ω nghƒ©a."
    ],
    "stress": [
        "Stress c√≥ th·ªÉ √°p ƒë·∫£o, nh∆∞ng b·∫°n m·∫°nh m·∫Ω h∆°n b·∫°n nghƒ©. H√£y chia nh·ªè v·∫•n ƒë·ªÅ th√†nh c√°c b∆∞·ªõc nh·ªè h∆°n.",
        "Khi stress, h√£y d√†nh 5 ph√∫t ƒë·ªÉ l√†m ƒëi·ªÅu g√¨ ƒë√≥ b·∫°n y√™u th√≠ch - nghe nh·∫°c, v·∫Ω, hay ch·ªâ ƒë∆°n gi·∫£n l√† ng·∫Øm c·∫£nh.",
        "H√£y nh·ªõ r·∫±ng b·∫°n kh√¥ng th·ªÉ ki·ªÉm so√°t m·ªçi th·ª©, nh∆∞ng b·∫°n c√≥ th·ªÉ ki·ªÉm so√°t c√°ch ph·∫£n ·ª©ng c·ªßa m√¨nh."
    ],
    "support": [
        "B·∫°n ƒë√£ l√†m r·∫•t t·ªët khi t√¨m ki·∫øm s·ª± h·ªó tr·ª£. ƒê√≥ l√† d·∫•u hi·ªáu c·ªßa s·ª©c m·∫°nh, kh√¥ng ph·∫£i y·∫øu ƒëu·ªëi.",
        "T√¥i ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe b·∫°n. Kh√¥ng c√≥ g√¨ b·∫°n chia s·∫ª l√† qu√° nh·ªè nh·∫∑t hay kh√¥ng quan tr·ªçng.",
        "M·ªói ng∆∞·ªùi ƒë·ªÅu c√≥ nh·ªØng th·ªùi ƒëi·ªÉm kh√≥ khƒÉn. ƒêi·ªÅu quan tr·ªçng l√† b·∫°n kh√¥ng ƒëi qua ch√∫ng m·ªôt m√¨nh."
    ]
}

def generate_response(user_input):
    """Generate chatbot response based on user input"""
    user_input_lower = user_input.lower()
    
    if any(word in user_input_lower for word in ["xin ch√†o", "hello", "ch√†o", "hi"]):
        return random.choice(RESPONSES["greeting"])
    elif any(word in user_input_lower for word in ["lo l·∫Øng", "anxiety", "Í±±Ï†ï", "s·ª£ h√£i"]):
        return random.choice(RESPONSES["anxiety"])
    elif any(word in user_input_lower for word in ["bu·ªìn", "tr·∫ßm c·∫£m", "depression", "tuy·ªát v·ªçng"]):
        return random.choice(RESPONSES["depression"])
    elif any(word in user_input_lower for word in ["stress", "cƒÉng th·∫≥ng", "√°p l·ª±c", "m·ªát m·ªèi"]):
        return random.choice(RESPONSES["stress"])
    else:
        return random.choice(RESPONSES["support"])

def chatbot_main():
    """Main chatbot interface"""
    st.markdown("# üí¨ SOUL AI Chatbot")
    st.markdown("#### Tr·ª£ l√Ω AI h·ªó tr·ª£ s·ª©c kh·ªèe t√¢m l√Ω 24/7")
    st.markdown("---")
    
    # Initialize chat history
    if "chat_history" not in st.session_state:
        st.session_state.chat_history = []
        st.session_state.chat_history.append({
            "role": "assistant",
            "message": "Xin ch√†o! T√¥i l√† SOUL AI, tr·ª£ l√Ω t√¢m l√Ω c·ªßa b·∫°n. H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?",
            "timestamp": datetime.now().strftime("%H:%M")
        })
    
    # Chat container
    chat_container = st.container()
    
    # Display chat history
    with chat_container:
        for chat in st.session_state.chat_history:
            if chat["role"] == "user":
                st.markdown(f"""
                <div style="text-align: right; margin: 10px 0;">
                    <div style="background-color: #007bff; color: white; padding: 10px; border-radius: 15px; display: inline-block; max-width: 70%;">
                        {chat["message"]}
                    </div>
                    <div style="font-size: 0.8em; color: #666; margin-top: 2px;">
                        {chat["timestamp"]}
                    </div>
                </div>
                """, unsafe_allow_html=True)
            else:
                st.markdown(f"""
                <div style="text-align: left; margin: 10px 0;">
                    <div style="background-color: #f1f3f4; padding: 10px; border-radius: 15px; display: inline-block; max-width: 70%;">
                        ü§ñ {chat["message"]}
                    </div>
                    <div style="font-size: 0.8em; color: #666; margin-top: 2px;">
                        {chat["timestamp"]}
                    </div>
                </div>
                """, unsafe_allow_html=True)
    
    # Chat input
    st.markdown("---")
    
    col1, col2 = st.columns([4, 1])
    
    with col1:
        user_input = st.text_input("üí≠ Chia s·∫ª c·∫£m x√∫c c·ªßa b·∫°n...", key="chat_input", placeholder="H√¥m nay t√¥i c·∫£m th·∫•y...")
    
    with col2:
        send_button = st.button("üì§ G·ª≠i", type="primary")
    
    # Process user input
    if send_button and user_input:
        # Add user message
        st.session_state.chat_history.append({
            "role": "user",
            "message": user_input,
            "timestamp": datetime.now().strftime("%H:%M")
        })
        
        # Generate AI response
        ai_response = generate_response(user_input)
        
        # Add AI response
        st.session_state.chat_history.append({
            "role": "assistant",
            "message": ai_response,
            "timestamp": datetime.now().strftime("%H:%M")
        })
        
        # Clear input and rerun
        st.rerun()
    
    # Quick response buttons
    st.markdown("### üöÄ Ph·∫£n h·ªìi nhanh")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üò∞ T√¥i ƒëang lo l·∫Øng"):
            st.session_state.chat_history.append({
                "role": "user",
                "message": "T√¥i ƒëang c·∫£m th·∫•y lo l·∫Øng",
                "timestamp": datetime.now().strftime("%H:%M")
            })
            ai_response = generate_response("lo l·∫Øng")
            st.session_state.chat_history.append({
                "role": "assistant",
                "message": ai_response,
                "timestamp": datetime.now().strftime("%H:%M")
            })
            st.rerun()
    
    with col2:
        if st.button("üò¢ T√¥i bu·ªìn"):
            st.session_state.chat_history.append({
                "role": "user",
                "message": "T√¥i ƒëang c·∫£m th·∫•y bu·ªìn",
                "timestamp": datetime.now().strftime("%H:%M")
            })
            ai_response = generate_response("bu·ªìn")
            st.session_state.chat_history.append({
                "role": "assistant",
                "message": ai_response,
                "timestamp": datetime.now().strftime("%H:%M")
            })
            st.rerun()
    
    with col3:
        if st.button("üòµ T√¥i stress"):
            st.session_state.chat_history.append({
                "role": "user",
                "message": "T√¥i ƒëang c·∫£m th·∫•y stress",
                "timestamp": datetime.now().strftime("%H:%M")
            })
            ai_response = generate_response("stress")
            st.session_state.chat_history.append({
                "role": "assistant",
                "message": ai_response,
                "timestamp": datetime.now().strftime("%H:%M")
            })
            st.rerun()
    
    with col4:
        if st.button("üÜò C·∫ßn h·ªó tr·ª£"):
            st.session_state.chat_history.append({
                "role": "user",
                "message": "T√¥i c·∫ßn h·ªó tr·ª£",
                "timestamp": datetime.now().strftime("%H:%M")
            })
            ai_response = generate_response("h·ªó tr·ª£")
            st.session_state.chat_history.append({
                "role": "assistant",
                "message": ai_response,
                "timestamp": datetime.now().strftime("%H:%M")
            })
            st.rerun()
    
    # Clear chat button
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat", type="secondary"):
        st.session_state.chat_history = []
        st.session_state.chat_history.append({
            "role": "assistant",
            "message": "Xin ch√†o! T√¥i l√† SOUL AI, tr·ª£ l√Ω t√¢m l√Ω c·ªßa b·∫°n. H√¥m nay b·∫°n c·∫£m th·∫•y th·∫ø n√†o?",
            "timestamp": datetime.now().strftime("%H:%M")
        })
        st.rerun()

if __name__ == "__main__":
    chatbot_main()
