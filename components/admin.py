"""
Admin Panel for SOULFRIEND
Provides administrative tools for managing questionnaires, users, and analytics
"""

import streamlit as st
import json
import os
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import hashlib
from typing import Dict, List, Any
import plotly.express as px
import plotly.graph_objects as go

# Admin credentials (in production, use proper auth system)
ADMIN_USERS = {
    "admin": "240be518fabd2724ddb6f04eeb1da5967448d7e831c08c8fa822809f74c720a9",  # admin123
    "doctor": "8b2c86ea9cf2ea4eb517fd1e06b74f399e7fec0fef92e3b482a6cf2e2b092023",  # doctor123
}

def hash_password(password: str) -> str:
    """Hash password using SHA256"""
    return hashlib.sha256(password.encode()).hexdigest()

def verify_admin_login() -> bool:
    """Verify admin login credentials"""
    if 'admin_authenticated' not in st.session_state:
        st.session_state.admin_authenticated = False
    
    if not st.session_state.admin_authenticated:
        st.markdown("### üîê ƒêƒÉng nh·∫≠p qu·∫£n tr·ªã")
        
        with st.form("admin_login"):
            username = st.text_input("T√™n ƒëƒÉng nh·∫≠p")
            password = st.text_input("M·∫≠t kh·∫©u", type="password")
            submit = st.form_submit_button("ƒêƒÉng nh·∫≠p")
            
            if submit:
                if username in ADMIN_USERS and hash_password(password) == ADMIN_USERS[username]:
                    st.session_state.admin_authenticated = True
                    st.session_state.admin_username = username
                    st.success("‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!")
                    st.rerun()
                else:
                    st.error("‚ùå Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u!")
        
        return False
    
    return True

def admin_logout():
    """Admin logout functionality"""
    if st.button("üö™ ƒêƒÉng xu·∫•t"):
        st.session_state.admin_authenticated = False
        if 'admin_username' in st.session_state:
            del st.session_state.admin_username
        st.rerun()

def load_questionnaire_config(questionnaire_type: str) -> Dict:
    """Load questionnaire configuration for editing"""
    file_mapping = {
        "DASS-21": "dass21_enhanced_vi.json",
        "PHQ-9": "phq9_enhanced_vi.json", 
        "GAD-7": "gad7_enhanced_vi.json",
        "EPDS": "epds_enhanced_vi.json",
        "PSS-10": "pss10_enhanced_vi.json"
    }
    
    file_path = f"/workspaces/Mentalhealth/data/{file_mapping[questionnaire_type]}"
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        st.error(f"Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh: {file_path}")
        return {}

def save_questionnaire_config(questionnaire_type: str, config: Dict):
    """Save questionnaire configuration"""
    file_mapping = {
        "DASS-21": "dass21_enhanced_vi.json",
        "PHQ-9": "phq9_enhanced_vi.json",
        "GAD-7": "gad7_enhanced_vi.json", 
        "EPDS": "epds_enhanced_vi.json",
        "PSS-10": "pss10_enhanced_vi.json"
    }
    
    file_path = f"/workspaces/Mentalhealth/data/{file_mapping[questionnaire_type]}"
    
    try:
        # Create backup
        backup_path = f"{file_path}.backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        if os.path.exists(file_path):
            os.rename(file_path, backup_path)
        
        # Save new config
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        
        return True
    except Exception as e:
        st.error(f"L·ªói l∆∞u c·∫•u h√¨nh: {str(e)}")
        return False

def questionnaire_manager():
    """Questionnaire management interface"""
    st.markdown("### üìù Qu·∫£n l√Ω thang ƒëo")
    
    # Select questionnaire to edit
    questionnaire_type = st.selectbox(
        "Ch·ªçn thang ƒëo ƒë·ªÉ ch·ªânh s·ª≠a:",
        ["DASS-21", "PHQ-9", "GAD-7", "EPDS", "PSS-10"]
    )
    
    if st.button("üìÇ T·∫£i c·∫•u h√¨nh"):
        config = load_questionnaire_config(questionnaire_type)
        if config:
            st.session_state.current_config = config
            st.session_state.current_questionnaire = questionnaire_type
            st.success(f"‚úÖ ƒê√£ t·∫£i c·∫•u h√¨nh {questionnaire_type}")
    
    if 'current_config' in st.session_state:
        config = st.session_state.current_config
        
        # Basic info editing
        st.markdown("#### ‚ÑπÔ∏è Th√¥ng tin c∆° b·∫£n")
        col1, col2 = st.columns(2)
        
        with col1:
            config['name'] = st.text_input("T√™n thang ƒëo:", value=config.get('name', ''))
            config['version'] = st.text_input("Phi√™n b·∫£n:", value=config.get('version', ''))
        
        with col2:
            config['description'] = st.text_area("M√¥ t·∫£:", value=config.get('description', ''))
        
        # Items editing
        st.markdown("#### üìã C√¢u h·ªèi")
        
        if 'items' in config:
            # Display items in editable table
            items_data = []
            for i, item in enumerate(config['items']):
                items_data.append({
                    'ID': item.get('id', i+1),
                    'C√¢u h·ªèi': item.get('text_vi', ''),
                    'Subscale': item.get('subscale', ''),
                    'Reverse': item.get('reverse', False)
                })
            
            items_df = pd.DataFrame(items_data)
            edited_df = st.data_editor(
                items_df,
                num_rows="dynamic",
                width="stretch",
                key=f"items_editor_{questionnaire_type}"
            )
            
            # Update config with edited items
            config['items'] = []
            for _, row in edited_df.iterrows():
                config['items'].append({
                    'id': row['ID'],
                    'text_vi': row['C√¢u h·ªèi'],
                    'subscale': row['Subscale'],
                    'reverse': row['Reverse']
                })
        
        # Response options editing  
        st.markdown("#### üîò T√πy ch·ªçn tr·∫£ l·ªùi")
        if 'response_options' in config:
            options_text = st.text_area(
                "T√πy ch·ªçn tr·∫£ l·ªùi (m·ªói d√≤ng m·ªôt t√πy ch·ªçn):",
                value='\n'.join([opt['text_vi'] for opt in config['response_options']]),
                height=150
            )
            
            # Update response options
            lines = options_text.strip().split('\n')
            config['response_options'] = []
            for i, line in enumerate(lines):
                if line.strip():
                    config['response_options'].append({
                        'value': i,
                        'text_vi': line.strip()
                    })
        
        # Save configuration
        st.markdown("#### üíæ L∆∞u thay ƒë·ªïi")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üíæ L∆∞u c·∫•u h√¨nh", type="primary"):
                if save_questionnaire_config(questionnaire_type, config):
                    st.success("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh th√†nh c√¥ng!")
                else:
                    st.error("‚ùå L·ªói khi l∆∞u c·∫•u h√¨nh!")
        
        with col2:
            if st.button("üîÑ T·∫£i l·∫°i"):
                config = load_questionnaire_config(questionnaire_type)
                st.session_state.current_config = config
                st.rerun()
        
        with col3:
            if st.button("üìã Xem JSON"):
                with st.expander("üìÑ C·∫•u h√¨nh JSON"):
                    st.json(config)

def analytics_dashboard():
    """Analytics and statistics dashboard"""
    st.markdown("### üìä Th·ªëng k√™ s·ª≠ d·ª•ng")
    
    # Mock data for demonstration (in production, get from database)
    mock_data = {
        'dates': pd.date_range('2025-08-01', '2025-08-27', freq='D'),
        'dass21_count': [15, 12, 18, 20, 25, 22, 19, 16, 21, 24, 18, 15, 23, 26, 20, 17, 19, 22, 25, 28, 24, 21, 18, 26, 29, 22, 20],
        'phq9_count': [8, 6, 9, 11, 13, 10, 8, 7, 12, 14, 9, 8, 11, 13, 10, 8, 9, 11, 12, 14, 11, 10, 8, 13, 15, 11, 9],
        'gad7_count': [5, 4, 7, 8, 10, 7, 5, 6, 9, 11, 6, 5, 8, 10, 7, 5, 6, 8, 9, 11, 8, 7, 5, 10, 12, 8, 6]
    }
    
    # Summary metrics
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("T·ªïng ƒë√°nh gi√° h√¥m nay", "47", delta="5")
    
    with col2:
        st.metric("Ng∆∞·ªùi d√πng ho·∫°t ƒë·ªông", "124", delta="12")
    
    with col3:
        st.metric("ƒê√°nh gi√° tu·∫ßn n√†y", "298", delta="34")
    
    with col4:
        st.metric("T·ª∑ l·ªá ho√†n th√†nh", "94.2%", delta="2.1%")
    
    # Usage trends
    st.markdown("#### üìà Xu h∆∞·ªõng s·ª≠ d·ª•ng")
    
    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=mock_data['dates'],
        y=mock_data['dass21_count'],
        mode='lines+markers',
        name='DASS-21',
        line=dict(color='#e74c3c', width=3)
    ))
    fig.add_trace(go.Scatter(
        x=mock_data['dates'],
        y=mock_data['phq9_count'],
        mode='lines+markers',
        name='PHQ-9',
        line=dict(color='#3498db', width=3)
    ))
    fig.add_trace(go.Scatter(
        x=mock_data['dates'],
        y=mock_data['gad7_count'],
        mode='lines+markers',
        name='GAD-7',
        line=dict(color='#2ecc71', width=3)
    ))
    
    fig.update_layout(
        title="S·ªë l∆∞·ª£ng ƒë√°nh gi√° theo ng√†y",
        xaxis_title="Ng√†y",
        yaxis_title="S·ªë l∆∞·ª£ng ƒë√°nh gi√°",
        height=400
    )
    
    st.plotly_chart(fig, width="stretch")
    
    # Questionnaire popularity
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üèÜ Thang ƒëo ph·ªï bi·∫øn")
        popularity_data = {
            'Questionnaire': ['DASS-21', 'PHQ-9', 'GAD-7', 'EPDS', 'PSS-10'],
            'Count': [547, 234, 156, 89, 123]
        }
        
        fig_bar = px.bar(
            popularity_data, 
            x='Count', 
            y='Questionnaire',
            orientation='h',
            title="S·ªë l∆∞·ª£ng s·ª≠ d·ª•ng theo thang ƒëo"
        )
        st.plotly_chart(fig_bar, width="stretch")
    
    with col2:
        st.markdown("#### ‚è∞ Gi·ªù cao ƒëi·ªÉm")
        hourly_data = {
            'Hour': list(range(24)),
            'Assessments': [2, 1, 0, 0, 1, 3, 8, 15, 22, 28, 25, 30, 35, 32, 28, 26, 31, 29, 25, 18, 12, 8, 5, 3]
        }
        
        fig_hourly = px.line(
            hourly_data,
            x='Hour',
            y='Assessments',
            title="S·ªë l∆∞·ª£ng ƒë√°nh gi√° theo gi·ªù"
        )
        st.plotly_chart(fig_hourly, width="stretch")

def user_management():
    """User management interface"""
    st.markdown("### üë• Qu·∫£n l√Ω ng∆∞·ªùi d√πng")
    
    # Mock user data
    users_data = {
        'ID': [1, 2, 3, 4, 5],
        'Email': ['user1@example.com', 'user2@example.com', 'user3@example.com', 'user4@example.com', 'user5@example.com'],
        'Last Assessment': ['2025-08-27', '2025-08-26', '2025-08-25', '2025-08-24', '2025-08-23'],
        'Total Assessments': [5, 3, 8, 2, 12],
        'Status': ['Active', 'Active', 'Inactive', 'Active', 'Active']
    }
    
    users_df = pd.DataFrame(users_data)
    
    # Search and filter
    col1, col2 = st.columns(2)
    with col1:
        search_term = st.text_input("üîç T√¨m ki·∫øm email:")
    with col2:
        status_filter = st.selectbox("L·ªçc theo tr·∫°ng th√°i:", ["T·∫•t c·∫£", "Active", "Inactive"])
    
    # Apply filters
    filtered_df = users_df.copy()
    if search_term:
        filtered_df = filtered_df[filtered_df['Email'].str.contains(search_term, case=False)]
    if status_filter != "T·∫•t c·∫£":
        filtered_df = filtered_df[filtered_df['Status'] == status_filter]
    
    # Display users table
    st.dataframe(filtered_df, width="stretch")
    
    # User actions
    st.markdown("#### üõ†Ô∏è H√†nh ƒë·ªông")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìß G·ª≠i email nh·∫Øc nh·ªü"):
            st.info("T√≠nh nƒÉng g·ª≠i email s·∫Ω c√≥ trong phi√™n b·∫£n ti·∫øp theo")
    
    with col2:
        if st.button("üìä Xu·∫•t danh s√°ch"):
            csv = filtered_df.to_csv(index=False)
            st.download_button(
                label="üíæ T·∫£i CSV",
                data=csv,
                file_name=f"users_{datetime.now().strftime('%Y%m%d')}.csv",
                mime="text/csv"
            )
    
    with col3:
        if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu"):
            st.rerun()

def research_data_dashboard():
    """Research data dashboard within admin panel"""
    st.markdown("### üî¨ D·ªØ li·ªáu nghi√™n c·ª©u")
    
    # Load research data
    data_files = [
        "/workspaces/Mentalhealth/research_system/data/collected_data.json",
        "/workspaces/Mentalhealth/data/research_data.json",
        "/workspaces/Mentalhealth/research_data.json"
    ]
    
    all_data = []
    
    for file_path in data_files:
        if os.path.exists(file_path):
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    if isinstance(data, list):
                        all_data.extend(data)
                    elif isinstance(data, dict):
                        all_data.append(data)
            except Exception as e:
                st.warning(f"Kh√¥ng th·ªÉ ƒë·ªçc file {file_path}: {e}")
    
    if not all_data:
        st.warning("‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu nghi√™n c·ª©u n√†o ƒë∆∞·ª£c thu th·∫≠p.")
        
        st.markdown("""
        ### üìç H∆∞·ªõng d·∫´n k√≠ch ho·∫°t thu th·∫≠p d·ªØ li·ªáu nghi√™n c·ª©u:
        
        **1. üîß K√≠ch ho·∫°t research system:**
        ```bash
        export ENABLE_RESEARCH_COLLECTION=true
        ```
        
        **2. üåê V·ªã tr√≠ trong giao di·ªán:**
        - M·ªü SOULFRIEND: http://localhost:8502
        - T√¨m "üî¨ Chia s·∫ª D·ªØ li·ªáu cho Nghi√™n c·ª©u" trong Sidebar
        - Ng∆∞·ªùi d√πng ch·ªçn ƒë·ªìng √Ω chia s·∫ª d·ªØ li·ªáu
        - D·ªØ li·ªáu s·∫Ω t·ª± ƒë·ªông thu th·∫≠p khi th·ª±c hi·ªán ƒë√°nh gi√°
        
        **3. üìÇ File d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c l∆∞u t·∫°i:**
        - `/research_system/data/collected_data.json`
        - `/data/research_data.json`
        """)
        return
    
    # Data overview
    st.markdown("#### üìä T·ªïng quan d·ªØ li·ªáu")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        total_records = len(all_data)
        st.metric("üìã T·ªïng s·ªë records", total_records)
    
    with col2:
        consent_records = len([r for r in all_data if 'consent_given' in r])
        st.metric("üî¨ Consent records", consent_records)
    
    with col3:
        assessment_records = len([r for r in all_data if 'questionnaire_type' in r])
        st.metric("üìù Assessment records", assessment_records)
    
    with col4:
        unique_sessions = len(set(r.get('session_id', '') for r in all_data if r.get('session_id')))
        st.metric("üë• Unique sessions", unique_sessions)
    
    # Consent Analysis
    consent_data = []
    for record in all_data:
        if 'consent_given' in record:
            consent_data.append({
                'timestamp': record.get('timestamp', ''),
                'consent': record['consent_given'],
                'user_type': record.get('user_info', {}).get('type', 'unknown')
            })
    
    if consent_data:
        st.markdown("#### üî¨ Ph√¢n t√≠ch Consent")
        
        consent_df = pd.DataFrame(consent_data)
        consent_df['timestamp'] = pd.to_datetime(consent_df['timestamp'])
        
        col1, col2 = st.columns(2)
        
        with col1:
            consent_counts = consent_df['consent'].value_counts()
            fig_pie = px.pie(
                values=consent_counts.values,
                names=['ƒê·ªìng √Ω' if x else 'T·ª´ ch·ªëi' for x in consent_counts.index],
                title="T·ª∑ l·ªá ƒë·ªìng √Ω/t·ª´ ch·ªëi nghi√™n c·ª©u"
            )
            st.plotly_chart(fig_pie, use_container_width=True)
        
        with col2:
            st.markdown("**üìä Th·ªëng k√™ consent:**")
            total_consent = len(consent_data)
            agreed = len([d for d in consent_data if d['consent']])
            disagreed = total_consent - agreed
            
            st.write(f"- T·ªïng c·ªông: {total_consent}")
            st.write(f"- ƒê·ªìng √Ω: {agreed} ({agreed/total_consent*100:.1f}%)")
            st.write(f"- T·ª´ ch·ªëi: {disagreed} ({disagreed/total_consent*100:.1f}%)")
    
    # Assessment Analysis
    assessment_data = []
    for record in all_data:
        if 'questionnaire_type' in record:
            assessment_data.append({
                'timestamp': record.get('timestamp', ''),
                'questionnaire': record['questionnaire_type'],
                'score': record.get('total_score', 0),
                'completion_time': record.get('completion_time_seconds', 0)
            })
    
    if assessment_data:
        st.markdown("#### üìù Ph√¢n t√≠ch Assessment Data")
        
        assessment_df = pd.DataFrame(assessment_data)
        assessment_df['timestamp'] = pd.to_datetime(assessment_df['timestamp'])
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Assessment types distribution
            assessment_counts = assessment_df['questionnaire'].value_counts()
            fig_bar = px.bar(
                x=assessment_counts.index,
                y=assessment_counts.values,
                title="Ph√¢n b·ªë lo·∫°i ƒë√°nh gi√°"
            )
            st.plotly_chart(fig_bar, use_container_width=True)
        
        with col2:
            # Average scores by questionnaire
            avg_scores = assessment_df.groupby('questionnaire')['score'].mean()
            fig_bar2 = px.bar(
                x=avg_scores.index,
                y=avg_scores.values,
                title="ƒêi·ªÉm trung b√¨nh theo lo·∫°i ƒë√°nh gi√°"
            )
            st.plotly_chart(fig_bar2, use_container_width=True)
        
        # Completion time analysis
        st.markdown("#### ‚è±Ô∏è Ph√¢n t√≠ch th·ªùi gian ho√†n th√†nh")
        
        avg_completion = assessment_df.groupby('questionnaire')['completion_time'].mean()
        fig_time = px.bar(
            x=avg_completion.index,
            y=avg_completion.values,
            title="Th·ªùi gian ho√†n th√†nh trung b√¨nh (gi√¢y)"
        )
        st.plotly_chart(fig_time, use_container_width=True)
    
    # Export options
    st.markdown("#### üì§ Xu·∫•t d·ªØ li·ªáu")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìÑ Xu·∫•t CSV"):
            df_export = pd.DataFrame(all_data)
            csv = df_export.to_csv(index=False)
            st.download_button(
                label="üíæ T·∫£i file CSV",
                data=csv,
                file_name=f"soulfriend_research_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
    
    with col2:
        if st.button("üìã Xu·∫•t JSON"):
            json_str = json.dumps(all_data, indent=2, ensure_ascii=False)
            st.download_button(
                label="üíæ T·∫£i file JSON",
                data=json_str,
                file_name=f"soulfriend_research_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    with col3:
        if st.button("üîÑ L√†m m·ªõi d·ªØ li·ªáu"):
            st.rerun()
    
    # Raw data preview
    with st.expander("üìÑ Xem d·ªØ li·ªáu chi ti·∫øt"):
        st.json(all_data[:5])  # Show first 5 records
        
        if len(all_data) > 5:
            st.info(f"Hi·ªÉn th·ªã 5 records ƒë·∫ßu ti√™n. T·ªïng c·ªông: {len(all_data)} records")

def advanced_system_config():
    """Advanced system configuration interface for admins"""
    st.title("üîß C·∫•u h√¨nh h·ªá th·ªëng n√¢ng cao")
    
    # Configuration tabs
    config_tab = st.selectbox(
        "Ch·ªçn lo·∫°i c·∫•u h√¨nh:",
        ["üì± C·∫•u h√¨nh ·ª©ng d·ª•ng", "üìä C·∫•u h√¨nh ƒë√°nh gi√°", "üîí C·∫•u h√¨nh b·∫£o m·∫≠t", "ü§ñ C·∫•u h√¨nh AI", "üî¨ C·∫•u h√¨nh nghi√™n c·ª©u"]
    )
    
    if config_tab == "üì± C·∫•u h√¨nh ·ª©ng d·ª•ng":
        st.subheader("üé® Giao di·ªán & Hi·ªÉn th·ªã")
        
        col1, col2 = st.columns(2)
        with col1:
            st.checkbox("Ch·∫ø ƒë·ªô t·ªëi", value=False, help="B·∫≠t/t·∫Øt giao di·ªán t·ªëi")
            st.selectbox("Ng√¥n ng·ªØ m·∫∑c ƒë·ªãnh:", ["Ti·∫øng Vi·ªát", "English"], help="Ng√¥n ng·ªØ hi·ªÉn th·ªã m·∫∑c ƒë·ªãnh")
            st.number_input("Th·ªùi gian session (ph√∫t):", min_value=15, max_value=480, value=60)
            
        with col2:
            st.checkbox("Hi·ªán logo", value=True)
            st.checkbox("√Çm thanh th√¥ng b√°o", value=True)
            st.selectbox("M√∫i gi·ªù:", ["UTC+7 (Vi·ªát Nam)", "UTC+0 (GMT)", "UTC-5 (EST)"])
            
        st.subheader("üìß Th√¥ng b√°o")
        st.checkbox("Email th√¥ng b√°o", value=False, help="G·ª≠i email th√¥ng b√°o k·∫øt qu·∫£")
        st.text_input("Email admin:", placeholder="admin@soulfriend.vn")
        
    elif config_tab == "üìä C·∫•u h√¨nh ƒë√°nh gi√°":
        st.subheader("‚öôÔ∏è Tham s·ªë ƒë√°nh gi√°")
        
        col1, col2 = st.columns(2)
        with col1:
            st.number_input("Th·ªùi gian t·ªëi ƒëa (ph√∫t):", min_value=5, max_value=60, value=30)
            st.checkbox("L∆∞u ti·∫øn ƒë·ªô t·ª± ƒë·ªông", value=True)
            st.checkbox("Hi·ªÉn th·ªã thanh ti·∫øn ƒë·ªô", value=True)
            
        with col2:
            st.selectbox("ƒê·ªô kh√≥ m·∫∑c ƒë·ªãnh:", ["D·ªÖ", "Trung b√¨nh", "Kh√≥"])
            st.checkbox("X√°o tr·ªôn c√¢u h·ªèi", value=False)
            st.number_input("S·ªë c√¢u t·ªëi ƒëa/phi√™n:", min_value=10, max_value=100, value=50)
            
        st.subheader("üìà ƒêi·ªÉm s·ªë & Thang ƒëo")
        for scale in ["DASS-21", "PHQ-9", "GAD-7", "EPDS", "PSS-10"]:
            with st.expander(f"C·∫•u h√¨nh {scale}"):
                col1, col2 = st.columns(2)
                with col1:
                    st.checkbox(f"K√≠ch ho·∫°t {scale}", value=True)
                    st.selectbox(f"Phi√™n b·∫£n {scale}:", ["Chu·∫©n", "R√∫t g·ªçn", "M·ªü r·ªông"])
                with col2:
                    st.number_input(f"Ng∆∞·ª°ng c·∫£nh b√°o {scale}:", min_value=0, max_value=100, value=15)
                    st.selectbox(f"T·∫ßn su·∫•t khuy·∫øn ngh·ªã {scale}:", ["H√†ng tu·∫ßn", "2 tu·∫ßn", "H√†ng th√°ng"])
    
    elif config_tab == "üîí C·∫•u h√¨nh b·∫£o m·∫≠t":
        st.subheader("üõ°Ô∏è B·∫£o m·∫≠t & Quy·ªÅn ri√™ng t∆∞")
        
        col1, col2 = st.columns(2)
        with col1:
            st.selectbox("M·ª©c m√£ h√≥a:", ["AES-128", "AES-256", "RSA-2048"])
            st.number_input("ƒê·ªô d√†i m·∫≠t kh·∫©u t·ªëi thi·ªÉu:", min_value=6, max_value=20, value=8)
            st.checkbox("X√°c th·ª±c 2 y·∫øu t·ªë", value=False)
            
        with col2:
            st.number_input("Th·ªùi gian kh√≥a t√†i kho·∫£n (ph√∫t):", min_value=5, max_value=60, value=15)
            st.number_input("S·ªë l·∫ßn ƒëƒÉng nh·∫≠p sai t·ªëi ƒëa:", min_value=3, max_value=10, value=5)
            st.checkbox("Ghi log truy c·∫≠p", value=True)
            
        st.subheader("üîê Quy·ªÅn truy c·∫≠p")
        with st.expander("C·∫•u h√¨nh quy·ªÅn Admin"):
            st.multiselect("Quy·ªÅn qu·∫£n l√Ω:", 
                         ["Xem d·ªØ li·ªáu", "S·ª≠a c·∫•u h√¨nh", "Qu·∫£n l√Ω user", "Xu·∫•t b√°o c√°o", "C·∫•u h√¨nh h·ªá th·ªëng"],
                         default=["Xem d·ªØ li·ªáu", "Xu·∫•t b√°o c√°o"])
    
    elif config_tab == "ü§ñ C·∫•u h√¨nh AI":
        st.subheader("üß† Tr√≠ tu·ªá nh√¢n t·∫°o")
        
        col1, col2 = st.columns(2)
        with col1:
            st.selectbox("Model AI:", ["GPT-3.5", "GPT-4", "Local Model"])
            st.slider("ƒê·ªô s√°ng t·∫°o (Temperature):", 0.0, 1.0, 0.7, 0.1)
            st.number_input("Max tokens:", min_value=100, max_value=4000, value=1000)
            
        with col2:
            st.checkbox("AI Chatbot", value=True)
            st.checkbox("G·ª£i √Ω th√¥ng minh", value=True)
            st.selectbox("Ng√¥n ng·ªØ AI:", ["Ti·∫øng Vi·ªát", "English", "T·ª± ƒë·ªông"])
            
        st.subheader("üéØ C√° nh√¢n h√≥a")
        st.checkbox("H·ªçc t·ª´ ph·∫£n h·ªìi ng∆∞·ªùi d√πng", value=True)
        st.slider("M·ª©c ƒë·ªô c√° nh√¢n h√≥a:", 1, 5, 3)
        
    elif config_tab == "üî¨ C·∫•u h√¨nh nghi√™n c·ª©u":
        st.subheader("üìä Thu th·∫≠p d·ªØ li·ªáu nghi√™n c·ª©u")
        
        col1, col2 = st.columns(2)
        with col1:
            st.checkbox("Thu th·∫≠p d·ªØ li·ªáu ·∫©n danh", value=True)
            st.selectbox("M·ª©c ƒë·ªô ·∫©n danh:", ["Th·∫•p", "Trung b√¨nh", "Cao"])
            st.checkbox("Chia s·∫ª v·ªõi ƒë·ªëi t√°c nghi√™n c·ª©u", value=False)
            
        with col2:
            st.number_input("Th·ªùi gian l∆∞u tr·ªØ (th√°ng):", min_value=1, max_value=60, value=12)
            st.checkbox("T·ª± ƒë·ªông xu·∫•t b√°o c√°o", value=True)
            st.selectbox("T·∫ßn su·∫•t b√°o c√°o:", ["H√†ng tu·∫ßn", "H√†ng th√°ng", "Qu√Ω"])
            
        st.subheader("‚úÖ Ch·∫•p thu·∫≠n nghi√™n c·ª©u")
        st.text_area("VƒÉn b·∫£n ch·∫•p thu·∫≠n:", 
                    value="T√¥i ƒë·ªìng √Ω cho ph√©p d·ªØ li·ªáu c·ªßa m√¨nh ƒë∆∞·ª£c s·ª≠ d·ª•ng cho m·ª•c ƒë√≠ch nghi√™n c·ª©u khoa h·ªçc...",
                    height=100)
    
    # Save configuration
    if st.button("üíæ L∆∞u c·∫•u h√¨nh", type="primary"):
        st.success("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh th√†nh c√¥ng!")
        st.balloons()

def admin_reports_dashboard():
    """Comprehensive admin reports dashboard"""
    st.title("üìã B√°o c√°o t·ªïng th·ªÉ")
    
    # Report type selection
    report_type = st.selectbox(
        "Ch·ªçn lo·∫°i b√°o c√°o:",
        ["üìä B√°o c√°o t·ªïng quan", "üë• B√°o c√°o ng∆∞·ªùi d√πng", "üìà B√°o c√°o hi·ªáu su·∫•t", "üî¨ B√°o c√°o nghi√™n c·ª©u", "‚ö†Ô∏è B√°o c√°o c·∫£nh b√°o"]
    )
    
    # Date range filter
    col1, col2, col3 = st.columns([2, 2, 1])
    with col1:
        start_date = st.date_input("T·ª´ ng√†y:", datetime.now() - timedelta(days=30))
    with col2:
        end_date = st.date_input("ƒê·∫øn ng√†y:", datetime.now())
    with col3:
        export_format = st.selectbox("Xu·∫•t:", ["PDF", "Excel", "CSV"])
    
    if report_type == "üìä B√°o c√°o t·ªïng quan":
        st.subheader("üìà Th·ªëng k√™ t·ªïng quan h·ªá th·ªëng")
        
        # Key metrics
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("T·ªïng ng∆∞·ªùi d√πng", "1,234", "‚ÜóÔ∏è +5.2%")
        with col2:
            st.metric("ƒê√°nh gi√° ho√†n th√†nh", "2,567", "‚ÜóÔ∏è +12.3%")
        with col3:
            st.metric("Th·ªùi gian trung b√¨nh", "15.4 ph√∫t", "‚ÜòÔ∏è -2.1%")
        with col4:
            st.metric("ƒê·ªô h√†i l√≤ng", "4.2/5", "‚ÜóÔ∏è +0.3")
        
        # Charts
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìä S·ªë l∆∞·ª£ng ƒë√°nh gi√° theo th·ªùi gian")
            # Sample chart data
            chart_data = pd.DataFrame({
                'Ng√†y': pd.date_range(start_date, end_date, freq='D'),
                'S·ªë l∆∞·ª£ng': np.random.randint(10, 50, size=(end_date - start_date).days + 1)
            })
            st.line_chart(chart_data.set_index('Ng√†y'))
            
        with col2:
            st.subheader("üéØ Ph√¢n b·ªë theo thang ƒëo")
            scale_data = pd.DataFrame({
                'Thang ƒëo': ['DASS-21', 'PHQ-9', 'GAD-7', 'EPDS', 'PSS-10'],
                'S·ªë l∆∞·ª£ng': [450, 380, 320, 180, 240]
            })
            st.bar_chart(scale_data.set_index('Thang ƒëo'))
    
    elif report_type == "üë• B√°o c√°o ng∆∞·ªùi d√πng":
        st.subheader("üë§ Th·ªëng k√™ ng∆∞·ªùi d√πng")
        
        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìä Ph√¢n b·ªë ƒë·ªô tu·ªïi")
            age_data = pd.DataFrame({
                'ƒê·ªô tu·ªïi': ['18-25', '26-35', '36-45', '46-55', '55+'],
                'S·ªë l∆∞·ª£ng': [380, 520, 290, 180, 90]
            })
            st.bar_chart(age_data.set_index('ƒê·ªô tu·ªïi'))
            
        with col2:
            st.subheader("‚ö• Ph√¢n b·ªë gi·ªõi t√≠nh")
            gender_data = {
                'Nam': 45.2,
                'N·ªØ': 52.8,
                'Kh√°c': 2.0
            }
            st.plotly_chart(px.pie(values=list(gender_data.values()), 
                                  names=list(gender_data.keys()), 
                                  title="Ph√¢n b·ªë gi·ªõi t√≠nh"))
        
        # User activity table
        st.subheader("üìã Ho·∫°t ƒë·ªông ng∆∞·ªùi d√πng g·∫ßn ƒë√¢y")
        user_activity = pd.DataFrame({
            'ID': ['U001', 'U002', 'U003', 'U004', 'U005'],
            'T√™n': ['Nguy·ªÖn A', 'Tr·∫ßn B', 'L√™ C', 'Ph·∫°m D', 'Ho√†ng E'],
            'L·∫ßn cu·ªëi': ['2024-01-15', '2024-01-14', '2024-01-14', '2024-01-13', '2024-01-12'],
            'S·ªë ƒë√°nh gi√°': [5, 3, 8, 2, 6],
            'Tr·∫°ng th√°i': ['Active', 'Active', 'Warning', 'Active', 'Inactive']
        })
        st.dataframe(user_activity, use_container_width=True)
    
    elif report_type == "üìà B√°o c√°o hi·ªáu su·∫•t":
        st.subheader("‚ö° Hi·ªáu su·∫•t h·ªá th·ªëng")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("Th·ªùi gian ph·∫£n h·ªìi TB", "245ms", "‚ÜòÔ∏è -15ms")
        with col2:
            st.metric("Uptime", "99.8%", "‚ÜóÔ∏è +0.1%")
        with col3:
            st.metric("CPU s·ª≠ d·ª•ng", "35%", "‚ÜòÔ∏è -5%")
        
        # Performance charts
        st.subheader("üìä Hi·ªáu su·∫•t theo th·ªùi gian")
        perf_data = pd.DataFrame({
            'Th·ªùi gian': pd.date_range(start_date, end_date, freq='H'),
            'Response Time (ms)': np.random.normal(250, 50, size=(end_date - start_date).days * 24 + 1),
            'CPU (%)': np.random.normal(35, 10, size=(end_date - start_date).days * 24 + 1)
        })
        st.line_chart(perf_data.set_index('Th·ªùi gian'))
    
    elif report_type == "üî¨ B√°o c√°o nghi√™n c·ª©u":
        st.subheader("üß™ D·ªØ li·ªáu nghi√™n c·ª©u")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("M·∫´u nghi√™n c·ª©u", "1,156", "‚ÜóÔ∏è +48")
        with col2:
            st.metric("ƒê·ªô tin c·∫≠y", "0.89", "‚ÜóÔ∏è +0.02")
        with col3:
            st.metric("Ho√†n th√†nh", "92.3%", "‚ÜóÔ∏è +1.5%")
        
        # Research findings
        st.subheader("üìä K·∫øt qu·∫£ nghi√™n c·ª©u ch√≠nh")
        
        col1, col2 = st.columns(2)
        with col1:
            st.write("**üéØ Ph√¢n b·ªë m·ª©c ƒë·ªô stress:**")
            stress_levels = pd.DataFrame({
                'M·ª©c ƒë·ªô': ['B√¨nh th∆∞·ªùng', 'Nh·∫π', 'Trung b√¨nh', 'N·∫∑ng', 'R·∫•t n·∫∑ng'],
                'T·ª∑ l·ªá (%)': [32.1, 28.5, 22.3, 12.8, 4.3]
            })
            st.bar_chart(stress_levels.set_index('M·ª©c ƒë·ªô'))
            
        with col2:
            st.write("**üß† T∆∞∆°ng quan gi·ªØa c√°c y·∫øu t·ªë:**")
            correlation_data = pd.DataFrame({
                'Y·∫øu t·ªë 1': ['Tu·ªïi', 'Gi·ªõi t√≠nh', 'C√¥ng vi·ªác', 'Thu nh·∫≠p'],
                'Y·∫øu t·ªë 2': ['Stress', 'Tr·∫ßm c·∫£m', 'Lo √¢u', 'Stress'],
                'H·ªá s·ªë t∆∞∆°ng quan': [0.23, -0.15, 0.31, -0.42]
            })
            st.dataframe(correlation_data)
    
    elif report_type == "‚ö†Ô∏è B√°o c√°o c·∫£nh b√°o":
        st.subheader("üö® C·∫£nh b√°o h·ªá th·ªëng")
        
        # Alert summary
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("C·∫£nh b√°o cao", "3", "‚ÜóÔ∏è +1")
        with col2:
            st.metric("C·∫£nh b√°o trung b√¨nh", "12", "‚ÜòÔ∏è -2")
        with col3:
            st.metric("Ng∆∞·ªùi d√πng r·ªßi ro cao", "8", "‚ÜóÔ∏è +3")
        with col4:
            st.metric("S·ª± c·ªë h·ªá th·ªëng", "0", "‚Üí 0")
        
        # Alerts table
        st.subheader("üìã Danh s√°ch c·∫£nh b√°o")
        alerts_data = pd.DataFrame({
            'Th·ªùi gian': ['2024-01-15 14:30', '2024-01-15 10:15', '2024-01-14 16:45'],
            'Lo·∫°i': ['User Risk', 'System Error', 'Data Anomaly'],
            'M·ª©c ƒë·ªô': ['üî¥ Cao', 'üü° Trung b√¨nh', 'üü† Trung b√¨nh'],
            'M√¥ t·∫£': [
                'Ng∆∞·ªùi d√πng U123 c√≥ ƒëi·ªÉm s·ªë DASS-21 r·∫•t cao',
                'L·ªói k·∫øt n·ªëi database trong 5 ph√∫t',
                'D·ªØ li·ªáu PHQ-9 c√≥ gi√° tr·ªã b·∫•t th∆∞·ªùng'
            ],
            'Tr·∫°ng th√°i': ['üîÑ ƒêang x·ª≠ l√Ω', '‚úÖ ƒê√£ gi·∫£i quy·∫øt', 'üëÅÔ∏è ƒêang theo d√µi']
        })
        st.dataframe(alerts_data, use_container_width=True)
    
    # Export button
    if st.button(f"üì• Xu·∫•t b√°o c√°o ({export_format})", type="primary"):
        st.success(f"‚úÖ ƒê√£ xu·∫•t b√°o c√°o {report_type} d·∫°ng {export_format}")
        st.info("üìÅ File ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o th∆∞ m·ª•c Downloads")


def system_analytics_dashboard():
    """Advanced system configuration for admins only"""
    st.markdown("### üîß C·∫•u h√¨nh h·ªá th·ªëng n√¢ng cao")
    st.warning("‚ö†Ô∏è Ch·ªâ admin c√≥ kinh nghi·ªám n√™n thay ƒë·ªïi c√°c c√†i ƒë·∫∑t n√†y!")
    
    # Load default config
    default_config = {
        "app_settings": {
            "app_name": "SOULFRIEND V3.0",
            "version": "3.0.0",
            "environment": "production",
            "debug_mode": False,
            "language": "vietnamese",
            "timezone": "Asia/Ho_Chi_Minh",
            "max_concurrent_users": 1000,
            "session_timeout_minutes": 60
        },
        "assessment_settings": {
            "enable_phq9": True,
            "enable_gad7": True,
            "enable_dass21": True,
            "enable_epds": True,
            "enable_pss10": True,
            "auto_save": True,
            "show_progress": True,
            "require_consent": True,
            "max_assessments_per_day": 10
        },
        "security_settings": {
            "data_retention_days": 365,
            "backup_enabled": True,
            "encryption_enabled": True,
            "anonymous_mode": True,
            "audit_logging": True,
            "ip_whitelist_enabled": False
        },
        "ai_settings": {
            "chatbot_enabled": True,
            "ai_insights": True,
            "predictive_analytics": True,
            "auto_recommendations": True,
            "crisis_detection": True,
            "ml_model_version": "2.1"
        },
        "research_settings": {
            "data_collection_enabled": True,
            "consent_required": True,
            "anonymization_level": "high",
            "export_formats": ["csv", "json"],
            "retention_period_days": 1095
        }
    }
    
    # Configuration tabs
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üè† App Config",
        "üìã Assessment Config", 
        "üîí Security Config",
        "ü§ñ AI Config",
        "üî¨ Research Config"
    ])
    
    with tab1:
        st.markdown("#### üè† Application Configuration")
        
        with st.form("app_config"):
            col1, col2 = st.columns(2)
            
            with col1:
                app_name = st.text_input("App Name:", value=default_config["app_settings"]["app_name"])
                version = st.text_input("Version:", value=default_config["app_settings"]["version"])
                environment = st.selectbox("Environment:", ["development", "staging", "production"], 
                                         index=2 if default_config["app_settings"]["environment"] == "production" else 0)
                
            with col2:
                debug_mode = st.checkbox("Debug Mode", value=default_config["app_settings"]["debug_mode"])
                language = st.selectbox("Language:", ["vietnamese", "english"], 
                                      index=0 if default_config["app_settings"]["language"] == "vietnamese" else 1)
                timezone = st.text_input("Timezone:", value=default_config["app_settings"]["timezone"])
            
            max_users = st.number_input("Max Concurrent Users:", min_value=1, max_value=10000, 
                                      value=default_config["app_settings"]["max_concurrent_users"])
            session_timeout = st.number_input("Session Timeout (minutes):", min_value=5, max_value=480, 
                                            value=default_config["app_settings"]["session_timeout_minutes"])
            
            if st.form_submit_button("üíæ Save App Config"):
                st.success("‚úÖ Application configuration saved!")
    
    with tab2:
        st.markdown("#### üìã Assessment Configuration")
        
        with st.form("assessment_config"):
            st.markdown("**Enable/Disable Assessments:**")
            col1, col2 = st.columns(2)
            
            with col1:
                enable_phq9 = st.checkbox("PHQ-9 Depression", value=default_config["assessment_settings"]["enable_phq9"])
                enable_gad7 = st.checkbox("GAD-7 Anxiety", value=default_config["assessment_settings"]["enable_gad7"])
                enable_dass21 = st.checkbox("DASS-21", value=default_config["assessment_settings"]["enable_dass21"])
                
            with col2:
                enable_epds = st.checkbox("EPDS Postpartum", value=default_config["assessment_settings"]["enable_epds"])
                enable_pss10 = st.checkbox("PSS-10 Stress", value=default_config["assessment_settings"]["enable_pss10"])
                
            st.markdown("**Assessment Settings:**")
            auto_save = st.checkbox("Auto Save Progress", value=default_config["assessment_settings"]["auto_save"])
            show_progress = st.checkbox("Show Progress Bar", value=default_config["assessment_settings"]["show_progress"])
            require_consent = st.checkbox("Require Consent", value=default_config["assessment_settings"]["require_consent"])
            max_per_day = st.number_input("Max Assessments per Day:", min_value=1, max_value=50, 
                                        value=default_config["assessment_settings"]["max_assessments_per_day"])
            
            if st.form_submit_button("üíæ Save Assessment Config"):
                st.success("‚úÖ Assessment configuration saved!")
    
    with tab3:
        st.markdown("#### üîí Security Configuration")
        
        with st.form("security_config"):
            col1, col2 = st.columns(2)
            
            with col1:
                data_retention = st.number_input("Data Retention (days):", min_value=30, max_value=3650, 
                                               value=default_config["security_settings"]["data_retention_days"])
                backup_enabled = st.checkbox("Backup Enabled", value=default_config["security_settings"]["backup_enabled"])
                encryption_enabled = st.checkbox("Encryption Enabled", value=default_config["security_settings"]["encryption_enabled"])
                
            with col2:
                anonymous_mode = st.checkbox("Anonymous Mode", value=default_config["security_settings"]["anonymous_mode"])
                audit_logging = st.checkbox("Audit Logging", value=default_config["security_settings"]["audit_logging"])
                ip_whitelist = st.checkbox("IP Whitelist", value=default_config["security_settings"]["ip_whitelist_enabled"])
            
            if st.form_submit_button("üíæ Save Security Config"):
                st.success("‚úÖ Security configuration saved!")
                st.info("üîÑ Some settings require restart to take effect.")
    
    with tab4:
        st.markdown("#### ü§ñ AI Configuration")
        
        with st.form("ai_config"):
            col1, col2 = st.columns(2)
            
            with col1:
                chatbot_enabled = st.checkbox("Chatbot Enabled", value=default_config["ai_settings"]["chatbot_enabled"])
                ai_insights = st.checkbox("AI Insights", value=default_config["ai_settings"]["ai_insights"])
                predictive_analytics = st.checkbox("Predictive Analytics", value=default_config["ai_settings"]["predictive_analytics"])
                
            with col2:
                auto_recommendations = st.checkbox("Auto Recommendations", value=default_config["ai_settings"]["auto_recommendations"])
                crisis_detection = st.checkbox("Crisis Detection", value=default_config["ai_settings"]["crisis_detection"])
                
            ml_version = st.selectbox("ML Model Version:", ["1.0", "2.0", "2.1", "3.0"], 
                                    index=2 if default_config["ai_settings"]["ml_model_version"] == "2.1" else 0)
            
            if st.form_submit_button("üíæ Save AI Config"):
                st.success("‚úÖ AI configuration saved!")
    
    with tab5:
        st.markdown("#### üî¨ Research Configuration")
        
        with st.form("research_config"):
            col1, col2 = st.columns(2)
            
            with col1:
                data_collection = st.checkbox("Data Collection Enabled", value=default_config["research_settings"]["data_collection_enabled"])
                consent_required = st.checkbox("Consent Required", value=default_config["research_settings"]["consent_required"])
                anonymization = st.selectbox("Anonymization Level:", ["low", "medium", "high"], 
                                           index=2 if default_config["research_settings"]["anonymization_level"] == "high" else 0)
                
            with col2:
                export_formats = st.multiselect("Export Formats:", ["csv", "json", "xlsx"], 
                                              default=default_config["research_settings"]["export_formats"])
                retention_days = st.number_input("Research Data Retention (days):", min_value=90, max_value=3650, 
                                               value=default_config["research_settings"]["retention_period_days"])
            
            if st.form_submit_button("üíæ Save Research Config"):
                st.success("‚úÖ Research configuration saved!")
    
    # Configuration export/import
    st.markdown("---")
    st.markdown("#### üì§ Export/Import Configuration")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìÑ Export Config"):
            config_json = json.dumps(default_config, indent=2, ensure_ascii=False)
            st.download_button(
                label="üíæ Download Config JSON",
                data=config_json,
                file_name=f"soulfriend_config_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    with col2:
        uploaded_file = st.file_uploader("üìÇ Import Config", type=['json'])
        if uploaded_file is not None:
            try:
                imported_config = json.load(uploaded_file)
                st.success("‚úÖ Configuration imported successfully!")
                st.json(imported_config)
            except Exception as e:
                st.error(f"‚ùå Error importing config: {e}")
    
    with col3:
        if st.button("üîÑ Reset to Defaults"):
            st.warning("‚ö†Ô∏è This will reset all settings to default values!")
            if st.button("‚úÖ Confirm Reset"):
                st.success("‚úÖ Configuration reset to defaults!")

def system_analytics_dashboard():
    """System-level analytics dashboard for admins"""
    st.markdown("### üìà Analytics h·ªá th·ªëng")
    st.markdown("**Real-time system monitoring v√† performance analytics**")
    
    # Auto-refresh toggle
    auto_refresh = st.checkbox("üîÑ Auto-refresh (30s)", value=False)
    
    if auto_refresh:
        import time
        time.sleep(30)
        st.rerun()
    
    # System Health Overview
    st.markdown("#### üîã System Health Overview")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        # Server Status
        st.metric(
            label="üñ•Ô∏è Server Status", 
            value="Online",
            delta="99.9% uptime"
        )
    
    with col2:
        # Memory Usage
        import random
        memory_usage = random.randint(60, 85)
        st.metric(
            label="üíæ Memory Usage", 
            value=f"{memory_usage}%",
            delta=f"{random.randint(-5, 5)}%" if memory_usage < 80 else "‚ö†Ô∏è High"
        )
    
    with col3:
        # CPU Usage
        cpu_usage = random.randint(20, 70)
        st.metric(
            label="‚ö° CPU Usage", 
            value=f"{cpu_usage}%",
            delta=f"{random.randint(-10, 10)}%"
        )
    
    with col4:
        # Active Sessions
        active_sessions = random.randint(50, 200)
        st.metric(
            label="üë• Active Sessions", 
            value=active_sessions,
            delta=f"{random.randint(-10, 20)}"
        )
    
    # Performance Metrics
    st.markdown("#### ‚ö° Performance Metrics")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Response Time Chart
        import plotly.graph_objects as go
        from datetime import datetime, timedelta
        
        # Generate mock response time data
        times = [datetime.now() - timedelta(hours=i) for i in range(24, 0, -1)]
        response_times = [random.uniform(0.1, 2.5) for _ in range(24)]
        
        fig_response = go.Figure()
        fig_response.add_trace(go.Scatter(
            x=times,
            y=response_times,
            mode='lines+markers',
            name='Response Time (s)',
            line=dict(color='#1f77b4', width=3)
        ))
        fig_response.update_layout(
            title="üìä Response Time (24h)",
            xaxis_title="Time",
            yaxis_title="Response Time (seconds)",
            height=300
        )
        st.plotly_chart(fig_response, use_container_width=True)
    
    with col2:
        # Error Rate Chart
        error_rates = [random.uniform(0, 5) for _ in range(24)]
        
        fig_errors = go.Figure()
        fig_errors.add_trace(go.Scatter(
            x=times,
            y=error_rates,
            mode='lines+markers',
            name='Error Rate (%)',
            line=dict(color='#d62728', width=3)
        ))
        fig_errors.update_layout(
            title="‚ùå Error Rate (24h)",
            xaxis_title="Time", 
            yaxis_title="Error Rate (%)",
            height=300
        )
        st.plotly_chart(fig_errors, use_container_width=True)
    
    # User Analytics
    st.markdown("#### üë• User Analytics")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # Daily Active Users
        daily_users = [random.randint(80, 250) for _ in range(7)]
        days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
        
        fig_users = go.Figure()
        fig_users.add_trace(go.Bar(
            x=days,
            y=daily_users,
            name='Daily Active Users',
            marker_color='#2ca02c'
        ))
        fig_users.update_layout(
            title="üìä Daily Active Users",
            xaxis_title="Day",
            yaxis_title="Users",
            height=300
        )
        st.plotly_chart(fig_users, use_container_width=True)
    
    with col2:
        # Assessment Distribution
        assessments = ['PHQ-9', 'GAD-7', 'DASS-21', 'EPDS', 'PSS-10']
        counts = [random.randint(20, 100) for _ in range(5)]
        
        fig_assess = go.Figure()
        fig_assess.add_trace(go.Pie(
            labels=assessments,
            values=counts,
            hole=0.4
        ))
        fig_assess.update_layout(
            title="üìã Assessment Distribution",
            height=300
        )
        st.plotly_chart(fig_assess, use_container_width=True)
    
    with col3:
        # Geographic Distribution
        locations = ['HCM City', 'Hanoi', 'Da Nang', 'Can Tho', 'Others']
        geo_counts = [random.randint(30, 120) for _ in range(5)]
        
        fig_geo = go.Figure()
        fig_geo.add_trace(go.Bar(
            x=locations,
            y=geo_counts,
            name='Users by Location',
            marker_color='#ff7f0e'
        ))
        fig_geo.update_layout(
            title="üåç Geographic Distribution",
            xaxis_title="Location",
            yaxis_title="Users",
            height=300
        )
        st.plotly_chart(fig_geo, use_container_width=True)
    
    # System Resources
    st.markdown("#### üíª System Resources")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("**üóÑÔ∏è Database Status**")
        st.success("‚úÖ Database: Online")
        st.info(f"üìä Records: {random.randint(10000, 50000):,}")
        st.info(f"üíæ Size: {random.randint(500, 2000)} MB")
        st.info(f"üîÑ Backup: {random.choice(['Today 03:00', 'Yesterday 03:00'])}")
    
    with col2:
        st.markdown("**üåê Network Status**")
        st.success("‚úÖ Network: Stable")
        st.info(f"üì° Bandwidth: {random.randint(80, 95)}% available")
        st.info(f"üîó Connections: {random.randint(100, 500)}")
        st.info(f"üìà Throughput: {random.randint(50, 200)} MB/s")
    
    with col3:
        st.markdown("**üîí Security Status**")
        st.success("‚úÖ Security: Protected")
        st.info(f"üõ°Ô∏è Firewall: Active")
        st.info(f"üîê SSL: Valid until {(datetime.now() + timedelta(days=90)).strftime('%Y-%m-%d')}")
        st.info(f"üîç Last scan: {random.choice(['1 hour ago', '2 hours ago', '30 min ago'])}")
    
    # Recent System Events
    st.markdown("#### üìã Recent System Events")
    
    events = [
        {"time": "10:30", "type": "INFO", "message": "System backup completed successfully"},
        {"time": "09:45", "type": "WARNING", "message": f"High memory usage detected: {random.randint(80, 90)}%"},
        {"time": "09:20", "type": "INFO", "message": f"New user registration: {random.randint(1, 10)} users"},
        {"time": "08:55", "type": "SUCCESS", "message": "Database optimization completed"},
        {"time": "08:30", "type": "INFO", "message": f"Assessment completion: {random.randint(10, 50)} assessments"},
        {"time": "08:00", "type": "INFO", "message": "Daily system health check: All systems normal"}
    ]
    
    for event in events:
        if event["type"] == "WARNING":
            st.warning(f"‚è∞ {event['time']} - {event['message']}")
        elif event["type"] == "SUCCESS":
            st.success(f"‚è∞ {event['time']} - {event['message']}")
        else:
            st.info(f"‚è∞ {event['time']} - {event['message']}")
    
    # Export System Report
    st.markdown("---")
    st.markdown("#### üì§ Export System Report")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä Export Performance Report"):
            # Mock report data
            report_data = {
                "generated_at": datetime.now().isoformat(),
                "system_health": "Good",
                "uptime": "99.9%",
                "active_users": active_sessions,
                "memory_usage": f"{memory_usage}%",
                "cpu_usage": f"{cpu_usage}%",
                "recent_events": events
            }
            
            report_json = json.dumps(report_data, indent=2, ensure_ascii=False)
            st.download_button(
                label="üíæ Download Report",
                data=report_json,
                file_name=f"system_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    with col2:
        if st.button("üìà Export Analytics Data"):
            analytics_data = {
                "response_times": response_times,
                "error_rates": error_rates,
                "daily_users": daily_users,
                "assessment_counts": dict(zip(assessments, counts)),
                "geographic_data": dict(zip(locations, geo_counts))
            }
            
            analytics_json = json.dumps(analytics_data, indent=2, ensure_ascii=False)
            st.download_button(
                label="üíæ Download Analytics",
                data=analytics_json,
                file_name=f"analytics_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    with col3:
        if st.button("üîÑ Refresh All Data"):
            st.success("‚úÖ All data refreshed!")
            st.rerun()

def system_settings():
    """System settings and configuration"""
    st.markdown("### ‚öôÔ∏è C√†i ƒë·∫∑t h·ªá th·ªëng")
    
    # Application settings
    st.markdown("#### üè† C√†i ƒë·∫∑t ·ª©ng d·ª•ng")
    
    with st.form("app_settings"):
        app_title = st.text_input("T√™n ·ª©ng d·ª•ng:", value="SOULFRIEND")
        maintenance_mode = st.checkbox("Ch·∫ø ƒë·ªô b·∫£o tr√¨")
        max_daily_assessments = st.number_input("S·ªë ƒë√°nh gi√° t·ªëi ƒëa m·ªói ng√†y:", min_value=1, value=100)
        
        # Emergency contacts
        st.markdown("##### üÜò Li√™n h·ªá kh·∫©n c·∫•p")
        hotline = st.text_input("Hotline:", value="1800-1567")
        emergency = st.text_input("C·∫•p c·ª©u:", value="115")
        counseling = st.text_input("T∆∞ v·∫•n:", value="1900-555-555")
        
        if st.form_submit_button("üíæ L∆∞u c√†i ƒë·∫∑t"):
            st.success("‚úÖ ƒê√£ l∆∞u c√†i ƒë·∫∑t!")
    
    # Database management
    st.markdown("#### üóÑÔ∏è Qu·∫£n l√Ω d·ªØ li·ªáu")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üóÇÔ∏è Sao l∆∞u d·ªØ li·ªáu"):
            st.info("ƒêang t·∫°o b·∫£n sao l∆∞u...")
            # Implementation would backup questionnaire configs, user data, etc.
    
    with col2:
        if st.button("üîÑ Kh√¥i ph·ª•c d·ªØ li·ªáu"):
            st.warning("T√≠nh nƒÉng kh√¥i ph·ª•c c·∫ßn ƒë∆∞·ª£c th·ª±c hi·ªán c·∫©n tr·ªçng")
    
    with col3:
        if st.button("üßπ D·ªçn d·∫πp d·ªØ li·ªáu"):
            st.info("D·ªçn d·∫πp d·ªØ li·ªáu c≈© v√† log files")

def admin_panel():
    """Main admin panel interface"""
    if not verify_admin_login():
        return
    
    # Admin header
    st.markdown("# üîß B·∫£ng ƒëi·ªÅu khi·ªÉn qu·∫£n tr·ªã")
    st.markdown(f"Xin ch√†o **{st.session_state.get('admin_username', 'Admin')}**!")
    
    # Quick access to other admin tools
    st.subheader("üîó C√¥ng c·ª• qu·∫£n tr·ªã")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä B·∫£ng ƒëi·ªÅu khi·ªÉn ph√¢n t√≠ch", width="stretch"):
            st.switch_page("analytics_dashboard.py")
    
    with col2:
        if st.button("‚öôÔ∏è C·∫•u h√¨nh h·ªá th·ªëng", width="stretch"):
            st.switch_page("config_manager.py")
    
    with col3:
        if st.button("üè† V·ªÅ trang ch√≠nh", width="stretch"):
            st.switch_page("SOULFRIEND.py")

    st.markdown("---")
    
    # Logout button
    admin_logout()
    
    # Admin navigation
    admin_tab = st.sidebar.selectbox(
        "üìã Ch·ªçn ch·ª©c nƒÉng:",
        ["üìä Th·ªëng k√™", "üìà Analytics h·ªá th·ªëng", "üìù Qu·∫£n l√Ω thang ƒëo", "üë• Ng∆∞·ªùi d√πng", "üìã B√°o c√°o t·ªïng th·ªÉ", "üî¨ D·ªØ li·ªáu nghi√™n c·ª©u", "‚öôÔ∏è C√†i ƒë·∫∑t", "üîß C·∫•u h√¨nh h·ªá th·ªëng"]
    )
    
    # Display selected admin function
    if admin_tab == "üìä Th·ªëng k√™":
        analytics_dashboard()
    elif admin_tab == "üìà Analytics h·ªá th·ªëng":
        system_analytics_dashboard()
    elif admin_tab == "üìù Qu·∫£n l√Ω thang ƒëo":
        questionnaire_manager()
    elif admin_tab == "üë• Ng∆∞·ªùi d√πng":
        user_management()
    elif admin_tab == "ÔøΩ B√°o c√°o t·ªïng th·ªÉ":
        admin_reports_dashboard()
    elif admin_tab == "ÔøΩüî¨ D·ªØ li·ªáu nghi√™n c·ª©u":
        research_data_dashboard()
    elif admin_tab == "‚öôÔ∏è C√†i ƒë·∫∑t":
        system_settings()
    elif admin_tab == "üîß C·∫•u h√¨nh h·ªá th·ªëng":
        advanced_system_config()

if __name__ == "__main__":
    admin_panel()
