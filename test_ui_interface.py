#!/usr/bin/env python3
"""
TEST GIAO DI·ªÜN V√Ä KH·∫¢ NƒÇNG HI·ªÇN TH·ªä
Ki·ªÉm tra to√†n di·ªán kh·∫£ nƒÉng v·∫≠n h√†nh, hi·ªÉn th·ªã v√† giao di·ªán ·ª©ng d·ª•ng
"""

import sys
import os
sys.path.append('/workspaces/Mentalhealth')

def test_ui_components():
    """Test c√°c components giao di·ªán"""
    print("üé® KI·ªÇM TRA C√ÅC COMPONENTS GIAO DI·ªÜN")
    print("=" * 60)
    
    try:
        # Test UI components
        from components.ui import (
            display_logo, 
            app_header, 
            show_disclaimer,
            create_metric_card,
            create_info_card,
            create_result_card,
            create_progress_indicator
        )
        print("‚úÖ UI Components: display_logo, app_header, show_disclaimer")
        print("‚úÖ UI Cards: metric_card, info_card, result_card")
        print("‚úÖ UI Progress: progress_indicator")
        
        # Test advanced UI components
        try:
            from components.ui_advanced import (
                create_enhanced_sidebar,
                display_questionnaire_interface,
                show_results_with_animation
            )
            print("‚úÖ Advanced UI: enhanced_sidebar, questionnaire_interface")
        except ImportError as e:
            print(f"‚ö†Ô∏è Advanced UI components kh√¥ng c√≥ s·∫µn: {str(e)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå UI Components test failed: {str(e)}")
        return False

def test_questionnaire_display():
    """Test hi·ªÉn th·ªã questionnaire"""
    print("\nüìã KI·ªÇM TRA HI·ªÇN TH·ªä QUESTIONNAIRE")
    print("=" * 60)
    
    try:
        # Load t·∫•t c·∫£ questionnaires
        from components.questionnaires import (
            load_dass21_enhanced_vi,
            load_phq9_enhanced_vi,
            load_gad7_enhanced_vi,
            load_epds_enhanced_vi,
            load_pss10_enhanced_vi
        )
        
        questionnaires = {
            "DASS-21": load_dass21_enhanced_vi,
            "PHQ-9": load_phq9_enhanced_vi,
            "GAD-7": load_gad7_enhanced_vi,
            "EPDS": load_epds_enhanced_vi,
            "PSS-10": load_pss10_enhanced_vi
        }
        
        display_tests = []
        
        for name, loader in questionnaires.items():
            config = loader()
            
            # Test c·∫•u tr√∫c hi·ªÉn th·ªã
            has_title = 'title' in config
            has_items = 'items' in config and len(config['items']) > 0
            has_options = all('options' in item for item in config['items'])
            
            print(f"\nüìÑ {name}:")
            print(f"   ‚úÖ Title: {config.get('title', 'N/A')}")
            print(f"   ‚úÖ Questions: {len(config.get('items', []))}")
            print(f"   ‚úÖ Options per question: {len(config['items'][0].get('options', [])) if config.get('items') else 0}")
            
            # Test sample question display
            if config.get('items'):
                sample_q = config['items'][0]
                print(f"   üìù Sample question: {sample_q.get('question', 'N/A')[:50]}...")
                print(f"   üìä Sample options: {len(sample_q.get('options', []))} choices")
            
            display_tests.append(has_title and has_items and has_options)
        
        return all(display_tests)
        
    except Exception as e:
        print(f"‚ùå Questionnaire display test failed: {str(e)}")
        return False

def test_scoring_display():
    """Test hi·ªÉn th·ªã k·∫øt qu·∫£ scoring"""
    print("\nüéØ KI·ªÇM TRA HI·ªÇN TH·ªä K·∫æT QU·∫¢ SCORING")
    print("=" * 60)
    
    try:
        from components.scoring import (
            score_dass21_enhanced,
            score_phq9_enhanced,
            score_gad7_enhanced,
            score_epds_enhanced,
            score_pss10_enhanced
        )
        
        from components.questionnaires import (
            load_dass21_enhanced_vi,
            load_phq9_enhanced_vi,
            load_gad7_enhanced_vi,
            load_epds_enhanced_vi,
            load_pss10_enhanced_vi
        )
        
        test_scenarios = [
            ("DASS-21", load_dass21_enhanced_vi, score_dass21_enhanced, 21, {i: 1 for i in range(1, 22)}),
            ("PHQ-9", load_phq9_enhanced_vi, score_phq9_enhanced, 9, {i: 2 for i in range(1, 10)}),
            ("GAD-7", load_gad7_enhanced_vi, score_gad7_enhanced, 7, {i: 1 for i in range(1, 8)}),
            ("EPDS", load_epds_enhanced_vi, score_epds_enhanced, 10, {i: 2 for i in range(1, 11)}),
            ("PSS-10", load_pss10_enhanced_vi, score_pss10_enhanced, 10, {i: 3 for i in range(1, 11)})
        ]
        
        scoring_tests = []
        
        for name, loader, scorer, num_q, answers in test_scenarios:
            config = loader()
            result = scorer(answers, config)
            
            print(f"\nüéØ {name} Scoring Results:")
            print(f"   ‚úÖ Total Score: {result.total_score}")
            print(f"   ‚úÖ Severity Level: {result.severity_level}")
            print(f"   ‚úÖ Subscales: {list(result.subscales.keys())}")
            print(f"   ‚úÖ Interpretation: {result.interpretation[:100]}...")
            print(f"   ‚úÖ Recommendations: {len(result.recommendations)} items")
            
            # Test display structure
            has_score = hasattr(result, 'total_score')
            has_severity = hasattr(result, 'severity_level')
            has_interpretation = hasattr(result, 'interpretation')
            has_recommendations = hasattr(result, 'recommendations')
            
            scoring_tests.append(has_score and has_severity and has_interpretation and has_recommendations)
        
        return all(scoring_tests)
        
    except Exception as e:
        print(f"‚ùå Scoring display test failed: {str(e)}")
        return False

def test_streamlit_compatibility():
    """Test kh·∫£ nƒÉng t∆∞∆°ng th√≠ch v·ªõi Streamlit"""
    print("\nüåê KI·ªÇM TRA T∆Ø∆†NG TH√çCH STREAMLIT")
    print("=" * 60)
    
    try:
        import streamlit as st
        print("‚úÖ Streamlit import: OK")
        
        # Test c√°c Streamlit components ch√≠nh
        streamlit_functions = [
            'title', 'header', 'subheader', 'markdown',
            'selectbox', 'radio', 'button', 'sidebar',
            'columns', 'container', 'expander'
        ]
        
        available_functions = []
        for func in streamlit_functions:
            if hasattr(st, func):
                available_functions.append(func)
                print(f"‚úÖ st.{func}: Available")
            else:
                print(f"‚ùå st.{func}: Not available")
        
        # Test session state
        print(f"‚úÖ Session state support: {'session_state' in dir(st)}")
        
        return len(available_functions) >= len(streamlit_functions) * 0.8  # At least 80% available
        
    except Exception as e:
        print(f"‚ùå Streamlit compatibility test failed: {str(e)}")
        return False

def test_soulfriend_structure():
    """Test c·∫•u tr√∫c v√† logic c·ªßa SOULFRIEND.py"""
    print("\nüß† KI·ªÇM TRA C·∫§U TR√öC SOULFRIEND.PY")
    print("=" * 60)
    
    try:
        with open('/workspaces/Mentalhealth/SOULFRIEND.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Test c√°c th√†nh ph·∫ßn ch√≠nh
        tests = {
            "Questionnaire Selection": "selectbox" in content and "questionnaire" in content.lower(),
            "Sidebar Navigation": "sidebar" in content,
            "Question Display": "radio" in content or "selectbox" in content,
            "Result Display": "result" in content.lower(),
            "Session State": "session_state" in content,
            "Multi-page Support": "page" in content.lower(),
            "Vietnamese Support": "utf-8" in content or "ti·∫øng vi·ªát" in content.lower(),
            "Emergency Protocol": "kh·∫©n c·∫•p" in content.lower() or "emergency" in content.lower()
        }
        
        passed_tests = 0
        for test_name, condition in tests.items():
            status = "‚úÖ" if condition else "‚ùå"
            print(f"   {status} {test_name}: {'PASS' if condition else 'FAIL'}")
            if condition:
                passed_tests += 1
        
        print(f"\nüìä SOULFRIEND Structure Score: {passed_tests}/{len(tests)} ({passed_tests/len(tests)*100:.1f}%)")
        
        return passed_tests >= len(tests) * 0.7  # At least 70% pass
        
    except Exception as e:
        print(f"‚ùå SOULFRIEND structure test failed: {str(e)}")
        return False

def test_responsive_design():
    """Test thi·∫øt k·∫ø responsive v√† accessibility"""
    print("\nüì± KI·ªÇM TRA THI·∫æT K·∫æ RESPONSIVE")
    print("=" * 60)
    
    try:
        # Ki·ªÉm tra CSS v√† styling
        css_files = [
            '/workspaces/Mentalhealth/mental-health-support-app/mental-health-support-app/assets/styles.css'
        ]
        
        css_features = []
        
        for css_file in css_files:
            try:
                with open(css_file, 'r', encoding='utf-8') as f:
                    css_content = f.read()
                
                # Test responsive features
                responsive_features = {
                    "Media Queries": "@media" in css_content,
                    "Flexbox": "flex" in css_content,
                    "Grid": "grid" in css_content,
                    "Mobile Support": "mobile" in css_content.lower(),
                    "Accessibility": "aria" in css_content.lower(),
                    "Color Scheme": "color" in css_content.lower(),
                    "Typography": "font" in css_content.lower()
                }
                
                for feature, found in responsive_features.items():
                    status = "‚úÖ" if found else "‚ùå"
                    print(f"   {status} {feature}: {'Found' if found else 'Not found'}")
                    css_features.append(found)
                    
            except FileNotFoundError:
                print(f"   ‚ö†Ô∏è CSS file not found: {css_file}")
        
        # Test UI components for accessibility
        from components.ui import DISCLAIMER
        has_disclaimer = len(DISCLAIMER) > 0
        print(f"   ‚úÖ Disclaimer/Warning: {'Present' if has_disclaimer else 'Missing'}")
        
        return len([f for f in css_features if f]) >= len(css_features) * 0.5
        
    except Exception as e:
        print(f"‚ùå Responsive design test failed: {str(e)}")
        return False

def run_complete_ui_test():
    """Ch·∫°y test to√†n di·ªán giao di·ªán v√† kh·∫£ nƒÉng v·∫≠n h√†nh"""
    print("üöÄ KI·ªÇM TRA TO√ÄN DI·ªÜN GIAO DI·ªÜN V√Ä KH·∫¢ NƒÇNG V·∫¨N H√ÄNH")
    print("=" * 80)
    
    tests = [
        ("UI Components", test_ui_components),
        ("Questionnaire Display", test_questionnaire_display),
        ("Scoring Display", test_scoring_display),
        ("Streamlit Compatibility", test_streamlit_compatibility),
        ("SOULFRIEND Structure", test_soulfriend_structure),
        ("Responsive Design", test_responsive_design)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüîç Running {test_name}...")
        try:
            result = test_func()
            results.append(result)
            status = "PASS ‚úÖ" if result else "FAIL ‚ùå"
            print(f"   {test_name}: {status}")
        except Exception as e:
            print(f"   {test_name}: ERROR ‚ùå - {str(e)}")
            results.append(False)
    
    # Final summary
    passed = sum(results)
    total = len(results)
    percentage = (passed / total) * 100
    
    print("\n" + "=" * 80)
    print("üìä K·∫æT QU·∫¢ T·ªîNG QUAN TEST GIAO DI·ªÜN")
    print("=" * 80)
    
    for i, (test_name, _) in enumerate(tests):
        status = "‚úÖ PASS" if results[i] else "‚ùå FAIL"
        print(f"   {status} {test_name}")
    
    print(f"\nüéØ T·ªîNG K·∫æT: {passed}/{total} tests passed ({percentage:.1f}%)")
    
    if percentage >= 80:
        print("üéâ ·ª®NG D·ª§NG S·∫¥N S√ÄNG CHO PRODUCTION!")
        print("üöÄ Giao di·ªán v√† kh·∫£ nƒÉng v·∫≠n h√†nh: EXCELLENT")
    elif percentage >= 60:
        print("‚úÖ ·ª®ng d·ª•ng c∆° b·∫£n ho·∫°t ƒë·ªông t·ªët")
        print("‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán m·ªôt s·ªë th√†nh ph·∫ßn")
    else:
        print("‚ùå C·∫ßn kh·∫Øc ph·ª•c nhi·ªÅu v·∫•n ƒë·ªÅ tr∆∞·ªõc khi deploy")
    
    return percentage >= 60

if __name__ == "__main__":
    success = run_complete_ui_test()
    
    print("\n" + "=" * 80)
    print("üéä HO√ÄN TH√ÄNH KI·ªÇM TRA GIAO DI·ªÜN V√Ä V·∫¨N H√ÄNH")
    print("=" * 80)
    
    if success:
        print("üü¢ T√åNH TR·∫†NG: S·∫¥N S√ÄNG V·∫¨N H√ÄNH")
        print("üéØ Khuy·∫øn ngh·ªã: C√≥ th·ªÉ deploy v√† s·ª≠ d·ª•ng")
    else:
        print("üü° T√åNH TR·∫†NG: C·∫¶N C·∫¢I THI·ªÜN")
        print("üîß Khuy·∫øn ngh·ªã: Kh·∫Øc ph·ª•c c√°c v·∫•n ƒë·ªÅ ƒë∆∞·ª£c ph√°t hi·ªán")
