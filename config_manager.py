"""
SOULFRIEND Configuration Manager
Settings and configuration interface
"""

import streamlit as st
import json
import os
import sys

# Add project root to path
sys.path.append('/workspaces/Mentalhealth')

from components.ui import load_css, app_header

# Page configuration
st.set_page_config(
    page_title="SOULFRIEND Config",
    page_icon="‚öôÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load custom CSS
try:
    load_css()
except:
    pass

# Header
app_header()

# Configuration Manager
def config_manager():
    st.title("‚öôÔ∏è C·∫•u h√¨nh h·ªá th·ªëng")
    
    # Navigation tabs
    tab1, tab2, tab3, tab4 = st.tabs([
        "üé® Giao di·ªán",
        "üìä ƒê√°nh gi√°",
        "üîî Th√¥ng b√°o",
        "üîí B·∫£o m·∫≠t"
    ])
    
    with tab1:
        st.header("C·∫•u h√¨nh giao di·ªán")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Ch·ªß ƒë·ªÅ")
            theme = st.selectbox(
                "Ch·ªçn ch·ªß ƒë·ªÅ:",
                ["S√°ng", "T·ªëi", "T·ª± ƒë·ªông"],
                index=0
            )
            
            st.subheader("M√†u s·∫Øc ch√≠nh")
            primary_color = st.color_picker(
                "M√†u ch√≠nh:",
                "#FF6B6B"
            )
            
            st.subheader("Font ch·ªØ")
            font_family = st.selectbox(
                "Font ch·ªØ:",
                ["Arial", "Helvetica", "Times New Roman", "Calibri"],
                index=0
            )
            
        with col2:
            st.subheader("B·ªë c·ª•c")
            layout_style = st.selectbox(
                "Ki·ªÉu b·ªë c·ª•c:",
                ["R·ªông", "Trung t√¢m", "Compact"],
                index=1
            )
            
            sidebar_default = st.selectbox(
                "Thanh b√™n m·∫∑c ƒë·ªãnh:",
                ["M·ªü r·ªông", "Thu g·ªçn", "·∫®n"],
                index=0
            )
            
            st.subheader("Ng√¥n ng·ªØ")
            language = st.selectbox(
                "Ng√¥n ng·ªØ giao di·ªán:",
                ["Ti·∫øng Vi·ªát", "English"],
                index=0
            )
        
        if st.button("üíæ L∆∞u c·∫•u h√¨nh giao di·ªán"):
            config = {
                "theme": theme,
                "primary_color": primary_color,
                "font_family": font_family,
                "layout_style": layout_style,
                "sidebar_default": sidebar_default,
                "language": language
            }
            st.success("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh giao di·ªán!")
    
    with tab2:
        st.header("C·∫•u h√¨nh ƒë√°nh gi√°")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Thang ƒëo")
            
            # DASS-21 settings
            st.write("**DASS-21**")
            dass_cutoffs = st.checkbox("Hi·ªÉn th·ªã ng∆∞·ª°ng c·∫Øt", True)
            dass_percentile = st.checkbox("Hi·ªÉn th·ªã ph·∫ßn trƒÉm", True)
            
            # PHQ-9 settings
            st.write("**PHQ-9**")
            phq_severity = st.checkbox("Hi·ªÉn th·ªã m·ª©c ƒë·ªô nghi√™m tr·ªçng", True)
            phq_risk = st.checkbox("C·∫£nh b√°o r·ªßi ro t·ª± t·ª≠", True)
            
            # GAD-7 settings
            st.write("**GAD-7**")
            gad_interpretation = st.checkbox("Gi·∫£i th√≠ch k·∫øt qu·∫£", True)
            
        with col2:
            st.subheader("B√°o c√°o")
            
            report_format = st.selectbox(
                "ƒê·ªãnh d·∫°ng b√°o c√°o m·∫∑c ƒë·ªãnh:",
                ["PDF", "Word", "HTML"],
                index=0
            )
            
            include_charts = st.checkbox("Bao g·ªìm bi·ªÉu ƒë·ªì", True)
            include_recommendations = st.checkbox("Bao g·ªìm khuy·∫øn ngh·ªã", True)
            include_resources = st.checkbox("Bao g·ªìm t√†i nguy√™n", True)
            
            st.subheader("L∆∞u tr·ªØ")
            auto_save = st.checkbox("T·ª± ƒë·ªông l∆∞u k·∫øt qu·∫£", False)
            save_duration = st.selectbox(
                "Th·ªùi gian l∆∞u tr·ªØ:",
                ["30 ng√†y", "90 ng√†y", "1 nƒÉm", "V√¥ th·ªùi h·∫°n"],
                index=1
            )
        
        if st.button("üíæ L∆∞u c·∫•u h√¨nh ƒë√°nh gi√°"):
            st.success("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh ƒë√°nh gi√°!")
    
    with tab3:
        st.header("C·∫•u h√¨nh th√¥ng b√°o")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("Email th√¥ng b√°o")
            email_notifications = st.checkbox("K√≠ch ho·∫°t email", False)
            admin_email = st.text_input(
                "Email qu·∫£n tr·ªã:",
                placeholder="admin@soulfriend.vn"
            )
            
            st.subheader("C·∫£nh b√°o")
            high_risk_alert = st.checkbox("C·∫£nh b√°o r·ªßi ro cao", True)
            crisis_alert = st.checkbox("C·∫£nh b√°o kh·ªßng ho·∫£ng", True)
            
        with col2:
            st.subheader("T·ª± ƒë·ªông h√≥a")
            auto_follow_up = st.checkbox("Theo d√µi t·ª± ƒë·ªông", False)
            follow_up_days = st.number_input(
                "S·ªë ng√†y theo d√µi:",
                min_value=1,
                max_value=30,
                value=7
            )
            
            reminder_enabled = st.checkbox("Nh·∫Øc nh·ªü ƒë√°nh gi√°", False)
            reminder_frequency = st.selectbox(
                "T·∫ßn su·∫•t nh·∫Øc nh·ªü:",
                ["H√†ng tu·∫ßn", "Hai tu·∫ßn", "H√†ng th√°ng"],
                index=1
            )
        
        if st.button("üíæ L∆∞u c·∫•u h√¨nh th√¥ng b√°o"):
            st.success("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh th√¥ng b√°o!")
    
    with tab4:
        st.header("C·∫•u h√¨nh b·∫£o m·∫≠t")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("X√°c th·ª±c")
            require_login = st.checkbox("Y√™u c·∫ßu ƒëƒÉng nh·∫≠p", False)
            session_timeout = st.selectbox(
                "Th·ªùi gian phi√™n:",
                ["30 ph√∫t", "1 gi·ªù", "2 gi·ªù", "4 gi·ªù"],
                index=1
            )
            
            st.subheader("M√£ h√≥a d·ªØ li·ªáu")
            encrypt_data = st.checkbox("M√£ h√≥a d·ªØ li·ªáu nh·∫°y c·∫£m", True)
            encryption_level = st.selectbox(
                "M·ª©c ƒë·ªô m√£ h√≥a:",
                ["AES-128", "AES-256"],
                index=1
            )
            
        with col2:
            st.subheader("Ki·ªÉm to√°n")
            audit_log = st.checkbox("Nh·∫≠t k√Ω ki·ªÉm to√°n", True)
            log_retention = st.selectbox(
                "Th·ªùi gian l∆∞u log:",
                ["30 ng√†y", "90 ng√†y", "1 nƒÉm"],
                index=2
            )
            
            st.subheader("Quy·ªÅn ri√™ng t∆∞")
            anonymize_data = st.checkbox("·∫®n danh h√≥a d·ªØ li·ªáu", True)
            gdpr_compliance = st.checkbox("Tu√¢n th·ªß GDPR", True)
        
        if st.button("üíæ L∆∞u c·∫•u h√¨nh b·∫£o m·∫≠t"):
            st.success("‚úÖ ƒê√£ l∆∞u c·∫•u h√¨nh b·∫£o m·∫≠t!")
    
    # Export/Import configuration
    st.markdown("---")
    st.subheader("üîÑ Sao l∆∞u & Kh√¥i ph·ª•c")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üì§ Xu·∫•t c·∫•u h√¨nh"):
            # Sample config for demo
            config = {
                "ui": {"theme": "light", "language": "vi"},
                "assessment": {"format": "pdf", "charts": True},
                "notifications": {"email": False, "alerts": True},
                "security": {"encryption": "AES-256", "audit": True}
            }
            st.download_button(
                "‚¨áÔ∏è T·∫£i file c·∫•u h√¨nh",
                data=json.dumps(config, indent=2, ensure_ascii=False),
                file_name="soulfriend_config.json",
                mime="application/json"
            )
    
    with col2:
        uploaded_file = st.file_uploader(
            "üì• Nh·∫≠p c·∫•u h√¨nh",
            type="json",
            help="T·∫£i file c·∫•u h√¨nh ƒë√£ xu·∫•t tr∆∞·ªõc ƒë√≥"
        )
        if uploaded_file is not None:
            try:
                config = json.load(uploaded_file)
                st.success("‚úÖ ƒê√£ t·∫£i c·∫•u h√¨nh th√†nh c√¥ng!")
                st.json(config)
            except:
                st.error("‚ùå File c·∫•u h√¨nh kh√¥ng h·ª£p l·ªá!")
    
    with col3:
        if st.button("üîÑ Kh√¥i ph·ª•c m·∫∑c ƒë·ªãnh"):
            if st.button("‚úÖ X√°c nh·∫≠n kh√¥i ph·ª•c", key="confirm_reset"):
                st.success("‚úÖ ƒê√£ kh√¥i ph·ª•c c·∫•u h√¨nh m·∫∑c ƒë·ªãnh!")

# Main function
def main():
    config_manager()

if __name__ == "__main__":
    main()
