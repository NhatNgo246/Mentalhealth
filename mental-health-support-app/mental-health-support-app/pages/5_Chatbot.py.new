import os
import requests
import streamlit as st
from dotenv import load_dotenv
import logging
import json

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Constants
API_ENDPOINTS = {
    "openai": "https://api.openai.com/v1/chat/completions",
    "aiml": "https://aimlapi.com/api/chat"
}
DEFAULT_MODELS = {
    "openai": "gpt-3.5-turbo",
    "aiml": "gpt-3.5-turbo"
}
FALLBACK_MODELS = {
    "openai": "gpt-3.5-turbo-16k",
    "aiml": "gpt-3.5-turbo-16k"
}
MAX_RETRIES = 3
TIMEOUT = 30

# C·∫•u h√¨nh API m·∫∑c ƒë·ªãnh
DEFAULT_API = "aiml"

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()
logger.info("Loaded environment variables")

def call_chat_api(message, api_provider=DEFAULT_API, retry_count=0, use_fallback=False):
    """
    G·ªçi Chat API v·ªõi retry v√† x·ª≠ l√Ω l·ªói
    """
    # L·∫•y API key t∆∞∆°ng ·ª©ng v·ªõi provider
    api_keys = {
        "openai": os.environ.get("OPENAI_API_KEY"),
        "aiml": os.environ.get("AIML_API_KEY")
    }
    api_key = api_keys[api_provider]
    
    if not api_key:
        raise ValueError(f"{api_provider.upper()}_API_KEY not configured")

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    # Chu·∫©n b·ªã system prompt
    system_prompt = (
        "B·∫°n l√† tr·ª£ l√Ω h·ªó tr·ª£ tinh t·∫ø v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn, n√≥i ti·∫øng Vi·ªát. "
        "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, ƒë·ªìng c·∫£m v√† khuy·∫øn kh√≠ch. "
        "Kh√¥ng thay th·∫ø t∆∞ v·∫•n chuy√™n m√¥n. "
        "N·∫øu ph√°t hi·ªán d·∫•u hi·ªáu nguy c∆° cao, lu√¥n nh·∫Øc t√¨m h·ªó tr·ª£ y t·∫ø."
    )
    
    data = {
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": message}
        ],
        "model": FALLBACK_MODELS[api_provider] if use_fallback else DEFAULT_MODELS[api_provider],
        "temperature": 0.7,
        "max_tokens": 300
    }

    # ƒêi·ªÅu ch·ªânh format d·ªØ li·ªáu cho AIML API
    if api_provider == "aiml":
        data = {
            "prompt": message,
            "system_prompt": system_prompt,
            "temperature": 0.7,
            "max_tokens": 300
        }
    
    try:
        response = requests.post(
            API_ENDPOINTS[api_provider],
            headers=headers,
            json=data,
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            if api_provider == "aiml":
                return response.json()["response"]
            else:
                return response.json()["choices"][0]["message"]["content"]
        elif response.status_code == 404 and not use_fallback:
            logger.warning(f"Model not found, trying fallback model")
            return call_chat_api(message, api_provider, retry_count, use_fallback=True)
        elif response.status_code in [429, 500, 502, 503, 504] and retry_count < MAX_RETRIES:
            logger.warning(f"API error {response.status_code}, retrying... ({retry_count + 1}/{MAX_RETRIES})")
            import time
            time.sleep(2 ** retry_count)  # Exponential backoff
            return call_chat_api(message, api_provider, retry_count + 1, use_fallback)
        else:
            error_response = response.json() if response.text else {"message": "Unknown error"}
            raise requests.exceptions.RequestException(
                f"API error: {response.status_code} - {json.dumps(error_response, ensure_ascii=False)}")
    
    except requests.exceptions.Timeout:
        if retry_count < MAX_RETRIES:
            logger.warning(f"Request timeout, retrying... ({retry_count + 1}/{MAX_RETRIES})")
            return call_chat_api(message, api_provider, retry_count + 1, use_fallback)
        raise
    
    except json.JSONDecodeError as e:
        raise requests.exceptions.RequestException(f"Invalid JSON response: {str(e)}")
    
    except Exception as e:
        raise requests.exceptions.RequestException(f"Unexpected error: {str(e)}")

def get_default_response():
    """
    Tr·∫£ v·ªÅ g·ª£i √Ω m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ API
    """
    return [
        "- Thu nh·ªè m·ª•c ti√™u h√¥m nay, t·∫≠p trung t·ª´ng b∆∞·ªõc nh·ªè.",
        "- Th·ªü 4-4-6 trong 5 ph√∫t (4s h√≠t v√†o, 4s gi·ªØ, 6s th·ªü ra).",
        "- Li√™n h·ªá ng∆∞·ªùi th√¢n tin c·∫≠y ho·∫∑c chuy√™n gia n·∫øu c·∫ßn.",
        "- ƒê·∫£m b·∫£o ngh·ªâ ng∆°i v√† gi·∫•c ng·ªß ƒë·∫ßy ƒë·ªß.",
        "- D√†nh th·ªùi gian cho ho·∫°t ƒë·ªông th∆∞ gi√£n y√™u th√≠ch."
    ]

# C·∫•u h√¨nh giao di·ªán
st.set_page_config(page_title="Chatbot h·ªó tr·ª£", page_icon="üí¨", layout="centered")
st.title("Chatbot h·ªó tr·ª£ (tu·ª≥ ch·ªçn)")

# Kh·ªüi t·∫°o session state cho chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Ch·ªçn API provider
api_provider = st.sidebar.selectbox(
    "Ch·ªçn API Provider",
    ["aiml", "openai"],
    index=0
)

# Ki·ªÉm tra API key
api_key = os.environ.get(f"{api_provider.upper()}_API_KEY")
api_status = "‚úÖ API ƒë√£ s·∫µn s√†ng" if api_key else "‚ùå Ch∆∞a c·∫•u h√¨nh API"
st.sidebar.info(f"Tr·∫°ng th√°i {api_provider.upper()}: {api_status}")

st.markdown(f"ƒê·∫∑t bi·∫øn m√¥i tr∆∞·ªùng **{api_provider.upper()}_API_KEY** ƒë·ªÉ d√πng API; n·∫øu kh√¥ng, app tr·∫£ g·ª£i √Ω m·∫∑c ƒë·ªãnh.")

# Chat interface
for message in st.session_state.chat_history:
    with st.chat_message(message["role"]):
        st.write(message["content"])

msg = st.chat_input("B·∫°n mu·ªën chia s·∫ª/ h·ªèi g√¨?")
if msg and msg.strip():
    # Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    with st.chat_message("user"):
        st.write(msg)
    st.session_state.chat_history.append({"role": "user", "content": msg})

    # X·ª≠ l√Ω v√† hi·ªÉn th·ªã ph·∫£n h·ªìi
    with st.chat_message("assistant"):
        try:
            if not api_key:
                response = "\n".join(get_default_response())
                st.warning(f"ƒêang d√πng g·ª£i √Ω m·∫∑c ƒë·ªãnh (kh√¥ng c√≥ {api_provider.upper()}_API_KEY):")
            else:
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    response = call_chat_api(msg, api_provider)
            
            st.write(response)
            st.session_state.chat_history.append(
                {"role": "assistant", "content": response}
            )

        except requests.exceptions.Timeout:
            error_msg = "‚ö†Ô∏è H·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i."
            st.error(error_msg)
            logger.error(error_msg)

        except requests.exceptions.RequestException as e:
            error_msg = f"‚ö†Ô∏è L·ªói k·∫øt n·ªëi API: {str(e)}"
            st.error(error_msg)
            logger.error(f"API error: {str(e)}")
            
        except Exception as e:
            error_msg = f"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"
            st.error(error_msg)
            logger.error(f"Unexpected error: {str(e)}")
            
            # ƒê·ªÅ xu·∫•t g·ª£i √Ω m·∫∑c ƒë·ªãnh khi c√≥ l·ªói
            st.info("Trong l√∫c ch·ªù k·∫øt n·ªëi l·∫°i, ƒë√¢y l√† m·ªôt s·ªë g·ª£i √Ω:")
            st.write("\n".join(get_default_response()))
