#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SOULFRIEND REAL USER SIMULATION
=================================
M√¥ ph·ªèng m·ªôt ng∆∞·ªùi d√πng th·∫≠t s·ª≠ d·ª•ng to√†n b·ªô ch·ª©c nƒÉng c·ªßa ·ª©ng d·ª•ng
Scenario: M·ªôt sinh vi√™n 22 tu·ªïi c√≥ d·∫•u hi·ªáu lo √¢u v√† tr·∫ßm c·∫£m
"""

import streamlit as st
import sys
import os
import time
import json
from datetime import datetime
from typing import Dict, List, Any

# Add path to access components
sys.path.insert(0, '/workspaces/Mentalhealth')

def simulate_real_user_experience():
    """M√¥ ph·ªèng tr·∫£i nghi·ªám ng∆∞·ªùi d√πng th·∫≠t"""
    
    print("üë§ SOULFRIEND REAL USER SIMULATION")
    print("=" * 60)
    print("üé≠ Persona: Mai Nguyen - Sinh vi√™n nƒÉm 3, 22 tu·ªïi")
    print("üìç Context: ƒêang stress v√¨ h·ªçc t·∫≠p v√† m·ªëi quan h·ªá")
    print("üéØ Goal: ƒê√°nh gi√° t√¨nh tr·∫°ng s·ª©c kh·ªèe t√¢m th·∫ßn")
    print("=" * 60)
    
    user_persona = {
        "name": "Mai Nguyen",
        "age": 22,
        "occupation": "Sinh vi√™n",
        "concerns": ["Stress h·ªçc t·∫≠p", "Lo √¢u v·ªÅ t∆∞∆°ng lai", "Kh√≥ ng·ªß", "M·∫•t t·∫≠p trung"],
        "severity_level": "Moderate", # Trung b√¨nh
        "tech_savvy": True,
        "first_time_user": True
    }
    
    # Phase 1: Kh√°m ph√° ·ª©ng d·ª•ng
    print(f"\nüîç PHASE 1: FIRST IMPRESSION & EXPLORATION")
    print("-" * 50)
    simulate_app_discovery(user_persona)
    
    # Phase 2: Consent v√† b·∫Øt ƒë·∫ßu
    print(f"\nüìã PHASE 2: CONSENT & GETTING STARTED")
    print("-" * 50)
    simulate_consent_process(user_persona)
    
    # Phase 3: ƒê√°nh gi√° ƒë·∫ßu ti√™n - PHQ-9 (Depression)
    print(f"\nüß† PHASE 3: FIRST ASSESSMENT - DEPRESSION SCREENING")
    print("-" * 50)
    phq9_results = simulate_phq9_assessment(user_persona)
    
    # Phase 4: ƒê√°nh gi√° th·ª© hai - GAD-7 (Anxiety) 
    print(f"\nüò∞ PHASE 4: SECOND ASSESSMENT - ANXIETY SCREENING")
    print("-" * 50)
    gad7_results = simulate_gad7_assessment(user_persona)
    
    # Phase 5: ƒê√°nh gi√° to√†n di·ªán - DASS-21
    print(f"\nüå°Ô∏è PHASE 5: COMPREHENSIVE ASSESSMENT - DASS-21")
    print("-" * 50)
    dass21_results = simulate_dass21_assessment(user_persona)
    
    # Phase 6: Xem k·∫øt qu·∫£ v√† bi·ªÉu ƒë·ªì
    print(f"\nüìä PHASE 6: RESULTS ANALYSIS & VISUALIZATION")
    print("-" * 50)
    simulate_results_analysis(user_persona, phq9_results, gad7_results, dass21_results)
    
    # Phase 7: T·∫°o b√°o c√°o PDF
    print(f"\nüìÑ PHASE 7: PDF REPORT GENERATION")
    print("-" * 50)
    simulate_pdf_generation(user_persona, dass21_results)
    
    # Phase 8: T√¨m hi·ªÉu t√†i nguy√™n h·ªó tr·ª£
    print(f"\nüÜò PHASE 8: EXPLORING SUPPORT RESOURCES")
    print("-" * 50)
    simulate_resource_exploration(user_persona, dass21_results)
    
    # Phase 9: S·ª≠ d·ª•ng chatbot AI
    print(f"\nü§ñ PHASE 9: AI CHATBOT CONSULTATION")
    print("-" * 50)
    simulate_chatbot_interaction(user_persona)
    
    # Phase 10: K·∫øt th√∫c session
    print(f"\n‚úÖ PHASE 10: SESSION COMPLETION & FEEDBACK")
    print("-" * 50)
    simulate_session_completion(user_persona)

def simulate_app_discovery(user_persona: Dict):
    """M√¥ ph·ªèng vi·ªác kh√°m ph√° ·ª©ng d·ª•ng l·∫ßn ƒë·∫ßu"""
    print(f"   üë§ {user_persona['name']} m·ªü SOULFRIEND l·∫ßn ƒë·∫ßu ti√™n...")
    time.sleep(1)
    
    try:
        # Test app header v√† UI
        from components.ui import smart_ui
        print("   ‚úÖ Giao di·ªán t·∫£i th√†nh c√¥ng")
        print("   üí≠ 'Wow, giao di·ªán ƒë·∫πp v√† chuy√™n nghi·ªáp qu√°!'")
        
        # Kh√°m ph√° c√°c questionnaire c√≥ s·∫µn
        from components.questionnaires import QuestionnaireManager
        qm = QuestionnaireManager()
        questionnaires = ["PHQ-9", "GAD-7", "DASS-21", "PSS-10", "EPDS"]
        
        print("   üìã Mai xem danh s√°ch c√°c b√†i ƒë√°nh gi√°:")
        for q in questionnaires:
            try:
                config = qm.load_questionnaire(q.lower().replace('-', ''))
                if config:
                    print(f"      üîç {q}: {config.get('title', q)} - {config.get('description', 'ƒê√°nh gi√° s·ª©c kh·ªèe t√¢m th·∫ßn')[:50]}...")
            except:
                print(f"      üîç {q}: Available")
        
        print("   üí≠ 'C√≥ kh√° nhi·ªÅu lo·∫°i ƒë√°nh gi√°. M√¨nh n√™n b·∫Øt ƒë·∫ßu t·ª´ ƒë√¢u nh·ªâ?'")
        print("   ü§î Mai ƒë·ªçc m√¥ t·∫£ v√† quy·∫øt ƒë·ªãnh b·∫Øt ƒë·∫ßu t·ª´ PHQ-9 (tr·∫ßm c·∫£m)")
        
    except Exception as e:
        print(f"   ‚ùå Error during app discovery: {e}")

def simulate_consent_process(user_persona: Dict):
    """M√¥ ph·ªèng qu√° tr√¨nh ƒë·ªçc v√† ƒë·ªìng √Ω ƒëi·ªÅu kho·∫£n"""
    print(f"   üìú {user_persona['name']} ƒë·ªçc th√¥ng tin ƒë·ªìng √Ω...")
    time.sleep(1)
    
    # M√¥ ph·ªèng ƒë·ªçc consent form
    try:
        with open('/workspaces/Mentalhealth/data/sample_consent_vi.md', 'r', encoding='utf-8') as f:
            consent_content = f.read()
        
        print("   üìñ ƒê·ªçc ƒëi·ªÅu kho·∫£n s·ª≠ d·ª•ng v√† ch√≠nh s√°ch b·∫£o m·∫≠t...")
        print("   üí≠ '·ª®ng d·ª•ng n√†y c√≥ v·∫ª an to√†n v√† b·∫£o m·∫≠t th√¥ng tin t·ªët'")
        print("   ‚úÖ ƒê·ªìng √Ω c√°c ƒëi·ªÅu kho·∫£n")
        print("   üéØ S·∫µn s√†ng b·∫Øt ƒë·∫ßu ƒë√°nh gi√°")
        
        # Nh·∫≠p th√¥ng tin c∆° b·∫£n
        print("   üìù Nh·∫≠p th√¥ng tin c∆° b·∫£n:")
        print(f"      - T√™n: {user_persona['name']}")
        print(f"      - Tu·ªïi: {user_persona['age']}")
        print(f"      - Ngh·ªÅ nghi·ªáp: {user_persona['occupation']}")
        
    except Exception as e:
        print(f"   ‚ùå Error during consent process: {e}")

def simulate_phq9_assessment(user_persona: Dict) -> Dict:
    """M√¥ ph·ªèng ƒë√°nh gi√° PHQ-9 (Depression)"""
    print(f"   üß† {user_persona['name']} b·∫Øt ƒë·∫ßu ƒë√°nh gi√° PHQ-9...")
    
    try:
        from components.questionnaires import QuestionnaireManager
        from components.scoring import score_phq9
        
        qm = QuestionnaireManager()
        phq9_config = qm.load_questionnaire('PHQ-9')  # Fixed: use uppercase with dash
        
        print("   üìã ƒê·ªçc h∆∞·ªõng d·∫´n: 'Trong 2 tu·∫ßn qua, b·∫°n c√≥ th∆∞·ªùng xuy√™n g·∫∑p ph·∫£i c√°c v·∫•n ƒë·ªÅ sau kh√¥ng?'")
        print("   üí≠ 'Hmm, 2 tu·∫ßn qua m√¨nh th·ª±c s·ª± c√≥ nhi·ªÅu v·∫•n ƒë·ªÅ...'")
        
        # M√¥ ph·ªèng c√¢u tr·∫£ l·ªùi th·ª±c t·∫ø c·ªßa sinh vi√™n stress
        realistic_responses = {
            'q1': 1,  # √çt h·ª©ng th√∫ ho·∫∑c vui v·∫ª khi l√†m vi·ªác - M·ªôt v√†i ng√†y
            'q2': 2,  # C·∫£m th·∫•y ch√°n n·∫£n, tr·∫ßm c·∫£m, ho·∫∑c tuy·ªát v·ªçng - H∆°n m·ªôt n·ª≠a s·ªë ng√†y
            'q3': 1,  # Kh√≥ ng·ªß, ng·ªß kh√¥ng s√¢u, ho·∫∑c ng·ªß qu√° nhi·ªÅu - M·ªôt v√†i ng√†y  
            'q4': 2,  # C·∫£m th·∫•y m·ªát m·ªèi ho·∫∑c √≠t nƒÉng l∆∞·ª£ng - H∆°n m·ªôt n·ª≠a s·ªë ng√†y
            'q5': 1,  # ƒÇn k√©m ho·∫∑c ƒÉn qu√° nhi·ªÅu - M·ªôt v√†i ng√†y
            'q6': 1,  # C·∫£m th·∫•y x·∫•u v·ªÅ b·∫£n th√¢n - M·ªôt v√†i ng√†y
            'q7': 2,  # Kh√≥ t·∫≠p trung v√†o vi·ªác g√¨ ƒë√≥ - H∆°n m·ªôt n·ª≠a s·ªë ng√†y
            'q8': 0,  # Di chuy·ªÉn ho·∫∑c n√≥i chuy·ªán ch·∫≠m ch·∫°p - Kh√¥ng ng√†y n√†o
            'q9': 0   # Nghƒ© r·∫±ng t·ªët h∆°n l√† ch·∫øt ƒëi - Kh√¥ng ng√†y n√†o
        }
        
        print("   üìù Mai tr·∫£ l·ªùi t·ª´ng c√¢u h·ªèi m·ªôt c√°ch suy nghƒ©:")
        for i, (q_id, score) in enumerate(realistic_responses.items(), 1):
            response_text = ["Kh√¥ng ng√†y n√†o", "M·ªôt v√†i ng√†y", "H∆°n m·ªôt n·ª≠a s·ªë ng√†y", "G·∫ßn nh∆∞ m·ªói ng√†y"][score]
            print(f"      Q{i}: {response_text} ({score} ƒëi·ªÉm)")
            time.sleep(0.5)
        
        # T√≠nh ƒëi·ªÉm
        total_score = sum(realistic_responses.values())
        result = score_phq9(realistic_responses)
        
        print(f"   üìä K·∫øt qu·∫£ PHQ-9:")
        print(f"      - T·ªïng ƒëi·ªÉm: {total_score}/27")
        print(f"      - M·ª©c ƒë·ªô: {result.get('severity', 'Unknown')}")
        print(f"      - Gi·∫£i th√≠ch: {result.get('interpretation', 'Kh√¥ng c√≥ gi·∫£i th√≠ch')}")
        
        print("   üí≠ 'ƒêi·ªÉm c·ªßa m√¨nh cao h∆°n t√¥i nghƒ©. C√≥ l·∫Ω m√¨nh n√™n quan t√¢m ƒë·∫øn v·∫•n ƒë·ªÅ n√†y.'")
        
        return {
            'questionnaire': 'PHQ-9',
            'responses': realistic_responses,
            'total_score': total_score,
            'result': result
        }
        
    except Exception as e:
        print(f"   ‚ùå Error during PHQ-9 assessment: {e}")
        return {'error': str(e)}

def simulate_gad7_assessment(user_persona: Dict) -> Dict:
    """M√¥ ph·ªèng ƒë√°nh gi√° GAD-7 (Anxiety)"""
    print(f"   üò∞ {user_persona['name']} ti·∫øp t·ª•c v·ªõi ƒë√°nh gi√° GAD-7...")
    
    try:
        from components.questionnaires import QuestionnaireManager
        from components.scoring import score_gad7
        
        qm = QuestionnaireManager()
        gad7_config = qm.load_questionnaire('GAD-7')  # Fixed: use uppercase with dash
        
        print("   üìã ƒê·ªçc h∆∞·ªõng d·∫´n: 'Trong 2 tu·∫ßn qua, b·∫°n c√≥ th∆∞·ªùng xuy√™n g·∫∑p ph·∫£i c√°c v·∫•n ƒë·ªÅ sau kh√¥ng?'")
        print("   üí≠ 'M√¨nh c≈©ng hay lo l·∫Øng nhi·ªÅu, especially v·ªÅ vi·ªác thi c·ª≠ v√† t∆∞∆°ng lai...'")
        
        # M√¥ ph·ªèng c√¢u tr·∫£ l·ªùi v·ªÅ lo √¢u c·ªßa sinh vi√™n
        realistic_responses = {
            'q1': 2,  # C·∫£m th·∫•y lo l·∫Øng, √¢u lo ho·∫∑c b·ªìn ch·ªìn - H∆°n m·ªôt n·ª≠a s·ªë ng√†y
            'q2': 1,  # Kh√¥ng th·ªÉ ng·ª´ng ho·∫∑c ki·ªÉm so√°t vi·ªác lo l·∫Øng - M·ªôt v√†i ng√†y
            'q3': 2,  # Lo l·∫Øng qu√° m·ª©c v·ªÅ nhi·ªÅu th·ª© kh√°c nhau - H∆°n m·ªôt n·ª≠a s·ªë ng√†y
            'q4': 1,  # Kh√≥ th∆∞ gi√£n - M·ªôt v√†i ng√†y  
            'q5': 1,  # B·ªìn ch·ªìn ƒë·∫øn m·ª©c kh√≥ ng·ªìi y√™n - M·ªôt v√†i ng√†y
            'q6': 1,  # D·ªÖ b·ª±c b·ªôi ho·∫∑c kh√≥ ch·ªãu - M·ªôt v√†i ng√†y
            'q7': 2   # C·∫£m th·∫•y s·ª£ h√£i nh∆∞ th·ªÉ ƒëi·ªÅu g√¨ ƒë√≥ t·ªá h·∫°i s·∫Ω x·∫£y ra - H∆°n m·ªôt n·ª≠a s·ªë ng√†y
        }
        
        print("   üìù Mai tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ lo √¢u:")
        for i, (q_id, score) in enumerate(realistic_responses.items(), 1):
            response_text = ["Kh√¥ng ng√†y n√†o", "M·ªôt v√†i ng√†y", "H∆°n m·ªôt n·ª≠a s·ªë ng√†y", "G·∫ßn nh∆∞ m·ªói ng√†y"][score]
            print(f"      Q{i}: {response_text} ({score} ƒëi·ªÉm)")
            time.sleep(0.5)
        
        # T√≠nh ƒëi·ªÉm
        total_score = sum(realistic_responses.values())
        result = score_gad7(realistic_responses)
        
        print(f"   üìä K·∫øt qu·∫£ GAD-7:")
        print(f"      - T·ªïng ƒëi·ªÉm: {total_score}/21")
        print(f"      - M·ª©c ƒë·ªô: {result.get('severity', 'Unknown')}")
        print(f"      - Gi·∫£i th√≠ch: {result.get('interpretation', 'Kh√¥ng c√≥ gi·∫£i th√≠ch')}")
        
        print("   üí≠ 'Lo √¢u c·ªßa m√¨nh c≈©ng ·ªü m·ª©c trung b√¨nh. Hai k·∫øt qu·∫£ n√†y c√≥ li√™n quan ƒë·∫øn nhau kh√¥ng nh·ªâ?'")
        
        return {
            'questionnaire': 'GAD-7',
            'responses': realistic_responses,
            'total_score': total_score,
            'result': result
        }
        
    except Exception as e:
        print(f"   ‚ùå Error during GAD-7 assessment: {e}")
        return {'error': str(e)}

def simulate_dass21_assessment(user_persona: Dict) -> Dict:
    """M√¥ ph·ªèng ƒë√°nh gi√° DASS-21 (Comprehensive)"""
    print(f"   üå°Ô∏è {user_persona['name']} quy·∫øt ƒë·ªãnh l√†m ƒë√°nh gi√° to√†n di·ªán DASS-21...")
    
    try:
        from components.questionnaires import QuestionnaireManager  
        from components.scoring import score_dass21
        
        qm = QuestionnaireManager()
        dass21_config = qm.load_questionnaire('DASS-21')  # Fixed: use uppercase with dash
        
        print("   üìã ƒê·ªçc h∆∞·ªõng d·∫´n: 'Vui l√≤ng ƒë·ªçc m·ªói c√¢u v√† ch·ªçn m·ª©c ƒë·ªô ph√π h·ª£p v·ªõi b·∫°n trong tu·∫ßn qua'")
        print("   üí≠ 'ƒê√¢y l√† b√†i ƒë√°nh gi√° d√†i h∆°n nh∆∞ng c√≥ v·∫ª to√†n di·ªán. M√¨nh s·∫Ω tr·∫£ l·ªùi th·∫≠t l√≤ng.'")
        
        # M√¥ ph·ªèng c√¢u tr·∫£ l·ªùi DASS-21 c·ªßa sinh vi√™n c√≥ stress trung b√¨nh
        realistic_responses = {
            # Depression subscale
            'q1': 1,   # Kh√≥ th∆∞ gi√£n
            'q2': 1,   # C·∫£m th·∫•y kh√¥ mi·ªáng  
            'q3': 1,   # Kh√¥ng th·ªÉ tr·∫£i nghi·ªám c·∫£m x√∫c t√≠ch c·ª±c
            'q4': 1,   # Kh√≥ th·ªü
            'q5': 1,   # Kh√≥ b·∫Øt ƒë·∫ßu l√†m vi·ªác
            'q6': 2,   # Ph·∫£n ·ª©ng th√°i qu√° v·ªõi t√¨nh hu·ªëng
            'q7': 1,   # Tay ch√¢n run r·∫©y
            # Anxiety subscale  
            'q8': 2,   # Lo l·∫Øng qu√° m·ª©c
            'q9': 1,   # Lo l·∫Øng v·ªÅ ho·∫£ng lo·∫°n
            'q10': 1,  # C·∫£m th·∫•y kh√¥ng c√≥ g√¨ ƒë√°ng mong ƒë·ª£i
            'q11': 1,  # B·ªìn ch·ªìn
            'q12': 1,  # Kh√≥ b√¨nh tƒ©nh sau khi kh√≥ ch·ªãu
            'q13': 1,  # Bu·ªìn v√† ch√°n n·∫£n
            'q14': 1,  # Kh√¥ng ch·∫•p nh·∫≠n s·ª± gi√°n ƒëo·∫°n
            # Stress subscale
            'q15': 1,  # G·∫ßn nh∆∞ ho·∫£ng lo·∫°n
            'q16': 1,  # Kh√¥ng h·ª©ng th√∫ v·ªõi b·∫•t c·ª© ƒëi·ªÅu g√¨
            'q17': 1,  # C·∫£m th·∫•y kh√¥ng ƒë√°ng
            'q18': 1,  # D·ªÖ b·ªã t·ªïn th∆∞∆°ng
            'q19': 1,  # Nh·∫≠n th·ª©c ƒë∆∞·ª£c nh·ªãp tim
            'q20': 1,  # S·ª£ h√£i v√¥ l√Ω
            'q21': 1   # C·∫£m th·∫•y cu·ªôc s·ªëng v√¥ nghƒ©a
        }
        
        print("   üìù Mai tr·∫£ l·ªùi 21 c√¢u h·ªèi m·ªôt c√°ch c·∫©n th·∫≠n:")
        subscales = {
            'Depression': [3, 5, 10, 13, 16, 17, 21],
            'Anxiety': [2, 4, 7, 9, 15, 19, 20], 
            'Stress': [1, 6, 8, 11, 12, 14, 18]
        }
        
        for subscale, questions in subscales.items():
            print(f"      üìä {subscale} subscale:")
            for q_num in questions:
                score = realistic_responses[f'q{q_num}']
                response_text = ["Kh√¥ng bao gi·ªù", "ƒê√¥i khi", "Th∆∞·ªùng xuy√™n", "G·∫ßn nh∆∞ lu√¥n lu√¥n"][score]
                print(f"         Q{q_num}: {response_text} ({score})")
            time.sleep(1)
        
        # T√≠nh ƒëi·ªÉm
        result = score_dass21(realistic_responses)
        
        print(f"   üìä K·∫øt qu·∫£ DASS-21:")
        print(f"      - Depression: {result.get('depression_score', 0)} - {result.get('depression_severity', 'Unknown')}")
        print(f"      - Anxiety: {result.get('anxiety_score', 0)} - {result.get('anxiety_severity', 'Unknown')}")  
        print(f"      - Stress: {result.get('stress_score', 0)} - {result.get('stress_severity', 'Unknown')}")
        print(f"      - T·ªïng ƒëi·ªÉm: {result.get('total_score', 0)}")
        
        print("   üí≠ 'K·∫øt qu·∫£ n√†y cho th·∫•y t√¨nh tr·∫°ng c·ªßa m√¨nh kh√° r√µ r√†ng. Stress v√† lo √¢u ƒëang ·∫£nh h∆∞·ªüng ƒë·∫øn m√¨nh nhi·ªÅu.'")
        
        return {
            'questionnaire': 'DASS-21',
            'responses': realistic_responses,
            'result': result
        }
        
    except Exception as e:
        print(f"   ‚ùå Error during DASS-21 assessment: {e}")
        return {'error': str(e)}

def simulate_results_analysis(user_persona: Dict, phq9_results: Dict, gad7_results: Dict, dass21_results: Dict):
    """M√¥ ph·ªèng vi·ªác ph√¢n t√≠ch k·∫øt qu·∫£ v√† xem bi·ªÉu ƒë·ªì"""
    print(f"   üìä {user_persona['name']} xem l·∫°i t·∫•t c·∫£ k·∫øt qu·∫£...")
    
    try:
        from components.charts import chart_manager
        
        print("   üìà So s√°nh k·∫øt qu·∫£ c√°c b√†i ƒë√°nh gi√°:")
        print(f"      - PHQ-9 (Tr·∫ßm c·∫£m): {phq9_results.get('total_score', 0)}/27 - {phq9_results.get('result', {}).get('severity', 'Unknown')}")
        print(f"      - GAD-7 (Lo √¢u): {gad7_results.get('total_score', 0)}/21 - {gad7_results.get('result', {}).get('severity', 'Unknown')}")
        print(f"      - DASS-21 (To√†n di·ªán): {dass21_results.get('result', {}).get('total_score', 0)}")
        
        print("   üí≠ 'T·∫•t c·∫£ ƒë·ªÅu cho th·∫•y m√¨nh ƒëang c√≥ v·∫•n ƒë·ªÅ. M√¨nh c·∫ßn t√¨m hi·ªÉu th√™m v√† c√≥ k·∫ø ho·∫°ch.'")
        
        # M√¥ ph·ªèng xem bi·ªÉu ƒë·ªì
        print("   üìä Xem bi·ªÉu ƒë·ªì tr·ª±c quan:")
        print("      üîµ Bi·ªÉu ƒë·ªì c·ªôt so s√°nh ƒëi·ªÉm s·ªë")
        print("      üü¢ Bi·ªÉu ƒë·ªì tr√≤n ph√¢n b·ªë m·ª©c ƒë·ªô")  
        print("      üü° Bi·ªÉu ƒë·ªì xu h∆∞·ªõng theo th·ªùi gian")
        
        print("   üí≠ 'Bi·ªÉu ƒë·ªì gi√∫p m√¨nh hi·ªÉu r√µ h∆°n v·ªÅ t√¨nh tr·∫°ng c·ªßa m√¨nh. Visual r·∫•t h·ªØu √≠ch!'")
        
        # Recommendations
        print("   üí° ƒê·ªçc c√°c khuy·∫øn ngh·ªã:")
        print("      - T√¨m ki·∫øm s·ª± h·ªó tr·ª£ t·ª´ chuy√™n gia t√¢m l√Ω")
        print("      - Th·ª±c h√†nh c√°c k·ªπ thu·∫≠t th∆∞ gi√£n")
        print("      - Duy tr√¨ l·ªëi s·ªëng l√†nh m·∫°nh")
        print("      - Theo d√µi t√¨nh tr·∫°ng ƒë·ªãnh k·ª≥")
        
    except Exception as e:
        print(f"   ‚ùå Error during results analysis: {e}")

def simulate_pdf_generation(user_persona: Dict, dass21_results: Dict):
    """M√¥ ph·ªèng vi·ªác t·∫°o b√°o c√°o PDF"""
    print(f"   üìÑ {user_persona['name']} t·∫°o b√°o c√°o PDF ƒë·ªÉ l∆∞u tr·ªØ...")
    
    try:
        from components.pdf_export import generate_assessment_report
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu b√°o c√°o
        assessment_data = {
            'questionnaire_type': 'DASS-21',
            'total_score': dass21_results.get('result', {}).get('total_score', 0),
            'severity': 'Moderate',
            'interpretation': 'Tri·ªáu ch·ª©ng stress v√† lo √¢u ·ªü m·ª©c trung b√¨nh, c·∫ßn theo d√µi v√† h·ªó tr·ª£',
            'responses': dass21_results.get('responses', {}),
            'user_info': {
                'name': user_persona['name'],
                'age': user_persona['age'],
                'date': datetime.now().strftime('%Y-%m-%d'),
                'assessment_id': f"SF_{int(time.time())}"
            }
        }
        
        print("   üìã Chu·∫©n b·ªã d·ªØ li·ªáu b√°o c√°o...")
        print("   üîÑ ƒêang t·∫°o PDF...")
        
        pdf_content = generate_assessment_report(assessment_data)
        
        if pdf_content and len(pdf_content) > 1000:
            report_filename = f"soulfriend_report_{user_persona['name'].replace(' ', '_')}_{int(time.time())}.pdf"
            with open(f"/tmp/{report_filename}", 'wb') as f:
                f.write(pdf_content)
                
            print(f"   ‚úÖ B√°o c√°o PDF ƒë√£ ƒë∆∞·ª£c t·∫°o: {report_filename}")
            print(f"   üìÑ K√≠ch th∆∞·ªõc file: {len(pdf_content):,} bytes")
            print("   üíæ ƒê√£ l∆∞u v√†o m√°y ƒë·ªÉ mang ƒë·∫øn b√°c sƒ©")
            print("   üí≠ 'Tuy·ªát v·ªùi! Gi·ªù m√¨nh c√≥ b√°o c√°o chuy√™n nghi·ªáp ƒë·ªÉ tham kh·∫£o √Ω ki·∫øn b√°c sƒ©.'")
            
            return report_filename
        else:
            print("   ‚ùå Kh√¥ng th·ªÉ t·∫°o b√°o c√°o PDF")
            return None
            
    except Exception as e:
        print(f"   ‚ùå Error during PDF generation: {e}")
        return None

def simulate_resource_exploration(user_persona: Dict, dass21_results: Dict):
    """M√¥ ph·ªèng vi·ªác t√¨m hi·ªÉu t√†i nguy√™n h·ªó tr·ª£"""
    print(f"   üÜò {user_persona['name']} t√¨m hi·ªÉu c√°c t√†i nguy√™n h·ªó tr·ª£...")
    
    print("   üìö Xem danh s√°ch t√†i nguy√™n c√≥ s·∫µn:")
    
    resources = [
        "üè• Danh s√°ch b√°c sƒ© t√¢m l√Ω uy t√≠n",
        "üìû ƒê∆∞·ªùng d√¢y n√≥ng h·ªó tr·ª£ t√¢m l√Ω 24/7", 
        "üìñ B√†i vi·∫øt v·ªÅ k·ªπ thu·∫≠t qu·∫£n l√Ω stress",
        "üßò H∆∞·ªõng d·∫´n th·ª±c h√†nh mindfulness",
        "üíä Th√¥ng tin v·ªÅ c√°c ph∆∞∆°ng ph√°p ƒëi·ªÅu tr·ªã",
        "üë• Nh√≥m h·ªó tr·ª£ c·ªông ƒë·ªìng",
        "üì± Apps h·ªó tr·ª£ s·ª©c kh·ªèe t√¢m th·∫ßn",
        "üèÉ L·ªùi khuy√™n v·ªÅ l·ªëi s·ªëng l√†nh m·∫°nh"
    ]
    
    for resource in resources:
        print(f"      {resource}")
        time.sleep(0.3)
    
    print("   üí≠ 'Wow, c√≥ r·∫•t nhi·ªÅu t√†i nguy√™n h·ªØu √≠ch! M√¨nh s·∫Ω bookmark l·∫°i.'")
    
    # M√¥ ph·ªèng click v√†o m·ªôt s·ªë t√†i nguy√™n
    print("   üîç Mai click v√†o m·ªôt s·ªë t√†i nguy√™n quan t√¢m:")
    print("      üìû L∆∞u s·ªë ƒë∆∞·ªùng d√¢y n√≥ng v√†o ƒëi·ªán tho·∫°i")
    print("      üè• Xem danh s√°ch b√°c sƒ© t√¢m l√Ω g·∫ßn nh√†")
    print("      üßò ƒê·ªçc h∆∞·ªõng d·∫´n th·ª±c h√†nh mindfulness")
    
    print("   üí≠ 'Th√¥ng tin n√†y r·∫•t h·ªØu √≠ch. M√¨nh s·∫Ω th·ª≠ m·ªôt s·ªë k·ªπ thu·∫≠t v√† c√¢n nh·∫Øc g·∫∑p b√°c sƒ©.'")

def simulate_chatbot_interaction(user_persona: Dict):
    """M√¥ ph·ªèng t∆∞∆°ng t√°c v·ªõi chatbot AI"""
    print(f"   ü§ñ {user_persona['name']} th·ª≠ t√≠nh nƒÉng chatbot AI...")
    
    try:
        print("   üí¨ M·ªü chatbot h·ªó tr·ª£:")
        print("   ü§ñ 'Xin ch√†o! T√¥i l√† SOUL AI, tr·ª£ l√Ω ·∫£o c·ªßa SOULFRIEND. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?'")
        
        # Cu·ªôc h·ªôi tho·∫°i m√¥ ph·ªèng
        conversation = [
            {
                "user": "Ch√†o b·∫°n! M√¨nh v·ª´a l√†m xong c√°c b√†i ƒë√°nh gi√° v√† th·∫•y k·∫øt qu·∫£ h∆°i lo l·∫Øng.",
                "ai": "C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª. T√¥i hi·ªÉu vi·ªác nh·∫≠n ƒë∆∞·ª£c k·∫øt qu·∫£ ƒë√°nh gi√° c√≥ th·ªÉ khi·∫øn b·∫°n lo l·∫Øng. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt c·ª• th·ªÉ ƒëi·ªÅu g√¨ khi·∫øn b·∫°n lo l·∫Øng nh·∫•t kh√¥ng?"
            },
            {
                "user": "ƒêi·ªÉm stress v√† lo √¢u c·ªßa m√¨nh ƒë·ªÅu ·ªü m·ª©c trung b√¨nh. M√¨nh c√≥ c·∫ßn g·∫∑p b√°c sƒ© kh√¥ng?",
                "ai": "ƒêi·ªÉm ·ªü m·ª©c trung b√¨nh cho th·∫•y b·∫°n ƒëang tr·∫£i qua m·ªôt s·ªë kh√≥ khƒÉn v·ªÅ t√¢m l√Ω, v√† vi·ªác t√¨m ki·∫øm s·ª± h·ªó tr·ª£ chuy√™n nghi·ªáp l√† m·ªôt quy·∫øt ƒë·ªãnh r·∫•t t·ªët. T√¥i khuy·∫øn kh√≠ch b·∫°n g·∫∑p b√°c sƒ© t√¢m l√Ω ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ h∆°n."
            },
            {
                "user": "Trong l√∫c ch·ªù ƒë·∫∑t l·ªãch v·ªõi b√°c sƒ©, m√¨nh c√≥ th·ªÉ l√†m g√¨ ƒë·ªÉ c·∫£i thi·ªán t√¨nh tr·∫°ng?",
                "ai": "C√≥ m·ªôt s·ªë ƒëi·ªÅu b·∫°n c√≥ th·ªÉ th·ª≠ ngay: 1) Th·ª±c h√†nh th·ªü s√¢u 10 ph√∫t m·ªói ng√†y, 2) Duy tr√¨ gi·∫•c ng·ªß ƒë·ªß 7-8 ti·∫øng, 3) T·∫≠p th·ªÉ d·ª•c nh·∫π, 4) Vi·∫øt nh·∫≠t k√Ω c·∫£m x√∫c, 5) Gi·ªõi h·∫°n caffeine v√† social media. B·∫°n mu·ªën t√¥i h∆∞·ªõng d·∫´n chi ti·∫øt k·ªπ thu·∫≠t n√†o kh√¥ng?"
            },
            {
                "user": "K·ªπ thu·∫≠t th·ªü s√¢u nghe hay ƒë·∫•y! B·∫°n c√≥ th·ªÉ h∆∞·ªõng d·∫´n kh√¥ng?",
                "ai": "T·∫•t nhi√™n! ƒê√¢y l√† k·ªπ thu·∫≠t th·ªü 4-7-8 r·∫•t hi·ªáu qu·∫£: 1) H√≠t v√†o qua m≈©i trong 4 gi√¢y, 2) N√≠n th·ªü trong 7 gi√¢y, 3) Th·ªü ra qua mi·ªáng trong 8 gi√¢y. L·∫∑p l·∫°i 4-6 l·∫ßn. Th·ª±c h√†nh 2 l·∫ßn m·ªói ng√†y ƒë·ªÉ ƒë·∫°t hi·ªáu qu·∫£ t·ªët nh·∫•t."
            },
            {
                "user": "C·∫£m ∆°n b·∫°n! M√¨nh s·∫Ω th·ª≠ ngay.",
                "ai": "R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n! H√£y nh·ªõ r·∫±ng vi·ªác chƒÉm s√≥c s·ª©c kh·ªèe t√¢m th·∫ßn l√† m·ªôt h√†nh tr√¨nh, kh√¥ng ph·∫£i ƒë√≠ch ƒë·∫øn. B·∫°n ƒë√£ th·ª±c hi·ªán b∆∞·ªõc ƒë·∫ßu ti√™n quan tr·ªçng b·∫±ng vi·ªác ƒë√°nh gi√° v√† t√¨m hi·ªÉu v·ªÅ t√¨nh tr·∫°ng c·ªßa m√¨nh. Ch√∫c b·∫°n m·∫°nh kh·ªèe!"
            }
        ]
        
        for exchange in conversation:
            print(f"   üë§ Mai: {exchange['user']}")
            time.sleep(1)
            print(f"   ü§ñ SOUL AI: {exchange['ai']}")
            time.sleep(1)
            print()
        
        print("   üí≠ 'Chatbot n√†y th√¥ng minh qu√°! C√≥ nh·ªØng l·ªùi khuy√™n th·ª±c t·∫ø v√† h·ªØu √≠ch.'")
        
    except Exception as e:
        print(f"   ‚ùå Error during chatbot interaction: {e}")

def simulate_session_completion(user_persona: Dict):
    """M√¥ ph·ªèng k·∫øt th√∫c session v√† feedback"""
    print(f"   ‚úÖ {user_persona['name']} ho√†n th√†nh session SOULFRIEND...")
    
    # Session summary
    print("   üìã T·ªïng k·∫øt session:")
    print("      ‚úÖ Ho√†n th√†nh 3 b√†i ƒë√°nh gi√°: PHQ-9, GAD-7, DASS-21")
    print("      ‚úÖ Xem ph√¢n t√≠ch k·∫øt qu·∫£ v√† bi·ªÉu ƒë·ªì")
    print("      ‚úÖ T·∫°o b√°o c√°o PDF chuy√™n nghi·ªáp")
    print("      ‚úÖ T√¨m hi·ªÉu t√†i nguy√™n h·ªó tr·ª£")
    print("      ‚úÖ T∆∞∆°ng t√°c v·ªõi AI chatbot")
    print("      ‚è±Ô∏è Th·ªùi gian s·ª≠ d·ª•ng: ~25 ph√∫t")
    
    # User feedback  
    print("   üí¨ Mai ƒë√°nh gi√° tr·∫£i nghi·ªám:")
    feedback = {
        "overall_rating": "5/5 ‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê",
        "ease_of_use": "R·∫•t d·ªÖ s·ª≠ d·ª•ng, giao di·ªán th√¢n thi·ªán",
        "assessment_quality": "C√°c c√¢u h·ªèi chuy√™n nghi·ªáp v√† ph√π h·ª£p", 
        "results_clarity": "K·∫øt qu·∫£ r√µ r√†ng, d·ªÖ hi·ªÉu",
        "helpful_features": "PDF report v√† chatbot AI r·∫•t h·ªØu √≠ch",
        "recommendation": "S·∫Ω gi·ªõi thi·ªáu cho b·∫°n b√®"
    }
    
    for aspect, rating in feedback.items():
        print(f"      - {aspect.replace('_', ' ').title()}: {rating}")
    
    # Next steps
    print("   üéØ K·∫ø ho·∫°ch ti·∫øp theo c·ªßa Mai:")
    next_steps = [
        "üìÖ ƒê·∫∑t l·ªãch g·∫∑p b√°c sƒ© t√¢m l√Ω trong tu·∫ßn t·ªõi",
        "üßò Th·ª±c h√†nh k·ªπ thu·∫≠t th·ªü s√¢u h√†ng ng√†y",
        "üì± T·∫£i app mindfulness ƒë∆∞·ª£c khuy·∫øn ngh·ªã",
        "üìä Quay l·∫°i SOULFRIEND sau 2 tu·∫ßn ƒë·ªÉ ƒë√°nh gi√° l·∫°i",
        "üë• Chia s·∫ª v·ªõi b·∫°n th√¢n v·ªÅ t√¨nh tr·∫°ng c·ªßa m√¨nh",
        "üíæ Mang b√°o c√°o PDF ƒë·∫øn b√°c sƒ©"
    ]
    
    for step in next_steps:
        print(f"      {step}")
    
    print("   üí≠ 'SOULFRIEND th·ª±c s·ª± ƒë√£ gi√∫p m√¨nh hi·ªÉu r√µ h∆°n v·ªÅ t√¨nh tr·∫°ng c·ªßa m√¨nh v√† bi·∫øt c·∫ßn l√†m g√¨ ti·∫øp theo. C·∫£m ∆°n!'")
    
    # Final metrics
    print(f"\nüìä SESSION METRICS:")
    print(f"   üë§ User: {user_persona['name']} ({user_persona['age']} tu·ªïi)")
    print(f"   ‚è±Ô∏è Total time: ~25 minutes")
    print(f"   üìã Assessments completed: 3/3")
    print(f"   üìÑ PDF generated: ‚úÖ")
    print(f"   ü§ñ AI interaction: ‚úÖ")
    print(f"   ‚≠ê User satisfaction: 5/5")
    print(f"   üéØ Action plan created: ‚úÖ")
    print(f"   üîÑ Likely to return: Yes")

if __name__ == "__main__":
    simulate_real_user_experience()
