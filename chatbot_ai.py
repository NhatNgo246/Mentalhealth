"""
SOULFRIEND AI Chatbot
Intelligent mental health support chatbot
"""

import streamlit as st
import json
import random
from datetime import datetime
import sys
import os

# Add project root to path
sys.path.append('/workspaces/Mentalhealth')

from components.ui import load_css, app_header

# Page configuration
st.set_page_config(
    page_title="SOULFRIEND Chatbot",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load custom CSS
try:
    load_css()
except:
    pass

# Header
app_header()

class MentalHealthChatbot:
    """AI Chatbot for mental health support"""
    
    def __init__(self):
        self.responses = {
            "greeting": [
                "Xin ch√†o! T√¥i l√† SoulBot, tr·ª£ l√Ω AI c·ªßa SOULFRIEND. T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?",
                "Ch√†o b·∫°n! T√¥i ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n. B·∫°n mu·ªën chia s·∫ª ƒëi·ªÅu g√¨?",
                "Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n. H√£y c√πng n√≥i chuy·ªán v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn nh√©."
            ],
            "anxiety": [
                "T√¥i hi·ªÉu c·∫£m gi√°c lo √¢u c√≥ th·ªÉ r·∫•t kh√≥ ch·ªãu. H√£y th·ª≠ k·ªπ thu·∫≠t th·ªü 4-7-8: H√≠t v√†o 4 gi√¢y, gi·ªØ 7 gi√¢y, th·ªü ra 8 gi√¢y.",
                "Lo √¢u l√† c·∫£m x√∫c b√¨nh th∆∞·ªùng. H√£y th·ª≠ t·∫≠p trung v√†o hi·ªán t·∫°i - nh√¨n xung quanh v√† k·ªÉ t√™n 5 th·ª© b·∫°n c√≥ th·ªÉ nh√¨n th·∫•y.",
                "Khi c·∫£m th·∫•y lo √¢u, h√£y nh·ªõ r·∫±ng: 'C·∫£m x√∫c n√†y s·∫Ω qua ƒëi'. B·∫°n c√≥ mu·ªën th·ª≠ m·ªôt b√†i t·∫≠p th∆∞ gi√£n kh√¥ng?"
            ],
            "depression": [
                "T√¥i hi·ªÉu b·∫°n ƒëang tr·∫£i qua th·ªùi gian kh√≥ khƒÉn. ƒêi·ªÅu quan tr·ªçng l√† b·∫°n ƒë√£ chia s·∫ª - ƒë√≥ l√† b∆∞·ªõc ƒë·∫ßu r·∫•t d≈©ng c·∫£m.",
                "Tr·∫ßm c·∫£m c√≥ th·ªÉ khi·∫øn m·ªçi th·ª© tr·ªü n√™n t·ªëi tƒÉm, nh∆∞ng h√£y nh·ªõ r·∫±ng c√≥ hy v·ªçng v√† h·ªó tr·ª£. B·∫°n kh√¥ng c√¥ ƒë∆°n.",
                "M·ªói ng√†y nh·ªè b√© c≈©ng l√† m·ªôt chi·∫øn th·∫Øng. H√¥m nay b·∫°n ƒë√£ l√†m ƒë∆∞·ª£c ƒëi·ªÅu g√¨ khi·∫øn b·∫£n th√¢n t·ª± h√†o?"
            ],
            "stress": [
                "CƒÉng th·∫≥ng l√† ph·∫£n ·ª©ng t·ª± nhi√™n c·ªßa c∆° th·ªÉ. H√£y th·ª≠ chia nh·ªè v·∫•n ƒë·ªÅ th√†nh c√°c ph·∫ßn nh·ªè h∆°n ƒë·ªÉ d·ªÖ qu·∫£n l√Ω.",
                "Khi cƒÉng th·∫≥ng, n√£o b·ªô c·∫ßn ngh·ªâ ng∆°i. H√£y th·ª≠ ngh·ªâ 5 ph√∫t v√† l√†m ƒëi·ªÅu g√¨ ƒë√≥ b·∫°n th√≠ch.",
                "B·∫°n c√≥ th·ªÉ ki·ªÉm so√°t ƒë∆∞·ª£c ph·∫£n ·ª©ng c·ªßa m√¨nh v·ªõi cƒÉng th·∫≥ng. H√£y th·ª≠ n√≥i v·ªõi b·∫£n th√¢n: 'T√¥i c√≥ th·ªÉ v∆∞·ª£t qua ƒëi·ªÅu n√†y'."
            ],
            "sleep": [
                "Gi·∫•c ng·ªß r·∫•t quan tr·ªçng cho s·ª©c kh·ªèe t√¢m th·∫ßn. H√£y th·ª≠ t·∫°o th√≥i quen ƒëi ng·ªß ƒë·ªÅu gi·ªù v√† tr√°nh m√†n h√¨nh tr∆∞·ªõc khi ng·ªß 1 gi·ªù.",
                "N·∫øu kh√≥ ng·ªß, h√£y th·ª≠ k·ªπ thu·∫≠t th∆∞ gi√£n c∆° t·ª´ng ph·∫ßn - cƒÉng r·ªìi th·∫£ l·ªèng t·ª´ng nh√≥m c∆° t·ª´ ch√¢n l√™n ƒë·∫ßu.",
                "M√¥i tr∆∞·ªùng ng·ªß l√Ω t∆∞·ªüng: t·ªëi, m√°t, y√™n tƒ©nh. B·∫°n c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh ph√≤ng ng·ªß ƒë·ªÉ t·ªëi ∆∞u kh√¥ng?"
            ],
            "support": [
                "Vi·ªác t√¨m ki·∫øm h·ªó tr·ª£ chuy√™n nghi·ªáp l√† d·∫•u hi·ªáu c·ªßa s·ª± m·∫°nh m·∫Ω, kh√¥ng ph·∫£i y·∫øu ƒëu·ªëi.",
                "C√≥ nhi·ªÅu ngu·ªìn h·ªó tr·ª£: t√¢m l√Ω tr·ªã li·ªáu, nh√≥m h·ªó tr·ª£, ƒë∆∞·ªùng d√¢y n√≥ng. B·∫°n mu·ªën t√¥i chia s·∫ª th√¥ng tin c·ª• th·ªÉ kh√¥ng?",
                "Gia ƒë√¨nh v√† b·∫°n b√® c≈©ng c√≥ th·ªÉ l√† ngu·ªìn h·ªó tr·ª£ tuy·ªát v·ªùi. B·∫°n c√≥ ng∆∞·ªùi tin t∆∞·ªüng ƒë·ªÉ chia s·∫ª kh√¥ng?"
            ],
            "crisis": [
                "T√¥i r·∫•t lo l·∫Øng v·ªÅ b·∫°n. N·∫øu b·∫°n c√≥ √Ω ƒë·ªãnh t·ª± l√†m h·∫°i b·∫£n th√¢n, h√£y li√™n h·ªá ngay:",
                "üìû ƒê∆∞·ªùng d√¢y n√≥ng qu·ªëc gia: 1800-1612",
                "üè• C·∫•p c·ª©u: 115",
                "B·∫°n r·∫•t quan tr·ªçng v√† cu·ªôc s·ªëng c·ªßa b·∫°n c√≥ gi√° tr·ªã. H√£y t√¨m ki·∫øm h·ªó tr·ª£ ngay l·∫≠p t·ª©c."
            ],
            "positive": [
                "Th·∫≠t tuy·ªát v·ªùi khi nghe b·∫°n c·∫£m th·∫•y t√≠ch c·ª±c! H√£y ghi nh·ªõ kho·∫£nh kh·∫Øc n√†y.",
                "T√¢m tr·∫°ng t·ªët c·ªßa b·∫°n th·∫≠t tuy·ªát! B·∫°n c√≥ mu·ªën chia s·∫ª ƒëi·ªÅu g√¨ ƒë√£ mang l·∫°i c·∫£m gi√°c n√†y kh√¥ng?",
                "R·∫•t vui khi th·∫•y b·∫°n c√≥ tinh th·∫ßn t√≠ch c·ª±c. H√£y ti·∫øp t·ª•c duy tr√¨ nƒÉng l∆∞·ª£ng n√†y!"
            ],
            "default": [
                "T√¥i hi·ªÉu b·∫°n ƒëang chia s·∫ª v·ªÅ c·∫£m x√∫c c·ªßa m√¨nh. B·∫°n c√≥ th·ªÉ k·ªÉ th√™m v·ªÅ t√¨nh hu·ªëng c·ª• th·ªÉ kh√¥ng?",
                "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng chia s·∫ª v·ªõi t√¥i. ƒêi·ªÅu g√¨ ƒëang khi·∫øn b·∫°n c·∫£m th·∫•y nh∆∞ v·∫≠y?",
                "T√¥i ƒëang l·∫Øng nghe. B·∫°n c√≥ mu·ªën n√≥i th√™m v·ªÅ nh·ªØng g√¨ ƒëang di·ªÖn ra trong cu·ªôc s·ªëng c·ªßa b·∫°n kh√¥ng?"
            ]
        }
        
        self.keywords = {
            "greeting": ["xin ch√†o", "ch√†o", "hello", "hi", "hey"],
            "anxiety": ["lo √¢u", "lo l·∫Øng", "anxiety", "s·ª£ h√£i", "ho·∫£ng lo·∫°n", "cƒÉng th·∫≥ng t√¢m l√Ω"],
            "depression": ["tr·∫ßm c·∫£m", "bu·ªìn", "depression", "tuy·ªát v·ªçng", "c√¥ ƒë∆°n", "kh√¥ng c√≤n hy v·ªçng"],
            "stress": ["cƒÉng th·∫≥ng", "stress", "√°p l·ª±c", "qu√° t·∫£i", "m·ªát m·ªèi"],
            "sleep": ["ng·ªß", "m·∫•t ng·ªß", "kh√≥ ng·ªß", "sleep", "insomnia", "ti·ªÉu ƒë√™m"],
            "support": ["gi√∫p ƒë·ª°", "h·ªó tr·ª£", "support", "t∆∞ v·∫•n", "li·ªáu ph√°p"],
            "crisis": ["t·ª± t·ª≠", "suicide", "t·ª± l√†m h·∫°i", "k·∫øt th√∫c cu·ªôc ƒë·ªùi", "kh√¥ng mu·ªën s·ªëng"],
            "positive": ["vui", "happy", "h·∫°nh ph√∫c", "t·ªët", "tuy·ªát v·ªùi", "t√≠ch c·ª±c"]
        }
    
    def analyze_sentiment(self, message):
        """Analyze message sentiment and categorize"""
        message_lower = message.lower()
        
        # Crisis detection (highest priority)
        for keyword in self.keywords["crisis"]:
            if keyword in message_lower:
                return "crisis"
        
        # Check other categories
        for category, keywords in self.keywords.items():
            if category == "crisis":
                continue
            for keyword in keywords:
                if keyword in message_lower:
                    return category
        
        return "default"
    
    def get_response(self, message, user_context=None):
        """Get appropriate response based on message analysis"""
        category = self.analyze_sentiment(message)
        
        # Select response
        responses = self.responses[category]
        response = random.choice(responses)
        
        # Add personalized elements if context available
        if user_context:
            if user_context.get('name'):
                response = response.replace("b·∫°n", user_context['name'])
        
        return {
            "response": response,
            "category": category,
            "suggestions": self.get_suggestions(category),
            "resources": self.get_resources(category)
        }
    
    def get_suggestions(self, category):
        """Get follow-up suggestions based on category"""
        suggestions = {
            "anxiety": [
                "Th·ª≠ b√†i t·∫≠p th·ªü 4-7-8",
                "K·ªπ thu·∫≠t grounding 5-4-3-2-1",
                "Nghe nh·∫°c th∆∞ gi√£n",
                "ƒêi b·ªô ngo√†i tr·ªùi"
            ],
            "depression": [
                "Vi·∫øt nh·∫≠t k√Ω c·∫£m x√∫c",
                "G·ªçi ƒëi·ªán cho b·∫°n b√®",
                "Tham gia ho·∫°t ƒë·ªông y√™u th√≠ch",
                "T√¨m ki·∫øm h·ªó tr·ª£ chuy√™n nghi·ªáp"
            ],
            "stress": [
                "Chia nh·ªè c√¥ng vi·ªác",
                "Thi·∫øt l·∫≠p ∆∞u ti√™n",
                "Ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß",
                "T·∫≠p th·ªÉ d·ª•c nh·∫π"
            ],
            "sleep": [
                "T·∫°o th√≥i quen ng·ªß ƒë·ªÅu gi·ªù",
                "Tr√°nh caffeine bu·ªïi t·ªëi",
                "Thi·ªÅn tr∆∞·ªõc khi ng·ªß",
                "ƒê·ªçc s√°ch thay v√¨ xem ƒëi·ªán tho·∫°i"
            ]
        }
        
        return suggestions.get(category, [])
    
    def get_resources(self, category):
        """Get relevant resources based on category"""
        resources = {
            "crisis": [
                {
                    "name": "ƒê∆∞·ªùng d√¢y n√≥ng qu·ªëc gia",
                    "contact": "1800-1612",
                    "description": "H·ªó tr·ª£ 24/7"
                },
                {
                    "name": "C·∫•p c·ª©u",
                    "contact": "115",
                    "description": "D·ªãch v·ª• c·∫•p c·ª©u"
                }
            ],
            "anxiety": [
                {
                    "name": "·ª®ng d·ª•ng thi·ªÅn Headspace",
                    "contact": "headspace.com",
                    "description": "B√†i t·∫≠p mindfulness"
                }
            ],
            "depression": [
                {
                    "name": "Vi·ªán S·ª©c kh·ªèe T√¢m th·∫ßn",
                    "contact": "028-3829-2295",
                    "description": "T∆∞ v·∫•n chuy√™n nghi·ªáp"
                }
            ]
        }
        
        return resources.get(category, [])

def chatbot_interface():
    """Main chatbot interface"""
    st.title("ü§ñ SoulBot - Tr·ª£ l√Ω AI")
    
    # Initialize chatbot
    if 'chatbot' not in st.session_state:
        st.session_state.chatbot = MentalHealthChatbot()
    
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []
    
    if 'user_context' not in st.session_state:
        st.session_state.user_context = {}
    
    chatbot = st.session_state.chatbot
    
    # Sidebar with user context
    with st.sidebar:
        st.header("üë§ Th√¥ng tin c√° nh√¢n")
        
        name = st.text_input("T√™n c·ªßa b·∫°n (t√πy ch·ªçn)", value=st.session_state.user_context.get('name', ''))
        if name:
            st.session_state.user_context['name'] = name
        
        mood = st.selectbox(
            "T√¢m tr·∫°ng hi·ªán t·∫°i:",
            ["Ch·ªçn t√¢m tr·∫°ng", "üòä Vui v·∫ª", "üòê B√¨nh th∆∞·ªùng", "üòî Bu·ªìn", "üò∞ Lo √¢u", "üò´ CƒÉng th·∫≥ng", "üò¥ M·ªát m·ªèi"]
        )
        if mood != "Ch·ªçn t√¢m tr·∫°ng":
            st.session_state.user_context['mood'] = mood
        
        st.markdown("---")
        st.markdown("### üÜò Tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p")
        st.markdown("**ƒê∆∞·ªùng d√¢y n√≥ng 24/7:**")
        st.markdown("üìû **1800-1612**")
        st.markdown("üè• **C·∫•p c·ª©u: 115**")
        
        if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat"):
            st.session_state.chat_history = []
            st.rerun()
    
    # Chat interface
    st.markdown("### üí¨ Cu·ªôc tr√≤ chuy·ªán")
    
    # Display chat history
    chat_container = st.container()
    
    with chat_container:
        if not st.session_state.chat_history:
            # Welcome message
            with st.chat_message("assistant"):
                st.write("üëã Xin ch√†o! T√¥i l√† SoulBot, tr·ª£ l√Ω AI c·ªßa SOULFRIEND. T√¥i ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn. B·∫°n mu·ªën chia s·∫ª ƒëi·ªÅu g√¨ h√¥m nay?")
        
        # Display chat history
        for chat in st.session_state.chat_history:
            with st.chat_message("user"):
                st.write(chat["user_message"])
            
            with st.chat_message("assistant"):
                st.write(chat["bot_response"]["response"])
                
                # Show suggestions if available
                if chat["bot_response"]["suggestions"]:
                    st.markdown("**üí° G·ª£i √Ω:**")
                    for suggestion in chat["bot_response"]["suggestions"]:
                        st.write(f"‚Ä¢ {suggestion}")
                
                # Show resources if available
                if chat["bot_response"]["resources"]:
                    st.markdown("**üìã T√†i nguy√™n h·ªØu √≠ch:**")
                    for resource in chat["bot_response"]["resources"]:
                        st.write(f"‚Ä¢ **{resource['name']}**: {resource['contact']} - {resource['description']}")
    
    # Chat input
    user_input = st.chat_input("Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...")
    
    if user_input:
        # Get bot response
        bot_response = chatbot.get_response(user_input, st.session_state.user_context)
        
        # Add to chat history
        st.session_state.chat_history.append({
            "timestamp": datetime.now(),
            "user_message": user_input,
            "bot_response": bot_response
        })
        
        # Rerun to show new message
        st.rerun()
    
    # Quick actions
    st.markdown("---")
    st.markdown("### ‚ö° H√†nh ƒë·ªông nhanh")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üò∞ T√¥i ƒëang lo √¢u"):
            bot_response = chatbot.get_response("T√¥i ƒëang c·∫£m th·∫•y lo √¢u", st.session_state.user_context)
            st.session_state.chat_history.append({
                "timestamp": datetime.now(),
                "user_message": "T√¥i ƒëang c·∫£m th·∫•y lo √¢u",
                "bot_response": bot_response
            })
            st.rerun()
    
    with col2:
        if st.button("üòî T√¥i c·∫£m th·∫•y bu·ªìn"):
            bot_response = chatbot.get_response("T√¥i ƒëang c·∫£m th·∫•y bu·ªìn v√† tr·∫ßm c·∫£m", st.session_state.user_context)
            st.session_state.chat_history.append({
                "timestamp": datetime.now(),
                "user_message": "T√¥i ƒëang c·∫£m th·∫•y bu·ªìn",
                "bot_response": bot_response
            })
            st.rerun()
    
    with col3:
        if st.button("üò´ T√¥i cƒÉng th·∫≥ng"):
            bot_response = chatbot.get_response("T√¥i ƒëang r·∫•t cƒÉng th·∫≥ng", st.session_state.user_context)
            st.session_state.chat_history.append({
                "timestamp": datetime.now(),
                "user_message": "T√¥i ƒëang cƒÉng th·∫≥ng",
                "bot_response": bot_response
            })
            st.rerun()
    
    with col4:
        if st.button("üò¥ T√¥i m·∫•t ng·ªß"):
            bot_response = chatbot.get_response("T√¥i g·∫∑p v·∫•n ƒë·ªÅ v·ªÅ gi·∫•c ng·ªß", st.session_state.user_context)
            st.session_state.chat_history.append({
                "timestamp": datetime.now(),
                "user_message": "T√¥i m·∫•t ng·ªß",
                "bot_response": bot_response
            })
            st.rerun()
    
    # Chatbot analytics
    if st.session_state.chat_history:
        st.markdown("---")
        st.markdown("### üìä Ph√¢n t√≠ch cu·ªôc tr√≤ chuy·ªán")
        
        # Analyze chat patterns
        categories = [chat["bot_response"]["category"] for chat in st.session_state.chat_history]
        category_counts = {}
        for cat in categories:
            category_counts[cat] = category_counts.get(cat, 0) + 1
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**üè∑Ô∏è Ch·ªß ƒë·ªÅ th·∫£o lu·∫≠n:**")
            for category, count in category_counts.items():
                st.write(f"‚Ä¢ {category.title()}: {count} l·∫ßn")
        
        with col2:
            st.markdown("**üìà Th·ªëng k√™:**")
            st.write(f"‚Ä¢ T·ªïng tin nh·∫Øn: {len(st.session_state.chat_history)}")
            st.write(f"‚Ä¢ Th·ªùi gian tr√≤ chuy·ªán: {(datetime.now() - st.session_state.chat_history[0]['timestamp']).seconds // 60} ph√∫t")
            
            # Mood tracking
            if 'mood' in st.session_state.user_context:
                st.write(f"‚Ä¢ T√¢m tr·∫°ng hi·ªán t·∫°i: {st.session_state.user_context['mood']}")

# Main function
def main():
    chatbot_interface()

if __name__ == "__main__":
    main()
