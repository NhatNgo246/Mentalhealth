import os
import requests
import streamlit as st
from dotenv import load_dotenv
import logging
import json
from components.ui import app_header, show_disclaimer, load_css, create_info_card, create_progress_indicator

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Page config
st.set_page_config(page_title="Chatbot Support", page_icon="üí¨", layout="centered")

# Load custom CSS
load_css()

# Constants
API_ENDPOINTS = {
    "openai": "https://api.openai.com/v1/chat/completions"
}
DEFAULT_MODELS = {
    "openai": "gpt-3.5-turbo"
}
FALLBACK_MODELS = {
    "openai": "gpt-3.5-turbo-16k"
}
MAX_RETRIES = 3
TIMEOUT = 30

# C·∫•u h√¨nh API m·∫∑c ƒë·ªãnh
DEFAULT_API = "openai"

# Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
load_dotenv()
logger.info("Loaded environment variables")

def call_chat_api(message, api_provider=DEFAULT_API, retry_count=0, use_fallback=False):
    """
    G·ªçi Chat API v·ªõi retry v√† x·ª≠ l√Ω l·ªói
    """
    # L·∫•y OpenAI API key
    api_key = os.environ.get("OPENAI_API_KEY")
    if not api_key:
        raise ValueError("OPENAI_API_KEY not configured")
    
    if not api_key:
        raise ValueError(f"{api_provider.upper()}_API_KEY not configured")

    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    # Chu·∫©n b·ªã system prompt
    system_prompt = (
        "B·∫°n l√† tr·ª£ l√Ω h·ªó tr·ª£ tinh t·∫ø v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn, n√≥i ti·∫øng Vi·ªát. "
        "H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, ƒë·ªìng c·∫£m v√† khuy·∫øn kh√≠ch. "
        "Kh√¥ng thay th·∫ø t∆∞ v·∫•n chuy√™n m√¥n. "
        "N·∫øu ph√°t hi·ªán d·∫•u hi·ªáu nguy c∆° cao, lu√¥n nh·∫Øc t√¨m h·ªó tr·ª£ y t·∫ø."
    )
    
    data = {
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": message}
        ],
        "model": FALLBACK_MODELS[api_provider] if use_fallback else DEFAULT_MODELS[api_provider],
        "temperature": 0.7,
        "max_tokens": 300
    }

    try:
        response = requests.post(
            API_ENDPOINTS[api_provider],
            headers=headers,
            json=data,
            timeout=TIMEOUT
        )
        
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        elif response.status_code == 404 and not use_fallback:
            logger.warning(f"Model not found, trying fallback model")
            return call_chat_api(message, api_provider, retry_count, use_fallback=True)
        elif response.status_code in [429, 500, 502, 503, 504] and retry_count < MAX_RETRIES:
            logger.warning(f"API error {response.status_code}, retrying... ({retry_count + 1}/{MAX_RETRIES})")
            import time
            time.sleep(2 ** retry_count)  # Exponential backoff
            return call_chat_api(message, api_provider, retry_count + 1, use_fallback)
        else:
            error_response = response.json() if response.text else {"message": "Unknown error"}
            raise requests.exceptions.RequestException(
                f"API error: {response.status_code} - {json.dumps(error_response, ensure_ascii=False)}")
    
    except requests.exceptions.Timeout:
        if retry_count < MAX_RETRIES:
            logger.warning(f"Request timeout, retrying... ({retry_count + 1}/{MAX_RETRIES})")
            return call_chat_api(message, api_provider, retry_count + 1, use_fallback)
        raise
    
    except json.JSONDecodeError as e:
        raise requests.exceptions.RequestException(f"Invalid JSON response: {str(e)}")
    
    except Exception as e:
        raise requests.exceptions.RequestException(f"Unexpected error: {str(e)}")

def get_default_response():
    """
    Tr·∫£ v·ªÅ g·ª£i √Ω m·∫∑c ƒë·ªãnh khi kh√¥ng c√≥ API
    """
    return [
        "- Thu nh·ªè m·ª•c ti√™u h√¥m nay, t·∫≠p trung t·ª´ng b∆∞·ªõc nh·ªè.",
        "- Th·ªü 4-4-6 trong 5 ph√∫t (4s h√≠t v√†o, 4s gi·ªØ, 6s th·ªü ra).",
        "- Li√™n h·ªá ng∆∞·ªùi th√¢n tin c·∫≠y ho·∫∑c chuy√™n gia n·∫øu c·∫ßn.",
        "- ƒê·∫£m b·∫£o ngh·ªâ ng∆°i v√† gi·∫•c ng·ªß ƒë·∫ßy ƒë·ªß.",
        "- D√†nh th·ªùi gian cho ho·∫°t ƒë·ªông th∆∞ gi√£n y√™u th√≠ch."
    ]

# UI Components
app_header()
show_disclaimer()

# Progress indicator
create_progress_indicator(3, 3)

# Enhanced header for chatbot
st.markdown("""
<div style="text-align: center; margin: 2rem 0;">
    <h2 style="color: var(--primary-color); margin: 0;">üí¨ Chatbot h·ªó tr·ª£ t√¢m l√Ω</h2>
    <p style="color: var(--text-secondary); margin: 0.5rem 0;">
        Tr√≤ chuy·ªán v·ªõi AI ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c l·ªùi khuy√™n v√† h·ªó tr·ª£ ban ƒë·∫ßu v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn
    </p>
</div>
""", unsafe_allow_html=True)

# Info cards about chatbot
create_info_card(
    "Chatbot c√≥ th·ªÉ gi√∫p g√¨?",
    "‚Ä¢ üí≠ L·∫Øng nghe v√† chia s·∫ª c·∫£m x√∫c\n"
    "‚Ä¢ üßò G·ª£i √Ω k·ªπ thu·∫≠t th∆∞ gi√£n v√† mindfulness\n"
    "‚Ä¢ üìö Cung c·∫•p th√¥ng tin v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn\n"
    "‚Ä¢ üéØ ƒê·ªãnh h∆∞·ªõng t√¨m ki·∫øm s·ª± h·ªó tr·ª£ chuy√™n m√¥n\n"
    "‚Ä¢ ‚ö†Ô∏è L∆∞u √Ω: Kh√¥ng thay th·∫ø t∆∞ v·∫•n y t·∫ø chuy√™n nghi·ªáp",
    "ü§ñ"
)

# Kh·ªüi t·∫°o session state cho chat history
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# Sidebar configuration
with st.sidebar:
    st.markdown("### ‚öôÔ∏è C·∫•u h√¨nh Chatbot")
    
    # Ch·ªçn API provider (gi·∫•u v√¨ ch·ªâ d√πng OpenAI)
    api_provider = "openai"
    
    # Ki·ªÉm tra API key
    api_key = os.environ.get("OPENAI_API_KEY")
    
    if api_key:
        st.success("‚úÖ OpenAI API ƒë√£ s·∫µn s√†ng")
        st.markdown("**Model:** GPT-3.5 Turbo")
    else:
        st.warning("‚ùå Ch∆∞a c·∫•u h√¨nh OpenAI API")
        st.markdown("S·∫Ω s·ª≠ d·ª•ng ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh")
    
    # Chat controls
    if st.button("üóëÔ∏è X√≥a l·ªãch s·ª≠ chat", use_container_width=True):
        st.session_state.chat_history = []
        st.rerun()
    
    st.markdown("---")
    st.markdown("### üìû H·ªó tr·ª£ kh·∫©n c·∫•p")
    st.markdown("""
    **ƒê∆∞·ªùng d√¢y n√≥ng:**
    - üìû 115 (C·∫•p c·ª©u)
    - üìû 1800 6969 (T√¢m l√Ω)
    - üìû 028 3821 2277 (BV T√¢m th·∫ßn)
    """)

# Chat container with enhanced styling
st.markdown('<div class="chat-container">', unsafe_allow_html=True)

# Display chat history with enhanced styling
for i, message in enumerate(st.session_state.chat_history):
    if message["role"] == "user":
        st.markdown(f"""
        <div class="chat-message user-message slide-in" style="animation-delay: {i*0.1}s;">
            <div style="display: flex; align-items: flex-start;">
                <span style="font-size: 1.5rem; margin-right: 0.5rem;">üë§</span>
                <div>{message["content"]}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.markdown(f"""
        <div class="chat-message bot-message slide-in" style="animation-delay: {i*0.1}s;">
            <div style="display: flex; align-items: flex-start;">
                <span style="font-size: 1.5rem; margin-right: 0.5rem;">ü§ñ</span>
                <div>{message["content"]}</div>
            </div>
        </div>
        """, unsafe_allow_html=True)

# Chat input
st.markdown("### üí¨ Tin nh·∫Øn m·ªõi")
msg = st.text_area(
    "B·∫°n mu·ªën chia s·∫ª ho·∫∑c h·ªèi g√¨?", 
    placeholder="V√≠ d·ª•: T√¥i c·∫£m th·∫•y cƒÉng th·∫≥ng g·∫ßn ƒë√¢y...",
    height=100
)

col1, col2 = st.columns([3, 1])
with col2:
    send_button = st.button("üì§ G·ª≠i", use_container_width=True)

if (send_button or msg) and msg and msg.strip():
    # Th√™m tin nh·∫Øn ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
    st.session_state.chat_history.append({"role": "user", "content": msg})

    # X·ª≠ l√Ω v√† t·∫°o ph·∫£n h·ªìi
    try:
        if not api_key:
            response = "\n".join(get_default_response())
            st.session_state.chat_history.append({"role": "assistant", "content": f"‚ö†Ô∏è S·ª≠ d·ª•ng ph·∫£n h·ªìi m·∫∑c ƒë·ªãnh (ch∆∞a c·∫•u h√¨nh API):\n\n{response}"})
        else:
            with st.spinner("ü§ñ ƒêang x·ª≠ l√Ω..."):
                response = call_chat_api(msg, api_provider)
                st.session_state.chat_history.append({"role": "assistant", "content": response})

    except requests.exceptions.Timeout:
        error_msg = "‚ö†Ô∏è H·∫øt th·ªùi gian ch·ªù. Vui l√≤ng th·ª≠ l·∫°i."
        st.session_state.chat_history.append({"role": "assistant", "content": error_msg})
        logger.error(error_msg)

    except requests.exceptions.RequestException as e:
        error_msg = f"‚ö†Ô∏è L·ªói k·∫øt n·ªëi API: {str(e)}"
        st.session_state.chat_history.append({"role": "assistant", "content": error_msg})
        logger.error(f"API error: {str(e)}")
        
    except Exception as e:
        error_msg = f"‚ö†Ô∏è L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}"
        st.session_state.chat_history.append({"role": "assistant", "content": error_msg})
        logger.error(f"Unexpected error: {str(e)}")
    
    # Refresh page to show new messages
    st.rerun()

st.markdown('</div>', unsafe_allow_html=True)

# Tips section
st.markdown("### üí° G·ª£i √Ω s·ª≠ d·ª•ng")
col1, col2 = st.columns(2)

with col1:
    create_info_card(
        "C√°ch ƒë·∫∑t c√¢u h·ªèi hi·ªáu qu·∫£",
        "‚Ä¢ M√¥ t·∫£ c·ª• th·ªÉ c·∫£m x√∫c v√† t√¨nh hu·ªëng\n"
        "‚Ä¢ Chia s·∫ª th·ªùi gian v√† m·ª©c ƒë·ªô ·∫£nh h∆∞·ªüng\n"
        "‚Ä¢ H·ªèi v·ªÅ k·ªπ thu·∫≠t c·ª• th·ªÉ (th·ªü, meditation)\n"
        "‚Ä¢ T√¨m hi·ªÉu v·ªÅ tri·ªáu ch·ª©ng v√† c√°ch x·ª≠ l√Ω",
        "üí¨"
    )

with col2:
    create_info_card(
        "C√°c ch·ªß ƒë·ªÅ c√≥ th·ªÉ th·∫£o lu·∫≠n",
        "‚Ä¢ Qu·∫£n l√Ω stress v√† lo √¢u\n"
        "‚Ä¢ K·ªπ thu·∫≠t th∆∞ gi√£n v√† mindfulness\n"
        "‚Ä¢ C·∫£i thi·ªán gi·∫•c ng·ªß v√† t√¢m tr·∫°ng\n"
        "‚Ä¢ X√¢y d·ª±ng th√≥i quen t√≠ch c·ª±c\n"
        "‚Ä¢ T√¨m ki·∫øm s·ª± h·ªó tr·ª£ chuy√™n m√¥n",
        "üìã"
    )
