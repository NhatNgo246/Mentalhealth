"""
PDF Export Module for SOULFRIEND
Generates professional PDF reports of assessment results
"""

# Only import Streamlit when actually running in Streamlit context
try:
    import streamlit as st
    STREAMLIT_AVAILABLE = True
except ImportError:
    STREAMLIT_AVAILABLE = False
    
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, cm
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from reportlab.graphics.shapes import Drawing, Rect
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.charts.piecharts import Pie
from datetime import datetime
import io
import base64
from typing import Dict, Any

def create_header_footer(canvas, doc):
    """Create header and footer for PDF pages"""
    canvas.saveState()
    
    # Header
    canvas.setFont('Helvetica-Bold', 16)
    canvas.setFillColor(colors.HexColor('#4a90e2'))
    canvas.drawString(50, letter[1] - 50, "üß† SOULFRIEND - B√°o c√°o ƒë√°nh gi√° s·ª©c kh·ªèe t√¢m th·∫ßn")
    
    # Header line
    canvas.setStrokeColor(colors.HexColor('#4a90e2'))
    canvas.setLineWidth(2)
    canvas.line(50, letter[1] - 70, letter[0] - 50, letter[1] - 70)
    
    # Footer
    canvas.setFont('Helvetica', 9)
    canvas.setFillColor(colors.grey)
    footer_text = f"T·∫°o ng√†y: {datetime.now().strftime('%d/%m/%Y %H:%M')} | Trang {doc.page}"
    canvas.drawString(50, 50, footer_text)
    
    # Footer disclaimer
    disclaimer = "‚ö†Ô∏è B√°o c√°o n√†y ch·ªâ mang t√≠nh tham kh·∫£o, kh√¥ng thay th·∫ø ch·∫©n ƒëo√°n y khoa chuy√™n nghi·ªáp"
    canvas.setFont('Helvetica-Oblique', 8)
    canvas.drawCentredString(letter[0]/2, 30, disclaimer)
    
    canvas.restoreState()

def create_assessment_summary_table(enhanced_result, questionnaire_type: str) -> Table:
    """Create summary table for assessment results"""
    
    data = [
        ['Th√¥ng tin ƒë√°nh gi√°', 'K·∫øt qu·∫£'],
        ['Lo·∫°i thang ƒëo', questionnaire_type],
        ['Ng√†y th·ª±c hi·ªán', datetime.now().strftime('%d/%m/%Y')],
        ['T·ªïng ƒëi·ªÉm', str(enhanced_result.total_score)],
        ['M·ª©c ƒë·ªô nghi√™m tr·ªçng', enhanced_result.severity_level.replace('_', ' ').title()],
        ['Di·ªÖn gi·∫£i', enhanced_result.interpretation[:100] + '...' if len(enhanced_result.interpretation) > 100 else enhanced_result.interpretation]
    ]
    
    table = Table(data, colWidths=[2.5*inch, 3*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#4a90e2')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 12),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 10),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightgrey]),
    ]))
    
    return table

def create_subscales_table(subscales: Dict[str, Dict]) -> Table:
    """Create detailed subscales breakdown table"""
    
    if not subscales:
        return None
    
    data = [['Lƒ©nh v·ª±c', 'ƒêi·ªÉm s·ªë', 'M·ª©c ƒë·ªô', 'M√¥ t·∫£']]
    
    for subscale_name, subscale_data in subscales.items():
        data.append([
            subscale_name,
            str(subscale_data['score']),
            subscale_data['level'].title(),
            subscale_data.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£')[:50] + '...'
        ])
    
    table = Table(data, colWidths=[1.5*inch, 1*inch, 1.2*inch, 2.3*inch])
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#7b68ee')),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('FONTSIZE', (0, 0), (-1, 0), 11),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
        ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
        ('FONTSIZE', (0, 1), (-1, -1), 9),
        ('ROWBACKGROUNDS', (0, 1), (-1, -1), [colors.white, colors.lightblue]),
    ]))
    
    return table

def create_recommendations_section(recommendations: Dict[str, Any]) -> list:
    """Create recommendations section for PDF"""
    
    styles = getSampleStyleSheet()
    story = []
    
    # Recommendations title
    rec_style = ParagraphStyle(
        'RecommendationTitle',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        textColor=colors.HexColor('#2c3e50'),
        leftIndent=0
    )
    
    story.append(Paragraph("üí° Khuy·∫øn ngh·ªã c√° nh√¢n h√≥a", rec_style))
    
    # Main recommendation
    if 'title' in recommendations:
        title_style = ParagraphStyle(
            'RecTitle',
            parent=styles['Heading3'],
            fontSize=12,
            textColor=colors.HexColor('#e74c3c'),
            spaceAfter=6
        )
        story.append(Paragraph(f"üéØ {recommendations['title']}", title_style))
    
    if 'message' in recommendations:
        message_style = ParagraphStyle(
            'RecMessage',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=12,
            leftIndent=20,
            rightIndent=20,
            alignment=TA_JUSTIFY
        )
        story.append(Paragraph(recommendations['message'], message_style))
    
    # Action suggestions
    if 'suggestions' in recommendations:
        story.append(Paragraph("üöÄ C√°c b∆∞·ªõc c·∫ßn th·ª±c hi·ªán:", rec_style))
        
        suggestion_style = ParagraphStyle(
            'Suggestions',
            parent=styles['Normal'],
            fontSize=10,
            spaceAfter=6,
            leftIndent=30,
            bulletIndent=20
        )
        
        for i, suggestion in enumerate(recommendations['suggestions'], 1):
            story.append(Paragraph(f"{i}. {suggestion}", suggestion_style))
    
    return story

def create_risk_assessment_section(severity_level: str) -> list:
    """Create risk assessment and emergency contact section"""
    
    styles = getSampleStyleSheet()
    story = []
    
    # Risk level assessment
    risk_style = ParagraphStyle(
        'RiskTitle',
        parent=styles['Heading2'],
        fontSize=14,
        spaceAfter=12,
        textColor=colors.HexColor('#d32f2f')
    )
    
    story.append(Paragraph("‚ö†Ô∏è ƒê√°nh gi√° m·ª©c ƒë·ªô r·ªßi ro", risk_style))
    
    # Risk level description
    risk_levels = {
        'normal': ('M·ª©c ƒë·ªô b√¨nh th∆∞·ªùng', 'Ti·∫øp t·ª•c duy tr√¨ l·ªëi s·ªëng t√≠ch c·ª±c', colors.green),
        'mild': ('M·ª©c ƒë·ªô nh·∫π', 'C·∫ßn theo d√µi v√† chƒÉm s√≥c b·∫£n th√¢n', colors.orange),
        'moderate': ('M·ª©c ƒë·ªô trung b√¨nh', 'N√™n t√¨m ki·∫øm h·ªó tr·ª£ chuy√™n nghi·ªáp', colors.orange),
        'severe': ('M·ª©c ƒë·ªô nghi√™m tr·ªçng', 'C·∫ßn can thi·ªáp chuy√™n nghi·ªáp ngay l·∫≠p t·ª©c', colors.red),
        'extremely_severe': ('M·ª©c ƒë·ªô c·ª±c k·ª≥ nghi√™m tr·ªçng', 'C·∫ßn h·ªó tr·ª£ y t·∫ø kh·∫©n c·∫•p', colors.red)
    }
    
    level_info = risk_levels.get(severity_level, ('Ch∆∞a x√°c ƒë·ªãnh', 'C·∫ßn ƒë√°nh gi√° th√™m', colors.grey))
    
    risk_desc_style = ParagraphStyle(
        'RiskDesc',
        parent=styles['Normal'],
        fontSize=11,
        spaceAfter=12,
        textColor=level_info[2],
        alignment=TA_LEFT
    )
    
    story.append(Paragraph(f"<b>M·ª©c ƒë·ªô:</b> {level_info[0]}", risk_desc_style))
    story.append(Paragraph(f"<b>Khuy·∫øn ngh·ªã:</b> {level_info[1]}", risk_desc_style))
    
    # Emergency contacts if high risk
    if severity_level in ['severe', 'extremely_severe']:
        emergency_style = ParagraphStyle(
            'Emergency',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            textColor=colors.red,
            borderColor=colors.red,
            borderWidth=1,
            borderPadding=10
        )
        
        story.append(Paragraph("üÜò LI√äN H·ªÜ KH·∫®N C·∫§P", risk_style))
        story.append(Paragraph("‚Ä¢ ƒê∆∞·ªùng d√¢y n√≥ng: 1800-1567", emergency_style))
        story.append(Paragraph("‚Ä¢ C·∫•p c·ª©u: 115", emergency_style))
        story.append(Paragraph("‚Ä¢ T∆∞ v·∫•n t√¢m l√Ω: 1900-555-555", emergency_style))
    
    return story

def generate_pdf_report(enhanced_result, questionnaire_type: str, user_info: Dict = None) -> bytes:
    """Generate comprehensive PDF report"""
    
    # Create PDF buffer
    buffer = io.BytesIO()
    doc = SimpleDocTemplate(
        buffer,
        pagesize=letter,
        rightMargin=72,
        leftMargin=72,
        topMargin=100,
        bottomMargin=100
    )
    
    # Story list to hold all content
    story = []
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Title'],
        fontSize=20,
        spaceAfter=30,
        textColor=colors.HexColor('#2c3e50'),
        alignment=TA_CENTER
    )
    
    heading_style = ParagraphStyle(
        'CustomHeading',
        parent=styles['Heading1'],
        fontSize=16,
        spaceAfter=12,
        textColor=colors.HexColor('#34495e')
    )
    
    # Title
    story.append(Paragraph("B√°o c√°o ƒê√°nh gi√° S·ª©c kh·ªèe T√¢m th·∫ßn", title_style))
    story.append(Spacer(1, 20))
    
    # User info section (if provided)
    if user_info:
        story.append(Paragraph("üë§ Th√¥ng tin c√° nh√¢n", heading_style))
        user_table_data = []
        for key, value in user_info.items():
            user_table_data.append([key, value])
        
        user_table = Table(user_table_data, colWidths=[2*inch, 3*inch])
        user_table.setStyle(TableStyle([
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
        ]))
        
        story.append(user_table)
        story.append(Spacer(1, 20))
    
    # Assessment summary
    story.append(Paragraph("üìä T√≥m t·∫Øt k·∫øt qu·∫£", heading_style))
    summary_table = create_assessment_summary_table(enhanced_result, questionnaire_type)
    story.append(summary_table)
    story.append(Spacer(1, 20))
    
    # Subscales breakdown (if available)
    if hasattr(enhanced_result, 'subscales') and enhanced_result.subscales:
        story.append(Paragraph("üìà Chi ti·∫øt theo lƒ©nh v·ª±c", heading_style))
        subscales_table = create_subscales_table(enhanced_result.subscales)
        if subscales_table:
            story.append(subscales_table)
            story.append(Spacer(1, 20))
    
    # Recommendations
    if hasattr(enhanced_result, 'recommendations'):
        story.extend(create_recommendations_section(enhanced_result.recommendations))
        story.append(Spacer(1, 20))
    
    # Risk assessment
    story.extend(create_risk_assessment_section(enhanced_result.severity_level))
    story.append(Spacer(1, 20))
    
    # Legal disclaimer
    disclaimer_style = ParagraphStyle(
        'Disclaimer',
        parent=styles['Normal'],
        fontSize=9,
        textColor=colors.grey,
        alignment=TA_JUSTIFY,
        borderColor=colors.grey,
        borderWidth=1,
        borderPadding=10
    )
    
    disclaimer_text = """
    <b>Tuy√™n b·ªë mi·ªÖn tr·ª´ tr√°ch nhi·ªám:</b><br/><br/>
    B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o ra b·ªüi ·ª©ng d·ª•ng SOULFRIEND v√† ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. 
    K·∫øt qu·∫£ kh√¥ng thay th·∫ø cho vi·ªác ch·∫©n ƒëo√°n, ƒëi·ªÅu tr·ªã ho·∫∑c t∆∞ v·∫•n y khoa chuy√™n nghi·ªáp. 
    N·∫øu b·∫°n ƒëang g·∫∑p ph·∫£i c√°c v·∫•n ƒë·ªÅ nghi√™m tr·ªçng v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn, vui l√≤ng li√™n h·ªá 
    v·ªõi c√°c chuy√™n gia y t·∫ø ho·∫∑c d·ªãch v·ª• h·ªó tr·ª£ kh·∫©n c·∫•p.<br/><br/>
    ·ª®ng d·ª•ng SOULFRIEND ƒë∆∞·ª£c ph√°t tri·ªÉn nh·∫±m m·ª•c ƒë√≠ch h·ªó tr·ª£ s√†ng l·ªçc ban ƒë·∫ßu v√† 
    n√¢ng cao nh·∫≠n th·ª©c v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn.
    """
    
    story.append(Paragraph(disclaimer_text, disclaimer_style))
    
    # Build PDF
    doc.build(story, onFirstPage=create_header_footer, onLaterPages=create_header_footer)
    
    # Get PDF bytes
    pdf_bytes = buffer.getvalue()
    buffer.close()
    
    return pdf_bytes

def create_download_button(enhanced_result, questionnaire_type: str, user_info: Dict = None):
    """Create download button for PDF report"""
    
    if st.button("üìÑ T·∫£i b√°o c√°o PDF", use_container_width=True, type="secondary"):
        try:
            with st.spinner("üîÑ ƒêang t·∫°o b√°o c√°o PDF..."):
                pdf_bytes = generate_pdf_report(enhanced_result, questionnaire_type, user_info)
                
                # Create download filename
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"SOULFRIEND_BaoCao_{questionnaire_type}_{timestamp}.pdf"
                
                st.download_button(
                    label="üíæ T·∫£i v·ªÅ b√°o c√°o PDF",
                    data=pdf_bytes,
                    file_name=filename,
                    mime="application/pdf",
                    use_container_width=True
                )
                
                st.success("‚úÖ B√°o c√°o PDF ƒë√£ s·∫µn s√†ng ƒë·ªÉ t·∫£i v·ªÅ!")
                st.info("üí° B√°o c√°o bao g·ªìm: K·∫øt qu·∫£ ƒë√°nh gi√°, ph√¢n t√≠ch chi ti·∫øt, khuy·∫øn ngh·ªã v√† th√¥ng tin li√™n h·ªá kh·∫©n c·∫•p.")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi t·∫°o b√°o c√°o PDF: {str(e)}")
            st.info("üîß Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£.")

def create_email_report_option(enhanced_result, questionnaire_type: str):
    """Create option to email the report (placeholder for future feature)"""
    
    with st.expander("üìß G·ª≠i b√°o c√°o qua email (S·∫Øp c√≥)"):
        email = st.text_input("ƒê·ªãa ch·ªâ email c·ªßa b·∫°n:", placeholder="example@email.com")
        
        if st.button("üìß G·ª≠i b√°o c√°o", disabled=True):
            st.info("üöß T√≠nh nƒÉng g·ª≠i email s·∫Ω c√≥ trong phi√™n b·∫£n ti·∫øp theo!")
            # Future implementation:
            # - Generate PDF
            # - Send via email service (SendGrid, AWS SES, etc.)
            # - Include secure sharing options

def generate_assessment_report(assessment_data: Dict[str, Any]) -> bytes:
    """
    Generate PDF assessment report
    
    Args:
        assessment_data: Dictionary containing assessment information
        
    Returns:
        bytes: PDF file content as bytes
    """
    try:
        # Create PDF buffer
        buffer = io.BytesIO()
        
        # Create PDF document
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            rightMargin=72,
            leftMargin=72,
            topMargin=100,
            bottomMargin=72
        )
        
        # Get styles
        styles = getSampleStyleSheet()
        
        # Custom styles
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#2E86AB')
        )
        
        header_style = ParagraphStyle(
            'CustomHeader',
            parent=styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            textColor=colors.HexColor('#A23B72')
        )
        
        # Build content
        content = []
        
        # Title
        content.append(Paragraph("üß† SOULFRIEND - B√ÅO C√ÅO ƒê√ÅNH GI√Å S·ª®C KH·ªéE T√ÇM TH·∫¶N", title_style))
        content.append(Spacer(1, 20))
        
        # Assessment info
        content.append(Paragraph("üìã TH√îNG TIN ƒê√ÅNH GI√Å", header_style))
        
        assessment_info = [
            ["Ng√†y ƒë√°nh gi√°:", assessment_data.get('assessment_date', 'N/A')],
            ["Lo·∫°i ƒë√°nh gi√°:", assessment_data.get('assessment_type', 'N/A')],
            ["Th·ªùi gian t·∫°o b√°o c√°o:", datetime.now().strftime("%d/%m/%Y %H:%M")]
        ]
        
        info_table = Table(assessment_info, colWidths=[3*inch, 3*inch])
        info_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
        ]))
        content.append(info_table)
        content.append(Spacer(1, 20))
        
        # Scores section
        if 'scores' in assessment_data:
            content.append(Paragraph("üìä K·∫æT QU·∫¢ ƒê√ÅNH GI√Å", header_style))
            
            scores_data = [["Thang ƒëo", "ƒêi·ªÉm s·ªë", "M·ª©c ƒë·ªô"]]
            scores = assessment_data['scores']
            
            for key, value in scores.items():
                if isinstance(value, (int, float)):
                    # Determine severity based on score
                    if value >= 20:
                        severity = "R·∫•t cao"
                    elif value >= 15:
                        severity = "Cao" 
                    elif value >= 10:
                        severity = "Trung b√¨nh"
                    else:
                        severity = "Th·∫•p"
                    
                    scores_data.append([key.replace('_', ' ').title(), str(value), severity])
            
            scores_table = Table(scores_data, colWidths=[2*inch, 1.5*inch, 2*inch])
            scores_table.setStyle(TableStyle([
                ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 10),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ]))
            content.append(scores_table)
            content.append(Spacer(1, 20))
        
        # Risk assessment
        if 'risk_assessment' in assessment_data:
            content.append(Paragraph("üéØ ƒê√ÅNH GI√Å R·ª¶I RO", header_style))
            content.append(Paragraph(assessment_data['risk_assessment'], styles['Normal']))
            content.append(Spacer(1, 20))
        
        # Recommendations
        if 'recommendations' in assessment_data:
            content.append(Paragraph("üí° KHUY·∫æN NGH·ªä", header_style))
            
            for i, rec in enumerate(assessment_data['recommendations'], 1):
                content.append(Paragraph(f"{i}. {rec}", styles['Normal']))
            
            content.append(Spacer(1, 20))
        
        # Emergency contacts
        content.append(Paragraph("üö® LI√äN H·ªÜ KH·∫®N C·∫§P", header_style))
        emergency_info = """
        <b>ƒê∆∞·ªùng d√¢y n√≥ng h·ªó tr·ª£ t√¢m l√Ω 24/7:</b><br/>
        üìû <b>1800-1612</b> - T∆∞ v·∫•n mi·ªÖn ph√≠<br/>
        üè• <b>115</b> - C·∫•p c·ª©u y t·∫ø<br/>
        üí¨ <b>0912-345-678</b> - Tin nh·∫Øn h·ªó tr·ª£<br/><br/>
        
        <b>Khi n√†o c·∫ßn t√¨m ki·∫øm h·ªó tr·ª£ ngay l·∫≠p t·ª©c:</b><br/>
        ‚Ä¢ C√≥ √Ω ƒë·ªãnh t·ª± l√†m h·∫°i b·∫£n th√¢n<br/>
        ‚Ä¢ C·∫£m th·∫•y tuy·ªát v·ªçng ho√†n to√†n<br/>
        ‚Ä¢ Kh√¥ng th·ªÉ ki·ªÉm so√°t h√†nh vi<br/>
        ‚Ä¢ C√≥ ·∫£o gi√°c ho·∫∑c ·∫£o t∆∞·ªüng<br/>
        """
        content.append(Paragraph(emergency_info, styles['Normal']))
        
        # Footer disclaimer
        content.append(Spacer(1, 30))
        disclaimer = """
        <b>L∆∞u √Ω quan tr·ªçng:</b><br/>
        B√°o c√°o n√†y ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông d·ª±a tr√™n k·∫øt qu·∫£ ƒë√°nh gi√° v√† ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. 
        Kh√¥ng thay th·∫ø cho ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã y khoa chuy√™n nghi·ªáp. 
        N·∫øu b·∫°n c√≥ lo ng·∫°i v·ªÅ s·ª©c kh·ªèe t√¢m th·∫ßn, h√£y tham kh·∫£o √Ω ki·∫øn c·ªßa c√°c chuy√™n gia y t·∫ø.
        """
        content.append(Paragraph(disclaimer, styles['Normal']))
        
        # Build PDF
        doc.build(content, onFirstPage=create_header_footer, onLaterPages=create_header_footer)
        
        # Get PDF bytes
        pdf_bytes = buffer.getvalue()
        buffer.close()
        
        return pdf_bytes
        
    except Exception as e:
        # Handle errors without Streamlit dependency
        print(f"Error generating PDF: {str(e)}")
        import traceback
        traceback.print_exc()
        return None
